"use strict";
// Copyright (c) Wictor WilÃ©n. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = require("express");
var debug = require("debug");
var botbuilder_1 = require("botbuilder");
var botbuilder_core_1 = require("botbuilder-core");
var botbuilder_teams_messagingextensions_1 = require("botbuilder-teams-messagingextensions");
require("reflect-metadata");
var getMethodsNames = function (obj) {
    return Object.getOwnPropertyNames(obj).filter(function (key) { return typeof obj[key] === "function"; }).concat(Object.getPrototypeOf(obj) ? getMethodsNames(Object.getPrototypeOf(obj)) : []);
};
/**
 * Express router for Microsoft Teams Connectors, Bots and Outgoing Webhooks
 * @param components Imported module with all implementations
 */
exports.default = (function (components) {
    var router = (0, express_1.Router)();
    var log = debug.default("msteams");
    var _loop_1 = function (app) {
        if (Object.prototype.hasOwnProperty.call(components, app)) {
            var component = components[app];
            if (Reflect.hasMetadata("msteams:bot", component)) {
                var botSettings = Reflect.getMetadata("msteams:bot", component);
                // if (component["__isBot"]) {
                log("Creating a new bot instance at " + botSettings.endpoint);
                var adapter_1 = new botbuilder_1.BotFrameworkAdapter({
                    appId: typeof botSettings.appId === "function" ? botSettings.appId() : botSettings.appId,
                    appPassword: typeof botSettings.appPassword === "function" ? botSettings.appPassword() : botSettings.appPassword,
                    certificatePrivateKey: typeof botSettings.certificatePrivateKey === "function" ? botSettings.certificatePrivateKey() : botSettings.certificatePrivateKey,
                    certificateThumbprint: typeof botSettings.certificateThumbprint === "function" ? botSettings.certificateThumbprint() : botSettings.certificateThumbprint
                });
                // Create the conversation state
                var conversationState_1 = new botbuilder_core_1.ConversationState(botSettings.storage, botSettings.namespace);
                // Create the user state
                var userState = new botbuilder_core_1.UserState(botSettings.storage, botSettings.namespace);
                // generic error handler
                adapter_1.onTurnError = function (context, error) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                log("[onTurnError]: " + error);
                                return [4 /*yield*/, context.sendActivity("Oops. Something went wrong!")];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, conversationState_1.delete(context)];
                            case 2:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                // Create the Bot
                // eslint-disable-next-line new-cap
                var bot_1 = new component(conversationState_1, userState, adapter_1);
                // add the Messaging Extension Middleware
                for (var p in bot_1) {
                    if (p === "__messageExtensions") {
                        var messageExtensions = bot_1[p];
                        log("Found " + messageExtensions.length + " MessagingExtension(s) on the Bot object");
                        messageExtensions.forEach(function (me) {
                            log("Adding Messaging extension: " + me.name);
                            adapter_1.use(new botbuilder_teams_messagingextensions_1.MessagingExtensionMiddleware(me.name, bot_1[me.propertyKey]));
                        });
                    }
                }
                // add the bot to the router
                router.post(botSettings.endpoint, function (req, res) {
                    adapter_1.processActivity(req, res, function (turnContext) { return __awaiter(void 0, void 0, void 0, function () {
                        var err_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, bot_1.run(turnContext)];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    err_1 = _a.sent();
                                    adapter_1.onTurnError(turnContext, err_1);
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); });
                });
                getMethodsNames(bot_1).forEach(function (m) {
                    if (Reflect.hasMetadata("msteams:calling", bot_1, m)) {
                        var path = Reflect.getMetadata("msteams:calling", bot_1, m);
                        log("Adding Bot Calling webhook at " + path);
                        router.post(path, function (req, res) {
                            bot_1[m](req, res);
                        });
                    }
                });
            }
            else if (component.__isOutgoingWebhook) {
                log("Creating a new outgoing webhook instance at " + component.__serviceEndpoint);
                // eslint-disable-next-line new-cap
                var outgoingWebhook_1 = new component();
                router.post(component.__serviceEndpoint, function (req, res, next) {
                    outgoingWebhook_1.requestHandler(req, res, next);
                });
            }
            else if (component.__isConnector) {
                log("Creating a new connector instance at " + component.__connectEndpoint);
                // eslint-disable-next-line new-cap
                var connector_1 = new component();
                // Connector Ping endpoint
                // POST option
                router.post(component.__pingEndpoint, function (req, res) {
                    connector_1.Ping(req);
                    res.sendStatus(202);
                });
                // GET option
                router.get(component.__pingEndpoint, function (req, res) {
                    connector_1.Ping(req);
                    res.sendStatus(202);
                });
                // Connector connect post back - used when adding the connector
                router.post(component.__connectEndpoint, function (req, res) {
                    connector_1.Connect(req);
                    res.sendStatus(200);
                });
            }
            else {
                // component is not of a recognized type
            }
        }
    };
    for (var app in components) {
        _loop_1(app);
    }
    return router;
});
//# sourceMappingURL=MsTeamsApiRouter.js.map