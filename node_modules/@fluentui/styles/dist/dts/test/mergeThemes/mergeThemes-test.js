"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var styles_1 = require("@fluentui/styles");
var debugEnabled = require("../../src/debugEnabled");
var styleParam = {
    disableAnimations: false,
    props: {},
    rtl: false,
    theme: styles_1.emptyTheme,
    variables: {},
};
describe('mergeThemes', function () {
    test("always returns an object", function () {
        expect(styles_1.mergeThemes({}, {})).toMatchObject({});
        expect(styles_1.mergeThemes(undefined, undefined)).toMatchObject({});
        expect(styles_1.mergeThemes({}, undefined)).toMatchObject({});
        expect(styles_1.mergeThemes(undefined, {})).toMatchObject({});
    });
    test('gracefully handles merging a theme in with undefined values', function () {
        var target = {
            siteVariables: { color: 'black' },
            componentVariables: { Button: { color: 'black' } },
            componentStyles: { Button: { root: { color: 'black' } } },
            rtl: true,
        };
        var source = {
            siteVariables: undefined,
            componentVariables: undefined,
            componentStyles: undefined,
            rtl: undefined,
        };
        expect(function () { return styles_1.mergeThemes(target, source); }).not.toThrow();
    });
    test('gracefully handles merging onto a theme with undefined values', function () {
        var target = {
            siteVariables: undefined,
            componentVariables: undefined,
            componentStyles: undefined,
            rtl: undefined,
        };
        var source = {
            siteVariables: { color: 'black' },
            componentVariables: { Button: { color: 'black' } },
            componentStyles: { Button: { root: { color: 'black' } } },
            rtl: true,
        };
        expect(function () { return styles_1.mergeThemes(target, source); }).not.toThrow();
    });
    describe('siteVariables', function () {
        test('merges top level keys', function () {
            var target = { siteVariables: { overridden: false, keep: true } };
            var source = { siteVariables: { overridden: true, add: true } };
            expect(styles_1.mergeThemes(target, source)).toMatchObject({
                siteVariables: { overridden: true, keep: true, add: true },
            });
        });
        test('deep merges nested keys', function () {
            var target = { siteVariables: { nested: { replaced: false, deep: { dOne: 1 } } } };
            var source = { siteVariables: { nested: { other: 'value', deep: { dTwo: 'two' } } } };
            expect(styles_1.mergeThemes(target, source)).toMatchObject({
                siteVariables: {
                    nested: { replaced: false, other: 'value', deep: { dOne: 1, dTwo: 'two' } },
                },
            });
        });
    });
    describe('componentVariables', function () {
        test('component names are merged', function () {
            var target = { componentVariables: { Button: {} } };
            var source = { componentVariables: { Icon: {} } };
            var merged = styles_1.mergeThemes(target, source);
            expect(merged.componentVariables).toHaveProperty('Button');
            expect(merged.componentVariables).toHaveProperty('Icon');
        });
        test('objects are converted to functions', function () {
            var target = { componentVariables: { Button: { color: 'red' } } };
            var source = { componentVariables: { Icon: { color: 'blue' } } };
            var merged = styles_1.mergeThemes(target, source);
            expect(merged.componentVariables.Button).toBeInstanceOf(Function);
            expect(merged.componentVariables.Icon).toBeInstanceOf(Function);
        });
        test('functions return merged variables', function () {
            var target = { componentVariables: { Button: function () { return ({ one: 1, three: 3 }); } } };
            var source = {
                componentVariables: { Button: function () { return ({ one: 'one', two: 'two' }); } },
            };
            var merged = styles_1.mergeThemes(target, source);
            expect(merged.componentVariables.Button()).toMatchObject({
                one: 'one',
                two: 'two',
                three: 3,
            });
        });
        test('variables are deep merged', function () {
            var target = {
                componentVariables: {
                    Button: function () { return ({ one: { nestedOne: 1, nestedThree: 3, deep: { dOne: 1 } } }); },
                },
            };
            var source = {
                componentVariables: {
                    Button: function () { return ({ one: { nestedOne: 'one', nestedTwo: 'two', deep: { dTwo: 'two' } } }); },
                },
            };
            var merged = styles_1.mergeThemes(target, source);
            expect(merged.componentVariables.Button()).toMatchObject({
                one: {
                    nestedOne: 'one',
                    nestedTwo: 'two',
                    nestedThree: 3,
                    deep: { dOne: 1, dTwo: 'two' },
                },
            });
        });
        test('functions accept and apply siteVariables', function () {
            var target = {
                componentVariables: {
                    Button: function (siteVariables) { return (__assign({ one: 1, target: true }, siteVariables)); },
                },
            };
            var source = {
                componentVariables: {
                    Button: function (siteVariables) { return (__assign({ two: 2, source: true }, siteVariables)); },
                },
            };
            var merged = styles_1.mergeThemes(target, source);
            var siteVariables = { one: 'one', two: 'two', fontSizes: {} };
            expect(merged.componentVariables.Button(siteVariables)).toMatchObject({
                one: 'one',
                two: 'two',
                source: true,
                target: true,
            });
        });
    });
    describe('componentStyles', function () {
        test('component names are merged', function () {
            var target = { componentStyles: { Button: {} } };
            var source = { componentStyles: { Icon: {} } };
            var merged = styles_1.mergeThemes(target, source);
            expect(merged.componentStyles).toHaveProperty('Button');
            expect(merged.componentStyles).toHaveProperty('Icon');
        });
        test('component parts with style properties are merged', function () {
            var target = { componentStyles: { Button: { root: { color: 'red' } } } };
            var source = { componentStyles: { Icon: { root: { color: 'red' } } } };
            var merged = styles_1.mergeThemes(target, source);
            expect(merged.componentStyles.Button).toHaveProperty('root');
            expect(merged.componentStyles.Icon).toHaveProperty('root');
        });
        test('converts merged component parts to functions', function () {
            var _a, _b;
            var target = { componentStyles: { Button: { root: { color: 'red' } } } };
            var source = { componentStyles: { Icon: { root: { color: 'red' } } } };
            var merged = styles_1.mergeThemes(target, source);
            expect((_a = merged.componentStyles.Button) === null || _a === void 0 ? void 0 : _a.root).toBeInstanceOf(Function);
            expect((_b = merged.componentStyles.Icon) === null || _b === void 0 ? void 0 : _b.root).toBeInstanceOf(Function);
        });
        test('converts target only component parts to functions', function () {
            var _a;
            var target = { componentStyles: { Button: { root: { color: 'red' } } } };
            var merged = styles_1.mergeThemes(undefined, target);
            expect((_a = merged.componentStyles.Button) === null || _a === void 0 ? void 0 : _a.root).toBeInstanceOf(Function);
        });
        test('component part styles are deeply merged', function () {
            var _a;
            var target = {
                componentStyles: {
                    Button: {
                        root: {
                            display: 'inline-block',
                            color: 'green',
                            '::before': {
                                content: 'before content',
                            },
                        },
                    },
                },
            };
            var source = {
                componentStyles: {
                    Button: {
                        root: {
                            color: 'blue',
                            '::before': {
                                color: 'red',
                            },
                        },
                    },
                },
            };
            var merged = styles_1.mergeThemes(target, source);
            expect((_a = merged.componentStyles.Button) === null || _a === void 0 ? void 0 : _a.root(styleParam)).toMatchObject({
                display: 'inline-block',
                color: 'blue',
                '::before': {
                    content: 'before content',
                    color: 'red',
                },
            });
        });
        test('functions can accept and apply params', function () {
            var _a;
            var target = {
                componentStyles: {
                    Button: {
                        root: function (param) { return (__assign({ target: true }, param)); },
                    },
                },
            };
            var source = {
                componentStyles: {
                    Button: {
                        root: function (param) { return (__assign({ source: true }, param)); },
                    },
                },
            };
            var merged = styles_1.mergeThemes(target, source);
            var styleParam = {
                variables: { iconSize: 'large' },
                props: { primary: true },
            };
            expect((_a = merged.componentStyles.Button) === null || _a === void 0 ? void 0 : _a.root(styleParam)).toMatchObject(__assign({ source: true, target: true }, styleParam));
        });
    });
    describe('font faces', function () {
        test('returns a compact array', function () {
            expect(styles_1.mergeThemes({ fontFaces: undefined }, {
                fontFaces: [
                    {
                        name: 'Segoe UI',
                        paths: ['public/fonts/segoe-ui-regular.woff2'],
                        props: { fontWeight: 400 },
                    },
                    {
                        name: 'Segoe UI',
                        paths: ['public/fonts/segoe-ui-semibold.woff2'],
                        props: { fontWeight: 600 },
                    },
                ],
            })).toMatchObject({
                fontFaces: [
                    {
                        name: 'Segoe UI',
                        paths: ['public/fonts/segoe-ui-regular.woff2'],
                        props: { fontWeight: 400 },
                    },
                    {
                        name: 'Segoe UI',
                        paths: ['public/fonts/segoe-ui-semibold.woff2'],
                        props: { fontWeight: 600 },
                    },
                ],
            });
        });
    });
    describe('static styles', function () {
        test('returns a compact array', function () {
            expect(styles_1.mergeThemes({ staticStyles: undefined }, { staticStyles: [{ body: { color: 'red' } }, '*{box-sizing:border-box;}'] })).toMatchObject({
                staticStyles: [{ body: { color: 'red' } }, '*{box-sizing:border-box;}'],
            });
        });
    });
    describe('styles', function () {
        test('merges styles object and function', function () {
            var stylesAsObject = {
                margin: '0px',
                color: 'override',
                ':hover': {
                    margin: '0px',
                    color: 'override',
                },
            };
            var stylesAsFunction = function () { return ({
                color: 'black',
                ':hover': {
                    color: 'blue',
                },
            }); };
            expect(styles_1.mergeStyles(stylesAsObject, stylesAsFunction)()).toMatchObject({
                margin: '0px',
                color: 'black',
                ':hover': {
                    margin: '0px',
                    color: 'blue',
                },
            });
        });
        test('merges styles function and object', function () {
            var stylesAsFunction = function () { return ({
                margin: '0px',
                color: 'override',
                ':hover': {
                    margin: '0px',
                    color: 'override',
                },
            }); };
            var stylesAsObject = {
                color: 'black',
                ':hover': {
                    color: 'blue',
                },
            };
            expect(styles_1.mergeStyles(stylesAsFunction, stylesAsObject)()).toMatchObject({
                margin: '0px',
                color: 'black',
                ':hover': {
                    margin: '0px',
                    color: 'blue',
                },
            });
        });
    });
    describe('debug frames', function () {
        var originalDebugEnabled;
        beforeEach(function () {
            originalDebugEnabled = debugEnabled.isEnabled;
        });
        afterEach(function () {
            Object.defineProperty(debugEnabled, 'isEnabled', {
                get: function () { return originalDebugEnabled; },
            });
        });
        function mockIsDebugEnabled(enabled) {
            Object.defineProperty(debugEnabled, 'isEnabled', {
                get: jest.fn(function () { return enabled; }),
            });
        }
        test('are saved if debug is enabled', function () {
            var _a;
            mockIsDebugEnabled(true);
            var target = {
                siteVariables: { varA: 'tVarA' },
                componentVariables: { Button: { btnVar: 'tBtnVar' } },
                componentStyles: { Button: { root: { style: 'tStyleA' } } },
            };
            var source = {
                siteVariables: { varA: 'sVarA' },
                componentVariables: { Button: function (sv) { return ({ btnVar: sv.varA }); } },
                componentStyles: { Button: { root: function (_a) {
                            var variables = _a.variables;
                            return ({ style: variables.btnVar });
                        } } },
            };
            var merged = styles_1.mergeThemes(target, source);
            expect(merged.siteVariables).toMatchObject({
                _debug: [{ resolved: { varA: 'tVarA' } }, { resolved: { varA: 'sVarA' } }],
            });
            var buttonVariables = merged.componentVariables.Button(merged.siteVariables);
            expect(buttonVariables).toMatchObject({
                _debug: [{ resolved: { btnVar: 'tBtnVar' } }, { resolved: { btnVar: 'sVarA' } }],
            });
            var buttonRootStyles = (_a = merged.componentStyles.Button) === null || _a === void 0 ? void 0 : _a.root({
                variables: buttonVariables,
            });
            expect(buttonRootStyles).toMatchObject({
                _debug: [{ styles: { style: 'tStyleA' } }, { styles: { style: 'sVarA' } }],
            });
        });
        test('are not saved if debug is disabled', function () {
            var _a;
            mockIsDebugEnabled(false);
            var target = {
                siteVariables: { varA: 'tVarA' },
                componentVariables: { Button: { btnVar: 'tBtnVar' } },
                componentStyles: { Button: { root: { style: 'tStyleA' } } },
            };
            var source = {
                siteVariables: { varA: 'sVarA' },
                componentVariables: { Button: function (sv) { return ({ btnVar: sv.varA }); } },
                componentStyles: { Button: { root: function (_a) {
                            var variables = _a.variables;
                            return ({ style: variables.btnVar });
                        } } },
            };
            var merged = styles_1.mergeThemes(target, source);
            expect(merged.siteVariables._debug).toBe(undefined);
            var buttonVariables = merged.componentVariables.Button(merged.siteVariables);
            expect(buttonVariables._debug).toBe(undefined);
            var buttonRootStyles = (_a = merged.componentStyles.Button) === null || _a === void 0 ? void 0 : _a.root({
                variables: buttonVariables,
            });
            expect(buttonRootStyles._debug).toBe(undefined);
        });
        test('contain debugId', function () {
            var _a;
            mockIsDebugEnabled(true);
            var target = styles_1.withDebugId({
                siteVariables: { varA: 'tVarA' },
                componentVariables: { Button: { btnVar: 'tBtnVar' } },
                componentStyles: { Button: { root: { style: 'tStyleA' } } },
            }, 'target');
            var source = styles_1.withDebugId({
                siteVariables: { varA: 'sVarA' },
                componentVariables: { Button: function (sv) { return ({ btnVar: sv.varA }); } },
                componentStyles: { Button: { root: function (_a) {
                            var variables = _a.variables;
                            return ({ style: variables.btnVar });
                        } } },
            }, 'source');
            var merged = styles_1.mergeThemes(target, source);
            expect(merged.siteVariables).toMatchObject({
                _debug: [{ debugId: 'target' }, { debugId: 'source' }],
            });
            var buttonVariables = merged.componentVariables.Button(merged.siteVariables);
            expect(buttonVariables).toMatchObject({
                _debug: [{ debugId: 'target' }, { debugId: 'source' }],
            });
            var buttonRootStyles = (_a = merged.componentStyles.Button) === null || _a === void 0 ? void 0 : _a.root({
                variables: buttonVariables,
            });
            expect(buttonRootStyles).toMatchObject({
                _debug: [{ debugId: 'target' }, { debugId: 'source' }],
            });
        });
    });
    // This test is disabled by default
    // It's purpose is to be executed manually to measure performance of mergeThemes
    // xdescribe('performance', () => {
    //   let originalDebugEnabled
    //
    //   beforeEach(() => {
    //     originalDebugEnabled = debugEnabled.isEnabled
    //   })
    //
    //   afterEach(() => {
    //     Object.defineProperty(debugEnabled, 'isEnabled', {
    //       get: () => originalDebugEnabled,
    //     })
    //   })
    //
    //   function mockIsDebugEnabled(enabled: boolean) {
    //     Object.defineProperty(debugEnabled, 'isEnabled', {
    //       get: jest.fn(() => enabled),
    //     })
    //   }
    //
    //   test('100 themes with debug disabled', () => {
    //     mockIsDebugEnabled(false)
    //
    //     const merged = mergeThemes(..._.times(100, n => themes.teams))
    //     const resolvedStyles = _.mapValues(
    //       merged.componentStyles,
    //       (componentStyle, componentName) => {
    //         const compVariables = _.get(
    //           merged.componentVariables,
    //           componentName,
    //           callable({}),
    //         )(merged.siteVariables)
    //         const styleParam: ComponentStyleFunctionParam = {
    //           displayName: componentName,
    //           props: {},
    //           variables: compVariables,
    //           theme: merged,
    //           rtl: false,
    //           disableAnimations: false,
    //         }
    //         return _.mapValues(componentStyle, (partStyle, partName) => {
    //           if (partName === '_debug') {
    //             // TODO: fix in code, happens only with mergeThemes(singleTheme)
    //             return undefined
    //           }
    //           if (typeof partStyle !== 'function') {
    //             fail(`Part style is not a function??? ${componentName} ${partStyle} ${partName}`)
    //           }
    //           return partStyle(styleParam)
    //         })
    //       },
    //     )
    //     expect(resolvedStyles.Button.root).toMatchObject({})
    //     // console.log(resolvedStyles.Button.root)
    //   })
    // })
});
