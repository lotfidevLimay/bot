import { ComponentSlotStyle, ComponentSlotStylesInput, ComponentSlotStylesPrepared, ComponentVariablesInput, ComponentVariablesPrepared, FontFace, SiteVariablesInput, SiteVariablesPrepared, StaticStyle, ThemeAnimation, ThemeComponentStylesInput, ThemeComponentStylesPrepared, ThemeComponentVariablesInput, ThemeComponentVariablesPrepared, ThemeInput, ThemePrepared } from './types';
export declare const emptyTheme: ThemePrepared;
/**
 * Merges a single component's styles (keyed by component part) with another component's styles.
 */
export declare const mergeComponentStyles__PROD: typeof mergeComponentStyles;
export declare const mergeComponentStyles__DEV: typeof mergeComponentStyles;
export declare const mergeComponentStyles: (stylesA: ComponentSlotStylesInput | null | undefined, stylesB: ComponentSlotStylesInput | null | undefined) => ComponentSlotStylesPrepared;
/**
 * Merges a single component's variables with another component's variables.
 */
export declare const mergeComponentVariables__PROD: (variablesA: ComponentVariablesInput | undefined, variablesB: ComponentVariablesInput | undefined) => ComponentVariablesPrepared;
export declare const mergeComponentVariables__DEV: typeof mergeComponentVariables__PROD;
export declare const mergeComponentVariables: (variablesA: ComponentVariablesInput | undefined, variablesB: ComponentVariablesInput | undefined) => ComponentVariablesPrepared;
/**
 * Site variables can safely be merged at each Provider in the tree.
 * They are flat objects and do not depend on render-time values, such as props.
 */
export declare const mergeSiteVariables__PROD: (siteVariablesA: SiteVariablesInput | undefined, siteVariablesB: SiteVariablesInput | undefined) => SiteVariablesPrepared;
export declare const mergeSiteVariables__DEV: typeof mergeSiteVariables__PROD;
export declare const mergeSiteVariables: (siteVariablesA: SiteVariablesInput | undefined, siteVariablesB: SiteVariablesInput | undefined) => SiteVariablesPrepared;
/**
 * Component variables can be objects, functions, or an array of these.
 * The functions must be called with the final result of siteVariables, otherwise
 *   the component variable objects would have no ability to apply siteVariables.
 * Therefore, componentVariables must be resolved by the component at render time.
 * We instead pass down call stack of component variable functions to be resolved later.
 */
export declare const mergeThemeVariables__PROD: (themeComponentVariablesA: ThemeComponentVariablesInput | undefined, themeComponentVariablesB: ThemeComponentVariablesInput | undefined) => ThemeComponentVariablesPrepared;
export declare const mergeThemeVariables__DEV: typeof mergeThemeVariables__PROD;
export declare const mergeThemeVariables: (themeComponentVariablesA: ThemeComponentVariablesInput | undefined, themeComponentVariablesB: ThemeComponentVariablesInput | undefined) => ThemeComponentVariablesPrepared;
export declare const mergeThemeStyles: (themeComponentStylesA: ThemeComponentStylesInput | undefined, themeComponentStylesB: ThemeComponentStylesInput | undefined) => ThemeComponentStylesPrepared;
export declare const mergeFontFaces: (fontFacesA: FontFace[] | undefined, fontFacesB: FontFace[] | undefined) => FontFace[];
export declare const mergeStaticStyles: (staticStylesA: StaticStyle[] | undefined, staticStylesB: StaticStyle[] | undefined) => StaticStyle[];
export declare const mergeAnimations: (animationsA: {
    [key: string]: ThemeAnimation<{}>;
} | undefined, animationsB: {
    [key: string]: ThemeAnimation<{}>;
} | undefined) => {
    [key: string]: ThemeAnimation<{}>;
};
export declare const mergeStyles: (...sources: ComponentSlotStyle[]) => (...args: any[]) => ComponentSlotStyle<{}, {}>;
export declare const mergeThemes: (themeA: ThemeInput | ThemePrepared | undefined, themeB: ThemeInput | ThemePrepared | undefined) => ThemePrepared;
