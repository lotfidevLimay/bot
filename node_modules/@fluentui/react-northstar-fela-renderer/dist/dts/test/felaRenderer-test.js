"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_northstar_fela_renderer_1 = require("@fluentui/react-northstar-fela-renderer");
var fela_tools_1 = require("fela-tools");
var prettier_1 = require("prettier");
var React = require("react");
var ReactDOM = require("react-dom");
var react_fela_1 = require("react-fela");
var felaRenderer = react_northstar_fela_renderer_1.createFelaRenderer().getOriginalRenderer();
function createSnapshot(component, theme) {
    if (theme === void 0) { theme = {}; }
    var div = document.createElement('div');
    // reset renderer to have a clean setup
    felaRenderer.clear();
    ReactDOM.render(React.createElement(react_fela_1.RendererProvider, { renderer: felaRenderer },
        React.createElement(react_fela_1.ThemeProvider, { theme: theme }, component)), div);
    // jest-react-fela used htmltojsx to format the HTML, but that no longer works with React 17
    // due to importing a removed module. Various alternatives are available, but in this case,
    // all the things to be serialized are simple enough that we can just use innerHTML directly.
    var innerHTML = div.innerHTML;
    ReactDOM.unmountComponentAtNode(div);
    var css = fela_tools_1.renderToString(felaRenderer);
    var formattedCss = prettier_1.format(css, { parser: 'css', useTabs: false, tabWidth: 2 });
    return formattedCss + "\n\n" + innerHTML;
}
describe('felaRenderer', function () {
    test('basic styles are rendered', function () {
        var snapshot = createSnapshot(React.createElement(react_fela_1.FelaComponent, { style: { color: 'red' } }));
        expect(snapshot).toMatchSnapshot();
    });
    test('CSS fallback values are rendered', function () {
        var snapshot = createSnapshot(React.createElement(react_fela_1.FelaComponent, { style: { color: ['red', 'blue'] } }));
        expect(snapshot).toMatchSnapshot();
    });
    test('keyframe colors are rendered', function () {
        var styles = {
            animationName: {
                keyframe: function (_a) {
                    var fromColor = _a.fromColor, toColor = _a.toColor;
                    return ({
                        from: {
                            color: fromColor,
                        },
                        to: {
                            color: toColor,
                        },
                    });
                },
                params: {
                    fromColor: 'red',
                    toColor: 'blue',
                },
            },
            animationDuration: '5s',
        };
        var snapshot = createSnapshot(React.createElement(react_fela_1.FelaComponent, { style: styles }));
        expect(snapshot).toMatchSnapshot();
    });
    test('array returned by keyframe results in CSS fallback values', function () {
        var styles = {
            animationName: {
                keyframe: function (_a) {
                    var steps = _a.steps;
                    var obj = {};
                    steps.forEach(function (step) {
                        obj[step] = { color: ['blue', 'red', 'yellow'] };
                    });
                    return obj;
                },
                params: { steps: ['0%', '100%'] },
            },
        };
        var snapshot = createSnapshot(React.createElement(react_fela_1.FelaComponent, { style: styles }));
        expect(snapshot).toMatchSnapshot();
    });
    test('animations are not applied if animations are disabled', function () {
        var styles = {
            animationName: {
                keyframe: {
                    from: {
                        transform: 'rotate(0deg)',
                    },
                    to: {
                        transform: 'rotate(360deg)',
                    },
                },
            },
        };
        var snapshot = createSnapshot(React.createElement(react_fela_1.FelaComponent, { style: styles, disableAnimations: true }));
        expect(snapshot).toMatchSnapshot();
    });
    test('marginLeft is rendered into marginRight due to RTL', function () {
        var snapshot = createSnapshot(React.createElement(react_fela_1.FelaComponent, { style: { marginLeft: '10px' } }), { rtl: true });
        expect(snapshot).toMatchSnapshot();
    });
    test('marginLeft is rendered into marginLeft due to RTL with `noFlip`', function () {
        var snapshot = createSnapshot(React.createElement(react_fela_1.FelaComponent, { style: { marginLeft: '10px /* @noflip */' } }));
        expect(snapshot).toMatchSnapshot();
    });
    test('styles are expanded to longhand values', function () {
        var snapshot = createSnapshot(React.createElement(react_fela_1.FelaComponent, { style: {
                borderStyle: 'solid',
                // spaces in color value are important
                borderColor: 'rgba(51,204, 51, 1) rgba(51,0,204, 1)',
            } }));
        expect(snapshot).toMatchSnapshot();
    });
    test('prefixes required styles', function () {
        var snapshot = createSnapshot(React.createElement(react_fela_1.FelaComponent, { style: {
                cursor: 'zoom-in',
                display: 'flex',
                filter: 'blur(5px)',
                height: 'min-content',
                position: 'sticky',
                transition: 'width 2s, height 2s, background-color 2s, transform 2s',
                ':hover': {
                    backgroundImage: 'image-set("cat.png" 1x, "cat-2x.png" 2x)',
                    display: 'inline-flex',
                    height: 'fit-content',
                },
            } }));
        expect(snapshot).toMatchSnapshot();
    });
});
