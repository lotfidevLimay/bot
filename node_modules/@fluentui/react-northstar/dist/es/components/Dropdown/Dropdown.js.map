{"version":3,"sources":["components/Dropdown/Dropdown.tsx"],"names":["getElementType","useAutoControlled","useStyles","useUnhandledProps","useFluentContext","useTelemetry","useMergedRefs","handleRef","Ref","customPropTypes","indicatorBehavior","getCode","keyboardKey","React","PropTypes","cx","computeScrollIntoView","Downshift","commonPropTypes","isFromKeyboard","detectIsFromKeyboard","createShorthand","List","DropdownItem","DropdownSelectedItem","DropdownSearchInput","Button","screenReaderContainerStyles","Box","Portal","ALIGNMENTS","POSITIONS","Popper","partitionPopperPropsFromShorthand","AUTOSIZES","CloseIcon","ChevronDownIcon","dropdownClassName","dropdownSlotClassNames","clearIndicator","container","toggleIndicator","item","itemsCount","itemsList","searchInput","selectedItem","selectedItems","triggerButton","a11yStatusCleanupTime","charKeyPressedCleanupTime","normalizeValue","multiple","rawValue","normalizedValue","Array","isArray","slice","getFilteredValues","options","items","itemToString","itemToValue","search","searchQuery","value","filteredItemsByValue","filteredItemStrings","filteredItem","toLowerCase","filteredItems","filter","indexOf","isEmpty","prop","props","Dropdown","forwardRef","ref","context","displayName","telemetry","setStart","setEnd","ariaLabelledby","ariaDescribedby","ariaInvalid","clearable","checkable","checkableIndicator","className","design","disabled","error","fluid","getA11ySelectionMessage","a11ySelectedItemsMessage","getA11yStatusMessage","inline","inverted","highlightFirstItemOnOpen","headerMessage","moveFocusOnTab","noResultsMessage","loading","loadingMessage","placeholder","renderItem","renderSelectedItem","styles","variables","align","flipBoundary","overflowBoundary","position","positionFixed","offset","unstable_disableTether","unstable_pinned","autoSize","list","positioningProps","buttonRef","useRef","inputRef","listRef","selectedItemsRef","containerRef","defaultTriggerButtonId","useMemo","selectedItemsCountNarrationId","ElementType","unhandledProps","handledProps","defaultValue","defaultActiveSelectedIndex","initialValue","undefined","activeSelectedIndex","setActiveSelectedIndex","defaultHighlightedIndex","highlightedIndex","setHighlightedIndex","defaultOpen","open","setOpen","defaultSearchQuery","setSearchQuery","setValue","useState","a11ySelectionStatus","setA11ySelectionStatus","focused","setFocused","setIsFromKeyboard","itemIsFromKeyboard","setItemIsFromKeyboard","startingString","setStartingString","mapPropsToStyles","isEmptyClearIndicator","hasToggleIndicator","hasItemsSelected","length","mapPropsToInlineStyles","rtl","classes","resolvedStyles","popperRef","useLayoutEffect","current","updatePosition","clearA11ySelectionMessage","clearStartingString","handleChange","e","handleOnBlur","target","renderTriggerButton","getToggleButtonProps","content","getSelectedItemAsString","triggerButtonId","triggerButtonProps","onFocus","handleTriggerButtonOrListFocus","onBlur","handleTriggerButtonBlur","onKeyDown","handleTriggerButtonKeyDown","onClick","restTriggerButtonProps","defaultProps","id","overrideProps","predefinedProps","renderSearchInput","accessibilityComboboxProps","getInputProps","selectItemAtIndex","toggleMenu","noPlaceholder","create","handleSearchInputOverrides","renderSelectedItemsCountNarration","narration","renderItemsList","getMenuProps","getItemProps","renderItems","refKey","suppressRefError","innerRef","accessibilityMenuProps","accessibilityInputProps","handleListKeyDown","listElement","tabIndex","listProps","handleListBlur","footerItem","renderItemsListFooter","headerItem","renderItemsListHeader","index","children","selected","active","hasOwnProperty","key","header","handleItemOverrides","render","push","selectedItemsCountNarration","renderSelectedItems","map","isSelectedItemActive","handleSelectedItemOverrides","downshiftStateReducer","state","changes","activeElement","type","stateChangeTypes","blurButton","isOpen","handleInputValueChange","inputValue","stateAndHelpers","itemSelected","setStateAndInvokeHandler","handleStateChange","newState","changeInput","shouldValueChange","shouldMenuClose","keyDownEnter","clickItem","shouldAddHighlightedIndex","isSameItemSelected","newValue","onAdd","setA11ySelectionMessage","defaultView","setTimeout","scrollTop","scrollHeight","tryFocusTriggerButton","keyDownEscape","keyDownArrowDown","keyDownArrowUp","highlightedIndexOnArrowKeyOpen","getHighlightedIndexOnArrowKeyOpen","focus","mouseUp","clickButton","keyDownSpaceButton","itemMouseEnter","unknown","handlers","Boolean","accessibilityItemProps","stopPropagation","nativeEvent","stopImmediatePropagation","onRemove","dropdownSelectedItemProps","handleSelectedItemRemove","handleSelectedItemKeyDown","handleInputBlur","searchInputProps","handleInputKeyDown","Home","End","Tab","handleTabSelection","ArrowLeft","trySetLastSelectedItemAsActive","ArrowRight","Backspace","tryRemoveItemFromValue","Escape","onChange","node","onInputBlur","onInputKeyDown","preventDefault","selectionStart","selectionEnd","removeItemFromValue","handleClear","tryFocusSearchInput","handleContainerClick","accessibilityInputPropsKeyDown","keyCode","keyString","String","fromCharCode","test","setHighlightedIndexOnCharKeyDown","previousKey","nextKey","Delete","relatedTarget","newStartingString","newHighlightedIndex","startsWith","poppedItem","currentElement","pop","handlerNames","event","proposedValue","forEach","handlerName","isArrowUp","isArrowDown","itemsLength","useEffect","cancel","element","root","process","env","NODE_ENV","menu","nodeToScroll","actions","boundary","scrollMode","block","el","top","left","scrollLeft","getRootProps","accessibilityRootPropsRest","showClearIndicator","accessibility","role","propTypes","createCommon","number","bool","shorthandAllowingChildren","string","oneOfType","itemShorthand","collectionShorthand","object","func","onOpenChange","onSearchQueryChange","onActiveSelectedIndexChange","onHighlightedIndexChange","oneOf","arrayOf","Object","keys","isValidElement","Item","SearchInput","SelectedItem"],"mappings":"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","sourcesContent":["import {\n  getElementType,\n  useAutoControlled,\n  useStyles,\n  useUnhandledProps,\n  useFluentContext,\n  useTelemetry,\n  ForwardRefWithAs,\n  useMergedRefs,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior, AccessibilityAttributes, getCode, keyboardKey } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport computeScrollIntoView from 'compute-scroll-into-view';\n\nimport { ShorthandRenderFunction, ShorthandValue, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport Downshift, {\n  DownshiftState,\n  StateChangeOptions,\n  A11yStatusMessageOptions,\n  GetMenuPropsOptions,\n  GetPropsCommonOptions,\n  GetInputPropsOptions,\n  GetToggleButtonPropsOptions,\n  GetItemPropsOptions,\n  ControllerStateAndHelpers,\n} from 'downshift';\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  isFromKeyboard as detectIsFromKeyboard,\n  createShorthand,\n} from '../../utils';\nimport { List, ListProps } from '../List/List';\nimport { DropdownItem, DropdownItemProps } from './DropdownItem';\nimport { DropdownSelectedItem, DropdownSelectedItemProps } from './DropdownSelectedItem';\nimport { DropdownSearchInput, DropdownSearchInputProps } from './DropdownSearchInput';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Portal } from '../Portal/Portal';\nimport {\n  ALIGNMENTS,\n  POSITIONS,\n  Popper,\n  PositioningProps,\n  PopperShorthandProps,\n  partitionPopperPropsFromShorthand,\n  AutoSize,\n  AUTOSIZES,\n} from '../../utils/positioner';\nimport { CloseIcon, ChevronDownIcon } from '@fluentui/react-icons-northstar';\n\nexport interface DownshiftA11yStatusMessageOptions<Item> extends Required<A11yStatusMessageOptions<Item>> {}\n\nexport interface DropdownSlotClassNames {\n  clearIndicator: string;\n  container: string;\n  toggleIndicator: string;\n  item: string;\n  itemsCount: string;\n  itemsList: string;\n  searchInput: string;\n  selectedItem: string;\n  selectedItems: string;\n  triggerButton: string;\n}\n\nexport interface DropdownProps extends UIComponentProps<DropdownProps>, PositioningProps {\n  /** The index of the currently selected item, if the dropdown supports multiple selection. */\n  activeSelectedIndex?: number;\n\n  /** Identifies the element (or elements) that labels the current element. Will be passed to `triggerButton`. */\n  'aria-labelledby'?: AccessibilityAttributes['aria-labelledby'];\n  'aria-describedby'?: AccessibilityAttributes['aria-describedby'];\n\n  /** Indicates the entered value does not conform to the format expected by the application. Will be passed to `triggerButton`. */\n  'aria-invalid'?: AccessibilityAttributes['aria-invalid'];\n\n  /** A dropdown item can show a check indicator if it is selected. */\n  checkable?: boolean;\n\n  /** A slot for a selected indicator in the dropdown list. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown can be clearable to let users remove their selection. */\n  clearable?: boolean;\n\n  /** A slot for the clearing indicator. */\n  clearIndicator?: ShorthandValue<BoxProps>;\n\n  /** The initial value for the index of the currently selected item in a multiple selection. */\n  defaultActiveSelectedIndex?: number;\n\n  /** The initial value for 'open' in uncontrolled mode. */\n  defaultOpen?: boolean;\n\n  /** The initial list item index to highlight. */\n  defaultHighlightedIndex?: number;\n\n  /** The initial value for the search query if the dropdown has `search` enabled. */\n  defaultSearchQuery?: string;\n\n  /** The initial value (or value array if the array has multiple selection). */\n  defaultValue?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** A dropdown can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A dropdown can fill the width of its container. */\n  fluid?: boolean;\n\n  /** Object with callbacks for generating announcements for item selection and removal. */\n  getA11ySelectionMessage?: {\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item added to selection.\n     * @param item - Dropdown added element.\n     */\n    onAdd?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item removed from selection.\n     * @param item - Dropdown removed element.\n     */\n    onRemove?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message about the selected items count a screen reader narrates on input field focus.\n     * @param count - number of items selected.\n     */\n    itemsCount?: (count: number) => string;\n  };\n\n  /** A label for selected items listbox. */\n  a11ySelectedItemsMessage?: string;\n\n  /**\n   * Callback that provides status announcement message with number of items in the list, using Arrow Up/Down keys to navigate through them and, if multiple, using Arrow Left/Right to navigate through selected items.\n   * @param messageGenerationProps - Object with properties to generate message from. See getA11yStatusMessage from Downshift repo.\n   */\n  getA11yStatusMessage?: (options: DownshiftA11yStatusMessageOptions<ShorthandValue<DropdownItemProps>>) => string;\n\n  /** A dropdown can highlight the first option when it opens. */\n  highlightFirstItemOnOpen?: boolean;\n\n  /** The index of the list item to highlight. */\n  highlightedIndex?: number;\n\n  /** A dropdown can be formatted to appear inline next to other elements. */\n  inline?: boolean;\n\n  /** A dropdown can have inverted colors. */\n  inverted?: boolean;\n\n  /** Array of props for generating list options (Dropdown.Item[]) and selected item labels (Dropdown.SelectedItem[]), if it's a multiple selection. */\n  items?: ShorthandCollection<DropdownItemProps>;\n\n  /**\n   * A function that converts an item to string. Used when dropdown has `search` enabled.\n   * By default, it:\n   * - returns the `header` property if it exists on an item\n   * - stringifies the item if it is a primitive type\n   */\n  itemToString?: (item: ShorthandValue<DropdownItemProps>) => string;\n\n  /** Used when comparing two items in multiple selection. Default comparison is by the header prop. */\n  itemToValue?: (item: ShorthandValue<DropdownItemProps>) => any;\n\n  /** A message to be displayed in the list header. */\n  headerMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** A slot for dropdown list. */\n  list?: ShorthandValue<ListProps & { popper?: PopperShorthandProps }>;\n\n  /** A dropdown can show that it is currently loading data. */\n  loading?: boolean;\n\n  /** A message to be displayed in the list when the dropdown is loading. */\n  loadingMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** When selecting an element with Tab, focus stays on the dropdown by default. If true, the focus will jump to next/previous element in DOM. Only available to multiple selection dropdowns. */\n  moveFocusOnTab?: boolean;\n\n  /** A dropdown can allow a user to select multiple items. */\n  multiple?: boolean;\n\n  /** A message to be displayed in the list when the dropdown has no items. */\n  noResultsMessage?: ShorthandValue<DropdownItemProps>;\n\n  /**\n   * Called when the dropdown's selected items index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onActiveSelectedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's highlighted index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onHighlightedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown opens or closes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `open` reflecting the new open state.\n   */\n  onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's search query changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `searchQuery` reflecting its new value.\n   */\n  onSearchQueryChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's selected item(s) change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the focus moves out from dropdown.\n   * @param event - React's original SyntheticEvent.\n   */\n  onBlur?: (event: React.FocusEvent | null) => void;\n\n  /** A dropdown's open state can be controlled. */\n  open?: boolean;\n\n  /** A placeholder message for the input field. */\n  placeholder?: string;\n\n  /**\n   * A render function to customize how items are rendered in the dropdown.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItem?: ShorthandRenderFunction<DropdownItemProps>;\n\n  /**\n   * A custom render function for the selected item. Only applicable with the `multiple` prop.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderSelectedItem?: ShorthandRenderFunction<DropdownSelectedItemProps>;\n\n  /** A dropdown can have a search field instead of trigger button. Can receive a custom search function that will replace the default equivalent. */\n  search?:\n    | boolean\n    | ((items: ShorthandCollection<DropdownItemProps>, searchQuery: string) => ShorthandCollection<DropdownItemProps>);\n\n  /** A search dropdown's input can be customized. */\n  searchInput?: ShorthandValue<DropdownSearchInputProps>;\n\n  /** Sets search query value (controlled mode). */\n  searchQuery?: string;\n\n  /** Controls the appearance of the indicator that shows/hides the list of items. */\n  toggleIndicator?: ShorthandValue<BoxProps>;\n\n  /** Controls the appearance of the trigger button if it's a selection dropdown (not a search). */\n  triggerButton?: ShorthandValue<ButtonProps>;\n\n  /** Sets the dropdown's currently selected value(s) in controlled mode. */\n  value?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** Dropdown can have errors status  */\n  error?: boolean;\n}\n\nexport type DropdownStylesProps = Required<\n  Pick<DropdownProps, 'disabled' | 'error' | 'fluid' | 'inline' | 'inverted' | 'multiple' | 'position' | 'open'>\n> & {\n  focused: boolean;\n  isEmptyClearIndicator: boolean;\n  hasToggleIndicator: boolean;\n  isFromKeyboard: boolean;\n  search: boolean;\n  hasItemsSelected: boolean;\n};\n\ntype DropdownStateForInvoke = {\n  activeSelectedIndex?: number | null;\n  highlightedIndex?: number | null;\n  itemIsFromKeyboard?: boolean;\n  open?: boolean;\n  searchQuery?: string;\n  value?: ShorthandCollection<DropdownItemProps>;\n};\n\nexport const dropdownClassName = 'ui-dropdown';\nexport const dropdownSlotClassNames: DropdownSlotClassNames = {\n  clearIndicator: `${dropdownClassName}__clear-indicator`,\n  container: `${dropdownClassName}__container`,\n  toggleIndicator: `${dropdownClassName}__toggle-indicator`,\n  item: `${dropdownClassName}__item`,\n  itemsCount: `${dropdownClassName}__items-count`,\n  itemsList: `${dropdownClassName}__items-list`,\n  searchInput: `${dropdownClassName}__searchinput`,\n  selectedItem: `${dropdownClassName}__selecteditem`,\n  selectedItems: `${dropdownClassName}__selected-items`,\n  triggerButton: `${dropdownClassName}__trigger-button`,\n};\n\nconst a11yStatusCleanupTime = 500;\nconst charKeyPressedCleanupTime = 500;\n\n/** `normalizedValue` should be normalized always as it can be received from props */\nfunction normalizeValue(multiple: boolean, rawValue: DropdownProps['value']): ShorthandCollection<DropdownItemProps> {\n  const normalizedValue = Array.isArray(rawValue) ? rawValue : [rawValue];\n\n  return multiple ? normalizedValue : normalizedValue.slice(0, 1);\n}\n\n/**\n * Used to compute the filtered items (by value and search query) and, if needed,\n * their string equivalents, in order to be used throughout the component.\n */\nfunction getFilteredValues(\n  options: Required<\n    Pick<DropdownProps, 'multiple' | 'items' | 'itemToValue' | 'itemToString' | 'search' | 'searchQuery'>\n  > & {\n    value: ShorthandCollection<DropdownItemProps>;\n  },\n) {\n  const { items, itemToString, itemToValue, multiple, search, searchQuery, value } = options;\n\n  const filteredItemsByValue = multiple ? _.differenceBy(items, value, itemToValue) : items;\n  const filteredItemStrings = _.map(filteredItemsByValue, filteredItem => itemToString(filteredItem).toLowerCase());\n\n  if (search) {\n    if (_.isFunction(search)) {\n      return {\n        filteredItems: search(filteredItemsByValue, searchQuery),\n        filteredItemStrings,\n      };\n    }\n\n    return {\n      filteredItems: filteredItemsByValue.filter(\n        item => itemToString(item).toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1,\n      ),\n      filteredItemStrings,\n    };\n  }\n\n  return {\n    filteredItems: filteredItemsByValue,\n    filteredItemStrings,\n  };\n}\n\nconst isEmpty = prop => {\n  return typeof prop === 'object' && !prop.props && !_.get(prop, 'children') && !_.get(prop, 'content');\n};\n\n/**\n * A Dropdown allows user to select one or more values from a list of options.\n * Can be created with search and multi-selection capabilities.\n *\n * @accessibility\n * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.\n * @accessibilityIssues\n * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)\n * [JAWS - ESC (ESCAPE) not closing collapsible listbox (dropdown) on first time #528](https://github.com/FreedomScientific/VFO-standards-support/issues/528)\n */\nexport const Dropdown = (React.forwardRef<HTMLDivElement, DropdownProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Dropdown.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-invalid': ariaInvalid,\n    clearable,\n    clearIndicator,\n    checkable,\n    checkableIndicator,\n    className,\n    design,\n    disabled,\n    error,\n    fluid,\n    getA11ySelectionMessage,\n    a11ySelectedItemsMessage,\n    getA11yStatusMessage,\n    inline,\n    inverted,\n    itemToString,\n    itemToValue,\n    items,\n    highlightFirstItemOnOpen,\n    multiple,\n    headerMessage,\n    moveFocusOnTab,\n    noResultsMessage,\n    loading,\n    loadingMessage,\n    placeholder,\n    renderItem,\n    renderSelectedItem,\n    search,\n    searchInput,\n    styles,\n    toggleIndicator,\n    triggerButton,\n    variables,\n  } = props;\n\n  const {\n    align,\n    flipBoundary,\n    overflowBoundary,\n    position,\n    positionFixed,\n    offset,\n    unstable_disableTether,\n    unstable_pinned,\n    autoSize,\n  } = props; // PositioningProps passed directly to Dropdown\n  const [list, positioningProps] = partitionPopperPropsFromShorthand(props.list); // PositioningProps passed to Dropdown `list` prop's `popper` key\n\n  const buttonRef = React.useRef<HTMLElement>();\n  const inputRef = React.useRef<HTMLInputElement | undefined>() as React.MutableRefObject<HTMLInputElement | undefined>;\n  const listRef = React.useRef<HTMLElement>();\n  const selectedItemsRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const defaultTriggerButtonId = React.useMemo(() => _.uniqueId('dropdown-trigger-button-'), []);\n  const selectedItemsCountNarrationId = React.useMemo(() => _.uniqueId('dropdown-selected-items-count-'), []);\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Dropdown.handledProps, props);\n\n  const [activeSelectedIndex, setActiveSelectedIndex] = useAutoControlled<number | null | undefined>({\n    defaultValue: props.defaultActiveSelectedIndex,\n    initialValue: multiple ? null : undefined,\n    value: props.activeSelectedIndex,\n  });\n  const [highlightedIndex, setHighlightedIndex] = useAutoControlled<number | null>({\n    defaultValue: props.defaultHighlightedIndex,\n    initialValue: highlightFirstItemOnOpen ? 0 : null,\n    value: props.highlightedIndex,\n  });\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    initialValue: false,\n    value: props.open,\n  });\n  const [searchQuery, setSearchQuery] = useAutoControlled<string | undefined>({\n    defaultValue: props.defaultSearchQuery,\n    initialValue: search ? '' : undefined,\n    value: props.searchQuery,\n  });\n  const [rawValue, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    initialValue: [],\n    value: props.value,\n  });\n  const value = normalizeValue(multiple, rawValue);\n\n  const [a11ySelectionStatus, setA11ySelectionStatus] = React.useState('');\n  const [focused, setFocused] = React.useState(false);\n  const [isFromKeyboard, setIsFromKeyboard] = React.useState(false);\n  const [itemIsFromKeyboard, setItemIsFromKeyboard] = React.useState(false);\n  const [startingString, setStartingString] = React.useState<string | undefined>(search ? undefined : '');\n\n  const { filteredItems, filteredItemStrings } = getFilteredValues({\n    itemToString,\n    itemToValue,\n    items,\n    multiple,\n    search,\n    searchQuery,\n    value,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<DropdownStylesProps>(Dropdown.displayName, {\n    className: dropdownClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      error,\n      fluid,\n      focused,\n      isEmptyClearIndicator: isEmpty(clearIndicator),\n      hasToggleIndicator: !!toggleIndicator,\n      inline,\n      inverted,\n      isFromKeyboard,\n      multiple,\n      open,\n      position: positioningProps?.position ?? position,\n      search: !!search,\n      hasItemsSelected: value.length > 0,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const popperRef = useMergedRefs(props.popperRef);\n\n  React.useLayoutEffect(() => {\n    popperRef.current?.updatePosition();\n  }, [filteredItems?.length, popperRef]);\n\n  const clearA11ySelectionMessage = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setA11ySelectionStatus('');\n      }, a11yStatusCleanupTime),\n    [],\n  );\n  const clearStartingString = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setStartingString('');\n      }, charKeyPressedCleanupTime),\n    [],\n  );\n\n  const handleChange = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(props, 'onChange', e, { ...props, value });\n  };\n\n  const handleOnBlur = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    if (e.target !== buttonRef.current) {\n      _.invoke(props, 'onBlur', e, props);\n    }\n  };\n\n  const renderTriggerButton = (getToggleButtonProps: (options?: GetToggleButtonPropsOptions) => any): JSX.Element => {\n    const content = getSelectedItemAsString(value[0]);\n    const triggerButtonId = triggerButton['id'] || defaultTriggerButtonId;\n\n    const triggerButtonProps = getToggleButtonProps({\n      disabled,\n      onFocus: handleTriggerButtonOrListFocus,\n      onBlur: handleTriggerButtonBlur,\n      onKeyDown: e => {\n        handleTriggerButtonKeyDown(e);\n      },\n      'aria-invalid': ariaInvalid,\n      'aria-label': undefined,\n      ...(ariaLabelledby && { 'aria-labelledby': ariaLabelledby }),\n      ...(open && { 'aria-expanded': true }),\n    });\n\n    const { onClick, onFocus, onBlur, onKeyDown, ...restTriggerButtonProps } = triggerButtonProps;\n\n    return (\n      <Ref innerRef={buttonRef}>\n        {createShorthand(Button, triggerButton, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.triggerButton,\n            content,\n            disabled,\n            id: triggerButtonId,\n            fluid: true,\n            styles: resolvedStyles.triggerButton,\n            ...restTriggerButtonProps,\n          }),\n          overrideProps: (predefinedProps: ButtonProps) => ({\n            onClick: e => {\n              onClick(e);\n              _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n            },\n            onFocus: e => {\n              onFocus(e);\n              _.invoke(predefinedProps, 'onFocus', e, predefinedProps);\n            },\n            onBlur: e => {\n              if (!disabled) {\n                onBlur(e);\n              }\n\n              _.invoke(predefinedProps, 'onBlur', e, predefinedProps);\n            },\n            onKeyDown: e => {\n              if (!disabled) {\n                onKeyDown(e);\n              }\n\n              _.invoke(predefinedProps, 'onKeyDown', e, predefinedProps);\n            },\n          }),\n        })}\n      </Ref>\n    );\n  };\n\n  const renderSearchInput = (\n    accessibilityComboboxProps: Object,\n    highlightedIndex: number,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    variables,\n  ): JSX.Element => {\n    const noPlaceholder = searchQuery.length > 0 || (multiple && value.length > 0);\n\n    return DropdownSearchInput.create(searchInput || {}, {\n      defaultProps: () => ({\n        className: dropdownSlotClassNames.searchInput,\n        placeholder: noPlaceholder ? '' : placeholder,\n        inline,\n        variables,\n        disabled,\n      }),\n      overrideProps: handleSearchInputOverrides(\n        highlightedIndex,\n        selectItemAtIndex,\n        toggleMenu,\n        accessibilityComboboxProps,\n        getInputProps,\n      ),\n    });\n  };\n\n  const renderSelectedItemsCountNarration = id => {\n    // Get narration only if callback is provided, at least one item is selected and only in multiple case\n    if (!getA11ySelectionMessage || !getA11ySelectionMessage.itemsCount || value.length === 0 || !multiple) {\n      return null;\n    }\n    const narration = getA11ySelectionMessage.itemsCount(value.length);\n    return (\n      <span id={id} className={dropdownSlotClassNames.itemsCount} style={screenReaderContainerStyles}>\n        {narration}\n      </span>\n    );\n  };\n  const renderItemsList = (\n    highlightedIndex: number,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n    getMenuProps: (options?: GetMenuPropsOptions, otherOptions?: GetPropsCommonOptions) => any,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => {\n    const items = open ? renderItems(getItemProps) : [];\n    const { innerRef, ...accessibilityMenuProps } = getMenuProps({ refKey: 'innerRef' }, { suppressRefError: true });\n\n    // If it's just a selection, some attributes and listeners from Downshift input need to go on the menu list.\n    if (!search) {\n      const accessibilityInputProps = getInputProps();\n\n      accessibilityMenuProps['aria-activedescendant'] = accessibilityInputProps['aria-activedescendant'];\n      accessibilityMenuProps['onKeyDown'] = e => {\n        handleListKeyDown(e, highlightedIndex, accessibilityInputProps['onKeyDown'], toggleMenu, selectItemAtIndex);\n      };\n    }\n\n    return (\n      <Ref\n        innerRef={(listElement: HTMLElement) => {\n          handleRef(listRef, listElement);\n          handleRef(innerRef, listElement);\n        }}\n      >\n        <Popper\n          rtl={context.rtl}\n          enabled={open}\n          targetRef={containerRef}\n          positioningDependencies={[items.length]}\n          // positioning props:\n          align={align}\n          flipBoundary={flipBoundary}\n          overflowBoundary={overflowBoundary}\n          popperRef={popperRef}\n          position={position}\n          positionFixed={positionFixed}\n          offset={offset}\n          unstable_disableTether={unstable_disableTether}\n          unstable_pinned={unstable_pinned}\n          autoSize={autoSize}\n          {...positioningProps}\n        >\n          {List.create(list, {\n            defaultProps: () => ({\n              className: dropdownSlotClassNames.itemsList,\n              ...accessibilityMenuProps,\n              styles: resolvedStyles.list,\n              items,\n              tabIndex: search ? undefined : -1, // needs to be focused when trigger button is activated.\n              'aria-hidden': !open,\n            }),\n\n            overrideProps: (predefinedProps: ListProps) => ({\n              onFocus: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleTriggerButtonOrListFocus();\n                _.invoke(predefinedProps, 'onClick', e, listProps);\n              },\n              onBlur: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleListBlur(e);\n                _.invoke(predefinedProps, 'onBlur', e, listProps);\n              },\n            }),\n          })}\n        </Popper>\n      </Ref>\n    );\n  };\n\n  const renderItems = (getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any) => {\n    const footerItem = renderItemsListFooter();\n    const headerItem = renderItemsListHeader();\n\n    const items = _.map(filteredItems, (item, index) => ({\n      children: () => {\n        const selected = value.indexOf(item) !== -1;\n\n        return DropdownItem.create(item, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.item,\n            active: highlightedIndex === index,\n            selected,\n            checkable,\n            checkableIndicator,\n            isFromKeyboard: itemIsFromKeyboard,\n            variables,\n            ...(typeof item === 'object' &&\n              !item.hasOwnProperty('key') && {\n                key: (item as any).header,\n              }),\n          }),\n          overrideProps: handleItemOverrides(item, index, getItemProps, selected),\n          render: renderItem,\n        });\n      },\n    }));\n\n    if (footerItem) {\n      items.push(footerItem);\n    }\n\n    return headerItem ? [headerItem, ...items] : items;\n  };\n\n  const renderItemsListHeader = () => {\n    if (headerMessage) {\n      return {\n        children: () =>\n          DropdownItem.create(headerMessage, {\n            defaultProps: () => ({\n              key: 'items-list-footer-message',\n              styles: resolvedStyles.headerMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const renderItemsListFooter = () => {\n    if (loading) {\n      return {\n        children: () =>\n          DropdownItem.create(loadingMessage, {\n            defaultProps: () => ({\n              key: 'loading-message',\n              styles: resolvedStyles.loadingMessage,\n            }),\n          }),\n      };\n    }\n\n    if (filteredItems && filteredItems.length === 0) {\n      return {\n        children: () =>\n          DropdownItem.create(noResultsMessage, {\n            defaultProps: () => ({\n              key: 'no-results-message',\n              styles: resolvedStyles.noResultsMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const selectedItemsCountNarration = renderSelectedItemsCountNarration(selectedItemsCountNarrationId);\n  const renderSelectedItems = () => {\n    if (value.length === 0) {\n      return null;\n    }\n\n    const selectedItems = value.map((item: DropdownItemProps, index) =>\n      // (!) an item matches DropdownItemProps\n      DropdownSelectedItem.create(item, {\n        defaultProps: () => ({\n          className: dropdownSlotClassNames.selectedItem,\n          active: isSelectedItemActive(index),\n          variables,\n          ...(typeof item === 'object' &&\n            !item.hasOwnProperty('key') && {\n              key: (item as any).header,\n            }),\n        }),\n        overrideProps: handleSelectedItemOverrides(item),\n        render: renderSelectedItem,\n      }),\n    );\n    return (\n      <>\n        <div role=\"listbox\" tabIndex={-1} aria-label={a11ySelectedItemsMessage}>\n          {selectedItems}\n        </div>\n        {selectedItemsCountNarration}\n      </>\n    );\n  };\n\n  const downshiftStateReducer = (\n    state: DownshiftState<ShorthandValue<DropdownItemProps>>,\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const activeElement: Element = context.target.activeElement;\n\n    switch (changes.type) {\n      case Downshift.stateChangeTypes.blurButton:\n        // Downshift closes the list by default on trigger blur. It does not support the case when dropdown is\n        // single selection and focuses list on trigger click/up/down/space/enter. Treating that here.\n        if (state.isOpen && activeElement === listRef.current) {\n          return {}; // won't change state in this case.\n        }\n        _.invoke(props, 'onBlur', null);\n      default:\n        return changes;\n    }\n  };\n\n  const handleInputValueChange = (\n    inputValue: string,\n    stateAndHelpers: ControllerStateAndHelpers<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const itemSelected = stateAndHelpers.selectedItem && inputValue === itemToString(stateAndHelpers.selectedItem);\n    if (\n      inputValue !== searchQuery &&\n      !itemSelected // when item is selected, `handleStateChange` will update searchQuery.\n    ) {\n      setStateAndInvokeHandler(['onSearchQueryChange'], null, {\n        searchQuery: inputValue,\n      });\n    }\n  };\n\n  const handleStateChange = (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => {\n    const { type } = changes;\n    const newState = {} as DropdownStateForInvoke;\n\n    switch (type) {\n      case Downshift.stateChangeTypes.changeInput: {\n        const shouldValueChange = changes.inputValue === '' && !multiple && value.length > 0;\n\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n\n        if (shouldValueChange) {\n          newState.value = [];\n        }\n\n        if (open) {\n          // we clear value when in single selection user cleared the query.\n          const shouldMenuClose = changes.inputValue === '' || changes.selectedItem !== undefined;\n\n          if (shouldMenuClose) {\n            newState.open = false;\n          }\n        } else {\n          newState.open = true;\n        }\n\n        break;\n      }\n      case Downshift.stateChangeTypes.keyDownEnter:\n      case Downshift.stateChangeTypes.clickItem:\n        const shouldAddHighlightedIndex = !multiple && items && items.length > 0;\n        const isSameItemSelected = changes.selectedItem === undefined;\n        const newValue = isSameItemSelected ? value[0] : changes.selectedItem;\n\n        newState.searchQuery = getSelectedItemAsString(newValue);\n        newState.open = false;\n        newState.highlightedIndex = shouldAddHighlightedIndex ? items.indexOf(newValue) : null;\n\n        if (!isSameItemSelected) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n\n          if (getA11ySelectionMessage && getA11ySelectionMessage.onAdd) {\n            setA11ySelectionMessage(getA11ySelectionMessage.onAdd(newValue));\n          }\n        }\n\n        if (multiple) {\n          context.target?.defaultView.setTimeout(\n            () => (selectedItemsRef.current.scrollTop = selectedItemsRef.current.scrollHeight),\n            0,\n          );\n        }\n\n        // timeout because of NVDA, otherwise it narrates old button value/state\n        context.target?.defaultView.setTimeout(() => tryFocusTriggerButton(), 100);\n\n        break;\n      case Downshift.stateChangeTypes.keyDownEscape:\n        if (search && !multiple) {\n          newState.value = [];\n        }\n        newState.open = false;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n        break;\n      case Downshift.stateChangeTypes.keyDownArrowDown:\n      case Downshift.stateChangeTypes.keyDownArrowUp:\n        if (changes.isOpen !== undefined) {\n          newState.open = changes.isOpen;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          if (changes.isOpen) {\n            const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n            if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n              newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n            }\n\n            if (!search) {\n              listRef.current.focus();\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n        }\n      case Downshift.stateChangeTypes['keyDownHome']:\n      case Downshift.stateChangeTypes['keyDownEnd']:\n        if (open && _.isNumber(changes.highlightedIndex)) {\n          newState.highlightedIndex = changes.highlightedIndex;\n          newState.itemIsFromKeyboard = true;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.mouseUp:\n        if (open) {\n          newState.open = false;\n          newState.highlightedIndex = null;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.clickButton:\n      case Downshift.stateChangeTypes.keyDownSpaceButton:\n        newState.open = changes.isOpen;\n        newState.itemIsFromKeyboard = isFromKeyboard;\n\n        if (changes.isOpen) {\n          const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n          if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n            newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n          }\n\n          if (!search) {\n            listRef.current.focus();\n          }\n        } else {\n          newState.highlightedIndex = null;\n        }\n        break;\n      case Downshift.stateChangeTypes.itemMouseEnter:\n        newState.highlightedIndex = changes.highlightedIndex;\n        newState.itemIsFromKeyboard = false;\n        break;\n      case Downshift.stateChangeTypes.unknown:\n        if (changes.selectedItem) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n          newState.searchQuery = multiple ? '' : changes.inputValue;\n          newState.open = false;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          tryFocusTriggerButton();\n        } else {\n          newState.open = changes.isOpen;\n        }\n      default:\n        break;\n    }\n\n    if (_.isEmpty(newState)) {\n      return;\n    }\n\n    const handlers: (keyof DropdownProps)[] = [\n      newState.highlightedIndex !== undefined && 'onHighlightedIndexChange',\n      newState.open !== undefined && 'onOpenChange',\n      newState.searchQuery !== undefined && 'onSearchQueryChange',\n      newState.value !== undefined && 'onChange',\n    ].filter(Boolean) as (keyof DropdownProps)[];\n\n    setStateAndInvokeHandler(handlers, null, newState);\n  };\n\n  const isSelectedItemActive = (index: number): boolean => {\n    return index === activeSelectedIndex;\n  };\n\n  const handleItemOverrides = (\n    item: ShorthandValue<DropdownItemProps>,\n    index: number,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    selected: boolean,\n  ) => (predefinedProps: DropdownItemProps) => ({\n    accessibilityItemProps: {\n      ...getItemProps({\n        item,\n        index,\n        disabled: item['disabled'],\n        onClick: e => {\n          e.stopPropagation();\n          e.nativeEvent.stopImmediatePropagation();\n          _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n        },\n      }),\n      // for single selection the selected item should have aria-selected, instead of the highlighted\n      ...(!multiple && {\n        'aria-selected': selected,\n      }),\n    },\n  });\n\n  const handleSelectedItemOverrides = (item: ShorthandValue<DropdownItemProps>) => (\n    predefinedProps: DropdownSelectedItemProps,\n  ) => ({\n    onRemove: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n    onClick: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n        activeSelectedIndex: value.indexOf(item),\n      });\n      e.stopPropagation();\n      _.invoke(predefinedProps, 'onClick', e, dropdownSelectedItemProps);\n    },\n    onKeyDown: (e: React.KeyboardEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n  });\n\n  const handleSearchInputOverrides = (\n    highlightedIndex: number,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    accessibilityComboboxProps: Object,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => (predefinedProps: DropdownSearchInputProps) => {\n    const handleInputBlur = (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n      if (!disabled) {\n        setFocused(false);\n        setIsFromKeyboard(detectIsFromKeyboard());\n\n        e.nativeEvent['preventDownshiftDefault'] = true;\n      }\n\n      _.invoke(predefinedProps, 'onInputBlur', e, searchInputProps);\n    };\n\n    const handleInputKeyDown = (\n      e: React.KeyboardEvent<HTMLInputElement>,\n      searchInputProps: DropdownSearchInputProps,\n    ) => {\n      if (!disabled) {\n        switch (getCode(e)) {\n          // https://github.com/downshift-js/downshift/issues/1097\n          // Downshift skips Home/End if Deopdown is opened\n          case keyboardKey.Home:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.End:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.Tab:\n            e.stopPropagation();\n            handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n            break;\n          case keyboardKey.ArrowLeft:\n            e.stopPropagation();\n            if (!context.rtl) {\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.ArrowRight:\n            e.stopPropagation();\n            if (context.rtl) {\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.Backspace:\n            e.stopPropagation();\n            tryRemoveItemFromValue();\n            break;\n          case keyboardKey.Escape:\n            // If dropdown list is open ESC should close it and not propagate to the parent\n            // otherwise event should propagate\n            if (open) {\n              e.stopPropagation();\n            }\n          default:\n            break;\n        }\n      }\n\n      _.invoke(predefinedProps, 'onInputKeyDown', e, {\n        ...searchInputProps,\n        highlightedIndex,\n        selectItemAtIndex,\n      });\n    };\n\n    return {\n      // getInputProps adds Downshift handlers. We also add our own by passing them as params to that function.\n      // user handlers were also added to our handlers previously, at the beginning of this function.\n      accessibilityInputProps: {\n        ...getInputProps({\n          disabled,\n          onBlur: e => {\n            handleInputBlur(e, predefinedProps);\n          },\n          onKeyDown: e => {\n            handleInputKeyDown(e, predefinedProps);\n          },\n          onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n            // we prevent the onChange input event to bubble up to our Dropdown handler,\n            // since in Dropdown it gets handled as onSearchQueryChange.\n            e.stopPropagation();\n\n            // A state modification should be triggered there otherwise it will go to an another frame and will break\n            // cursor position:\n            // https://github.com/facebook/react/issues/955#issuecomment-469352730\n            setSearchQuery(e.target.value);\n          },\n          'aria-labelledby': ariaLabelledby,\n          'aria-describedby': ariaDescribedby || selectedItemsCountNarrationId,\n        }),\n      },\n      // same story as above for getRootProps.\n      accessibilityComboboxProps,\n\n      inputRef: (node: HTMLInputElement) => {\n        handleRef(predefinedProps.inputRef, node);\n        inputRef.current = node;\n      },\n      onFocus: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        if (!disabled) {\n          setFocused(true);\n          setIsFromKeyboard(detectIsFromKeyboard());\n        }\n\n        _.invoke(predefinedProps, 'onFocus', e, searchInputProps);\n      },\n      onInputBlur: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        handleInputBlur(e, searchInputProps);\n      },\n      onInputKeyDown: (e: React.KeyboardEvent<HTMLInputElement>, searchInputProps: DropdownSearchInputProps) => {\n        handleInputKeyDown(e, searchInputProps);\n      },\n    };\n  };\n\n  /**\n   * Custom Tab selection logic, at least until Downshift will implement selection on blur.\n   * Also keeps focus on multiple selection dropdown when selecting by Tab.\n   */\n  const handleTabSelection = (\n    e: React.SyntheticEvent,\n    highlightedIndex: number,\n    selectItemAtIndex: (highlightedIndex: number) => void,\n    toggleMenu: () => void,\n  ): void => {\n    if (open) {\n      if (!_.isNil(highlightedIndex) && filteredItems.length && !items[highlightedIndex]['disabled']) {\n        selectItemAtIndex(highlightedIndex);\n\n        if (multiple && !moveFocusOnTab) {\n          e.preventDefault();\n        }\n      } else {\n        toggleMenu();\n      }\n    }\n  };\n\n  const trySetLastSelectedItemAsActive = () => {\n    if (!multiple || (inputRef.current && inputRef.current.selectionStart !== 0)) {\n      return;\n    }\n\n    if (value.length > 0) {\n      // If last element was already active, perform a 'reset' of activeSelectedIndex.\n      if (activeSelectedIndex === value.length - 1) {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      } else {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      }\n    }\n  };\n\n  const tryRemoveItemFromValue = () => {\n    if (\n      multiple &&\n      (searchQuery === '' || (inputRef.current.selectionStart === 0 && inputRef.current.selectionEnd === 0)) &&\n      value.length > 0\n    ) {\n      removeItemFromValue();\n    }\n  };\n\n  const handleClear = (e: React.SyntheticEvent<HTMLElement>) => {\n    setStateAndInvokeHandler(['onChange', 'onActiveSelectedIndexChange', 'onHighlightedIndexChange'], e, {\n      activeSelectedIndex: multiple ? null : undefined,\n      highlightedIndex: highlightFirstItemOnOpen ? 0 : null,\n      open: false,\n      searchQuery: search ? '' : undefined,\n      value: [],\n    });\n\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n  };\n\n  const handleContainerClick = () => {\n    tryFocusSearchInput();\n  };\n\n  const handleTriggerButtonKeyDown = (e: React.KeyboardEvent) => {\n    switch (getCode(e)) {\n      case keyboardKey.ArrowLeft:\n        if (!context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      case keyboardKey.ArrowRight:\n        if (context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  const handleListKeyDown = (\n    e: React.KeyboardEvent,\n    highlightedIndex: number,\n    accessibilityInputPropsKeyDown: (e) => any,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n  ) => {\n    const keyCode = getCode(e);\n    switch (keyCode) {\n      case keyboardKey.Tab:\n        handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n        return;\n      case keyboardKey.Escape:\n        accessibilityInputPropsKeyDown(e);\n        tryFocusTriggerButton();\n        e.stopPropagation();\n        return;\n      default:\n        const keyString = String.fromCharCode(keyCode);\n        if (/[a-zA-Z0-9]/.test(keyString)) {\n          setHighlightedIndexOnCharKeyDown(keyString);\n        }\n        accessibilityInputPropsKeyDown(e);\n        return;\n    }\n  };\n\n  const handleSelectedItemKeyDown = (\n    e: React.KeyboardEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    const previousKey = context.rtl ? keyboardKey.ArrowRight : keyboardKey.ArrowLeft;\n    const nextKey = context.rtl ? keyboardKey.ArrowLeft : keyboardKey.ArrowRight;\n\n    switch (getCode(e)) {\n      case keyboardKey.Delete:\n      case keyboardKey.Backspace:\n        handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n        break;\n      case previousKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex) && activeSelectedIndex > 0) {\n          setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: activeSelectedIndex - 1,\n          });\n        }\n        break;\n      case nextKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex)) {\n          if (activeSelectedIndex < value.length - 1) {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: activeSelectedIndex + 1,\n            });\n          } else {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: null,\n            });\n\n            if (search) {\n              e.preventDefault(); // prevents caret to forward one position in input.\n              inputRef.current.focus();\n            } else {\n              buttonRef.current.focus();\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n    _.invoke(predefinedProps, 'onKeyDown', e, dropdownSelectedItemProps);\n  };\n\n  const handleTriggerButtonOrListFocus = () => {\n    setFocused(true);\n    setIsFromKeyboard(detectIsFromKeyboard());\n  };\n\n  const handleTriggerButtonBlur = e => {\n    if (listRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  const handleListBlur = e => {\n    if (buttonRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  /**\n   * Sets highlightedIndex to be the item that starts with the character keys the\n   * user has typed. Only used in non-search dropdowns.\n   *\n   * @param keystring - The string the item needs to start with. It is composed by typing keys in fast succession.\n   */\n  const setHighlightedIndexOnCharKeyDown = (keyString: string): void => {\n    const newStartingString = `${startingString}${keyString.toLowerCase()}`;\n    let newHighlightedIndex = -1;\n\n    setStartingString(newStartingString);\n    clearStartingString();\n\n    if (_.isNumber(highlightedIndex)) {\n      newHighlightedIndex = _.findIndex(\n        filteredItemStrings,\n        item => item.startsWith(newStartingString),\n        highlightedIndex + (startingString.length > 0 ? 0 : 1),\n      );\n    }\n\n    if (newHighlightedIndex < 0) {\n      newHighlightedIndex = _.findIndex(filteredItemStrings, item => item.startsWith(newStartingString));\n    }\n\n    if (newHighlightedIndex >= 0) {\n      setStateAndInvokeHandler(['onHighlightedIndexChange'], null, {\n        highlightedIndex: newHighlightedIndex,\n      });\n    }\n  };\n\n  const handleSelectedItemRemove = (\n    e: React.SyntheticEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n      activeSelectedIndex: null,\n    });\n    removeItemFromValue(item);\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n    _.invoke(predefinedProps, 'onRemove', e, dropdownSelectedItemProps);\n  };\n\n  const removeItemFromValue = (item?: ShorthandValue<DropdownItemProps>) => {\n    let poppedItem = item;\n    let newValue = [...value];\n\n    if (poppedItem) {\n      newValue = newValue.filter(currentElement => currentElement !== item);\n    } else {\n      poppedItem = newValue.pop();\n    }\n\n    if (getA11ySelectionMessage && getA11ySelectionMessage.onRemove) {\n      setA11ySelectionMessage(getA11ySelectionMessage.onRemove(poppedItem));\n    }\n\n    setStateAndInvokeHandler(['onChange'], null, { value: newValue });\n  };\n\n  /**\n   * Calls setState and invokes event handler exposed to user.\n   * We don't have the event object for most events coming from Downshift se we send an empty event\n   * because we want to keep the event handling interface\n   */\n  const setStateAndInvokeHandler = (\n    handlerNames: (keyof DropdownProps)[],\n    event: React.SyntheticEvent<HTMLElement>,\n    newState: DropdownStateForInvoke,\n  ) => {\n    const proposedValue = _.isNil(newState.value) ? value : newState.value;\n    // `proposedValue` should be normalized for single/multiple variations, `null` condition is\n    // required as first item can be undefined\n    const newValue = multiple ? proposedValue : proposedValue[0] || null;\n\n    if (newState.hasOwnProperty('activeSelectedIndex')) {\n      setActiveSelectedIndex(newState.activeSelectedIndex);\n    }\n    if (newState.hasOwnProperty('highlightedIndex')) {\n      setHighlightedIndex(newState.highlightedIndex);\n    }\n    if (newState.hasOwnProperty('itemIsFromKeyboard')) {\n      setItemIsFromKeyboard(newState.itemIsFromKeyboard);\n    }\n    if (newState.hasOwnProperty('open')) {\n      setOpen(newState.open);\n    }\n    if (newState.hasOwnProperty('searchQuery')) {\n      setSearchQuery(newState.searchQuery);\n    }\n    if (newState.hasOwnProperty('value')) {\n      setValue(newState.value);\n    }\n\n    handlerNames.forEach(handlerName => {\n      _.invoke(props, handlerName, event, { ...props, ...newState, value: newValue });\n    });\n  };\n\n  const tryFocusTriggerButton = () => {\n    if (!search && buttonRef.current) {\n      buttonRef.current.focus();\n    }\n  };\n\n  const tryFocusSearchInput = () => {\n    if (search && inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  /**\n   * If there is no value we use the placeholder value\n   * otherwise, for single selection we convert the value with itemToString\n   * and for multiple selection we return empty string, the values are rendered by renderSelectedItems\n   */\n  const getSelectedItemAsString = (value: ShorthandValue<DropdownItemProps>): string => {\n    if (!value) {\n      return search ? '' : placeholder;\n    }\n\n    if (multiple) {\n      return '';\n    }\n\n    return itemToString(value);\n  };\n\n  const getHighlightedIndexOnArrowKeyOpen = (\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ): number => {\n    const isArrowUp = changes.type === Downshift.stateChangeTypes.keyDownArrowUp;\n    const isArrowDown = changes.type === Downshift.stateChangeTypes.keyDownArrowDown;\n    const itemsLength = filteredItems.length;\n\n    if (highlightedIndex) {\n      return highlightedIndex;\n    }\n\n    if (highlightFirstItemOnOpen) {\n      // otherwise, if highlightFirstItemOnOpen prop is provied, highlight first item.\n      return 0;\n    }\n\n    if (!multiple && !search && value.length > 0) {\n      // in single selection, if there is a selected item, highlight it.\n      const offset = isArrowUp ? -1 : isArrowDown ? 1 : 0;\n      const newHighlightedIndex = items.indexOf(value[0]) + offset;\n      if (newHighlightedIndex >= itemsLength) {\n        return 0;\n      }\n      if (newHighlightedIndex < 0) {\n        return itemsLength - 1;\n      }\n      return newHighlightedIndex;\n    }\n\n    if (isArrowDown) {\n      return 0;\n    }\n    if (isArrowUp) {\n      return itemsLength - 1;\n    }\n\n    return null;\n  };\n\n  /**\n   * Function that sets and cleans the selection message after it has been set,\n   * so it is not read anymore via virtual cursor.\n   */\n  const setA11ySelectionMessage = (a11ySelectionStatus: string): void => {\n    setA11ySelectionStatus(a11ySelectionStatus);\n    clearA11ySelectionMessage();\n  };\n\n  React.useEffect(() => {\n    return () => {\n      clearStartingString.cancel();\n      clearA11ySelectionMessage.cancel();\n    };\n  }, [clearA11ySelectionMessage, clearStartingString]);\n\n  const element = (\n    <ElementType\n      className={classes.root}\n      onBlur={handleOnBlur}\n      onChange={handleChange}\n      ref={ref}\n      {...unhandledProps}\n      {...(process.env.NODE_ENV === 'test' && { 'data-test-focused': focused })}\n    >\n      <Downshift\n        isOpen={open}\n        inputValue={search ? searchQuery : null}\n        stateReducer={downshiftStateReducer}\n        itemToString={itemToString}\n        // downshift does not work with arrays as selectedItem.\n        selectedItem={multiple || !value.length ? null : value[0]}\n        scrollIntoView={(node: HTMLElement, menu: HTMLElement) => {\n          if (node) {\n            const { children } = menu;\n            let nodeToScroll = node;\n            /**\n             * If it's loading downshift doesn't take the last node with loadingMessage\n             * in consideration to scrolld so we need to check if the current is the\n             * antepenultimate and is so scroll the loading into view, same for headerMessage\n             */\n            if (loading && children[children.length - 2] === node) {\n              nodeToScroll = children[children.length - 1] as HTMLElement;\n            } else if (headerMessage && children[1] === node) {\n              nodeToScroll = children[0] as HTMLElement;\n            }\n\n            // Replicating same config that Downshift uses\n            const actions = computeScrollIntoView(nodeToScroll, {\n              boundary: menu, // Explicitly set boundary to avoid unnecessary scrolling by checking all parent elements\n              scrollMode: 'if-needed',\n              block: 'nearest',\n              inline: 'nearest',\n            });\n            actions.forEach(({ el, top, left }) => {\n              el.scrollTop = top;\n              el.scrollLeft = left;\n            });\n          }\n        }}\n        getA11yStatusMessage={getA11yStatusMessage}\n        highlightedIndex={highlightedIndex}\n        onStateChange={handleStateChange}\n        onInputValueChange={handleInputValueChange}\n        labelId={ariaLabelledby}\n        environment={context.target?.defaultView}\n        inputId={searchInput && searchInput['id'] ? searchInput['id'] : undefined}\n      >\n        {({\n          getInputProps,\n          getItemProps,\n          getMenuProps,\n          getRootProps,\n          getToggleButtonProps,\n          toggleMenu,\n          highlightedIndex,\n          selectItemAtIndex,\n        }) => {\n          const { innerRef, ...accessibilityRootPropsRest } = getRootProps(\n            { refKey: 'innerRef' },\n            { suppressRefError: true },\n          );\n          const showClearIndicator = clearable && value.length > 0;\n\n          return (\n            <Ref innerRef={innerRef}>\n              <div\n                ref={containerRef}\n                className={cx(dropdownSlotClassNames.container, classes.container)}\n                onClick={search && !open ? handleContainerClick : undefined}\n              >\n                <div ref={selectedItemsRef} className={cx(dropdownSlotClassNames.selectedItems, classes.selectedItems)}>\n                  {/* We previously were rendering the trigger button after selected items list,\n                    after listbox wrapper was introduced we moved it to before and\n                     set as absolute to avoid visual regressions   */}\n                  {!search && renderTriggerButton(getToggleButtonProps)}\n                  {multiple && renderSelectedItems()}\n                  {search &&\n                    renderSearchInput(\n                      accessibilityRootPropsRest,\n                      highlightedIndex,\n                      getInputProps,\n                      selectItemAtIndex,\n                      toggleMenu,\n                      variables,\n                    )}\n                </div>\n                {showClearIndicator\n                  ? Box.create(clearIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.clearIndicator,\n                        styles: resolvedStyles.clearIndicator,\n                        accessibility: indicatorBehavior,\n                        ...(!search && { tabIndex: 0, role: 'button' }),\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: (e: React.SyntheticEvent<HTMLElement>) => {\n                          _.invoke(predefinedProps, 'onClick', e);\n                          handleClear(e);\n                        },\n                      }),\n                    })\n                  : Box.create(toggleIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.toggleIndicator,\n                        styles: resolvedStyles.toggleIndicator,\n                        accessibility: indicatorBehavior,\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: e => {\n                          if (!disabled) {\n                            getToggleButtonProps({ disabled }).onClick(e);\n                          }\n\n                          _.invoke(predefinedProps, 'onClick', e);\n                        },\n                      }),\n                    })}\n                {renderItemsList(\n                  highlightedIndex,\n                  toggleMenu,\n                  selectItemAtIndex,\n                  getMenuProps,\n                  getItemProps,\n                  getInputProps,\n                )}\n              </div>\n            </Ref>\n          );\n        }}\n      </Downshift>\n      <Portal open={!!getA11ySelectionMessage}>\n        <div role=\"status\" aria-live=\"polite\" aria-relevant=\"additions text\" style={screenReaderContainerStyles}>\n          {a11ySelectionStatus}\n        </div>\n      </Portal>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, DropdownProps> &\n  FluentComponentStaticProps<DropdownProps> & {\n    Item: typeof DropdownItem;\n    SearchInput: typeof DropdownSearchInput;\n    SelectedItem: typeof DropdownSelectedItem;\n  };\n\nDropdown.displayName = 'Dropdown';\n\nDropdown.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  activeSelectedIndex: PropTypes.number,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  clearable: PropTypes.bool,\n  clearIndicator: customPropTypes.shorthandAllowingChildren,\n  defaultActiveSelectedIndex: PropTypes.number,\n  defaultOpen: PropTypes.bool,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultSearchQuery: PropTypes.string,\n  defaultValue: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  fluid: PropTypes.bool,\n  getA11ySelectionMessage: PropTypes.object,\n  getA11yStatusMessage: PropTypes.func,\n  highlightFirstItemOnOpen: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  itemToString: PropTypes.func,\n  itemToValue: PropTypes.func,\n  headerMessage: customPropTypes.itemShorthand,\n  list: customPropTypes.itemShorthand,\n  loading: PropTypes.bool,\n  loadingMessage: customPropTypes.itemShorthand,\n  moveFocusOnTab: PropTypes.bool,\n  multiple: PropTypes.bool,\n  noResultsMessage: customPropTypes.itemShorthand,\n  onOpenChange: PropTypes.func,\n  onSearchQueryChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onActiveSelectedIndexChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  open: PropTypes.bool,\n  placeholder: PropTypes.string,\n  renderItem: PropTypes.func,\n  renderSelectedItem: PropTypes.func,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  searchQuery: PropTypes.string,\n  searchInput: customPropTypes.itemShorthand,\n  toggleIndicator: customPropTypes.shorthandAllowingChildren,\n  triggerButton: customPropTypes.itemShorthand,\n  value: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  'aria-labelledby': PropTypes.string,\n  'aria-invalid': PropTypes.bool,\n  a11ySelectedItemsMessage: PropTypes.string,\n  // positioning props\n  align: PropTypes.oneOf(ALIGNMENTS),\n  flipBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  overflowBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  popperRef: customPropTypes.ref,\n  position: PropTypes.oneOf(POSITIONS),\n  positionFixed: PropTypes.bool,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  unstable_disableTether: PropTypes.oneOf([true, false, 'all']),\n  unstable_pinned: PropTypes.bool,\n  autoSize: PropTypes.oneOf<AutoSize>(AUTOSIZES),\n};\nDropdown.handledProps = Object.keys(Dropdown.propTypes) as any;\n\nDropdown.defaultProps = {\n  align: 'start',\n  clearIndicator: <CloseIcon outline />,\n  itemToString: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  itemToValue: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  list: {},\n  position: 'below',\n  toggleIndicator: <ChevronDownIcon outline />,\n  triggerButton: {},\n};\n\nDropdown.Item = DropdownItem;\nDropdown.SearchInput = DropdownSearchInput;\nDropdown.SelectedItem = DropdownSelectedItem;\n"],"file":"Dropdown.js"}