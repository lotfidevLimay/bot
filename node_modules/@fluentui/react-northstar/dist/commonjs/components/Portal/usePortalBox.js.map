{"version":3,"sources":["components/Portal/usePortalBox.ts"],"names":["usePortalBox","options","className","rtl","target","element","React","useMemo","newElement","createElement","body","appendChild","setAttribute","removeAttribute","useEffect","removeChild"],"mappings":";;;;;AAAA;;AACA;;AAEA;;;;;;AAQO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAyD;AACnF,MAAQC,SAAR,GAAmCD,OAAnC,CAAQC,SAAR;AAAA,MAAmBC,GAAnB,GAAmCF,OAAnC,CAAmBE,GAAnB;AAAA,MAAwBC,MAAxB,GAAmCH,OAAnC,CAAwBG,MAAxB;AAEA,MAAMC,OAA8B,GAAGC,KAAK,CAACC,OAAN,CAAc,YAAM;AACzD,QAAMC,UAAU,GAAG,+BAAeJ,MAAf,GAAwBA,MAAM,CAACK,aAAP,CAAqB,KAArB,CAAxB,GAAsD,IAAzE,CADyD,CAGzD;AACA;;AACA,QAAID,UAAJ,EAAgB;AACdJ,MAAAA,MAAM,CAACM,IAAP,CAAYC,WAAZ,CAAwBH,UAAxB;AACD;;AAED,WAAOA,UAAP;AACD,GAVsC,EAUpC,CAACJ,MAAD,CAVoC,CAAvC;AAYA,gDAA0B,YAAM;AAC9B,QAAIC,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACO,YAAR,CAAqB,OAArB,EAA8BV,SAA9B;;AAEA,UAAIC,GAAJ,EAAS;AACPE,QAAAA,OAAO,CAACO,YAAR,CAAqB,KAArB,EAA4B,KAA5B;AACD,OAFD,MAEO;AACLP,QAAAA,OAAO,CAACQ,eAAR,CAAwB,KAAxB;AACD;AACF;AACF,GAVD,EAUG,CAACX,SAAD,EAAYG,OAAZ,EAAqBF,GAArB,CAVH,EAfmF,CA2BnF;;AACAG,EAAAA,KAAK,CAACQ,SAAN,CAAgB,YAAM;AACpB,WAAO,YAAM;AACX,UAAIT,OAAJ,EAAa;AACXD,QAAAA,MAAM,CAACM,IAAP,CAAYK,WAAZ,CAAwBV,OAAxB;AACD;AACF,KAJD;AAKD,GAND,EAMG,CAACA,OAAD,EAAUD,MAAV,CANH;AAQA,SAAOC,OAAP;AACD,CArCM","sourcesContent":["import { useIsomorphicLayoutEffect } from '@fluentui/react-bindings';\nimport * as React from 'react';\n\nimport { isBrowser } from '../../utils/isBrowser';\n\ntype UsePortalBoxOptions = {\n  className: string;\n  rtl: boolean;\n  target: Document | undefined;\n};\n\nexport const usePortalBox = (options: UsePortalBoxOptions): HTMLDivElement | null => {\n  const { className, rtl, target } = options;\n\n  const element: HTMLDivElement | null = React.useMemo(() => {\n    const newElement = isBrowser() && target ? target.createElement('div') : null;\n\n    // Element should be attached to DOM during render to make elements that will be rendered\n    // inside accessible in effects of child components\n    if (newElement) {\n      target.body.appendChild(newElement);\n    }\n\n    return newElement;\n  }, [target]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (element) {\n      element.setAttribute('class', className);\n\n      if (rtl) {\n        element.setAttribute('dir', 'rtl');\n      } else {\n        element.removeAttribute('dir');\n      }\n    }\n  }, [className, element, rtl]);\n\n  // This effect should always last as it removes element from HTML tree\n  React.useEffect(() => {\n    return () => {\n      if (element) {\n        target.body.removeChild(element);\n      }\n    };\n  }, [element, target]);\n\n  return element;\n};\n"],"file":"usePortalBox.js"}