"use strict";
// Copyright (c) Wictor WilÃ©n. All rights reserved.
// Licensed under the MIT license.
// SPDX-License-Identifier: MIT
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = exports.trackEvent = exports.dependenciesP = exports.dependencies = void 0;
const deployTask_1 = require("./deployTask");
const appInsights = __importStar(require("applicationinsights"));
/**
 * Run the dependencies in series
 * @param gulp the gulp client
 * @param eventName name of event to track
 * @param tasks the tasks
 */
const dependencies = (gulp, eventName, ...tasks) => {
    return (done) => {
        (0, exports.trackEvent)(eventName);
        gulp.series(...tasks)(done);
    };
};
exports.dependencies = dependencies;
/**
 * Run the dependencies in parallel
 * @param gulp the gulp client
 * @param eventName name of event to track
 * @param tasks the tasks
 */
const dependenciesP = (gulp, eventName, ...tasks) => {
    return (done) => {
        (0, exports.trackEvent)(eventName);
        gulp.parallel(...tasks)(done);
    };
};
exports.dependenciesP = dependenciesP;
const trackEvent = (eventName) => {
    if (appInsights && appInsights.defaultClient) {
        appInsights.defaultClient.trackEvent({ name: "yoteams-build-core:" + eventName });
        appInsights.defaultClient.flush();
    }
};
exports.trackEvent = trackEvent;
const setup = (gulp, config) => {
    (0, deployTask_1.deployTask)(gulp, config);
};
exports.setup = setup;
