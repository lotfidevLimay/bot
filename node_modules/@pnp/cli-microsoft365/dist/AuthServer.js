"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthServer = void 0;
const http = require("http");
const open = require("open");
const url = require("url");
class AuthServer {
    constructor() {
        this.open = open;
        this.debug = false;
        this.resource = "";
        this.generatedServerUrl = "";
        this.initializeServer = (service, resource, resolve, reject, logger, debug = false) => {
            this.service = service;
            this.resolve = resolve;
            this.reject = reject;
            this.logger = logger;
            this.debug = debug;
            this.resource = resource;
            this.httpServer = http.createServer(this.httpRequest).listen(0, this.httpListener);
        };
        this.httpListener = () => {
            const requestState = Math.random().toString(16).substr(2, 20);
            const address = this.httpServer.address();
            this.generatedServerUrl = `http://localhost:${address.port}`;
            const url = `https://login.microsoftonline.com/${this.service.tenant}/oauth2/authorize?response_type=code&client_id=${this.service.appId}&redirect_uri=${this.generatedServerUrl}&state=${requestState}&resource=${this.resource}&prompt=select_account`;
            if (this.debug) {
                this.logger.logToStderr('Redirect URL:');
                this.logger.logToStderr(url);
                this.logger.logToStderr('');
            }
            this.openUrl(url);
        };
        this.httpRequest = (request, response) => {
            if (this.debug) {
                this.logger.logToStderr('Response:');
                this.logger.logToStderr(request.url);
                this.logger.logToStderr('');
            }
            // url.parse is deprecated but we can't move to URL, because it doesn't
            // support server-relative URLs
            const queryString = url.parse(request.url, true).query;
            const hasCode = queryString.code !== undefined;
            const hasError = queryString.error !== undefined;
            let body = "";
            if (hasCode === true) {
                body = '<script type="text/JavaScript">setTimeout(function(){ window.location = "https://pnp.github.io/cli-microsoft365/"; },10000);</script>';
                body += '<p><b>You have logged into CLI for Microsoft 365!</b></p>';
                body += '<p>You can close this window, or we will redirect you to the <a href="https://pnp.github.io/cli-microsoft365/">CLI for Microsoft 365</a> documentation in 10 seconds.</p>';
                this.resolve({
                    code: queryString.code,
                    redirectUri: this.generatedServerUrl
                });
            }
            if (hasError === true) {
                const errorMessage = {
                    error: queryString.error,
                    errorDescription: queryString.error_description
                };
                body = "<p>Oops! Azure Active Directory replied with an error message.</p>";
                body += `<p>${errorMessage.error}</p>`;
                if (errorMessage.errorDescription !== undefined) {
                    body += `<p>${errorMessage.errorDescription}</p>`;
                }
                this.reject(errorMessage);
            }
            if (hasCode === false && hasError === false) {
                const errorMessage = {
                    error: "invalid request",
                    errorDescription: "An invalid request has been received by the HTTP server"
                };
                body = "<p>Oops! This is an invalid request.</p>";
                body += `<p>${errorMessage.error}</p>`;
                body += `<p>${errorMessage.errorDescription}</p>`;
                this.reject(errorMessage);
            }
            response.writeHead(200, { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'text/html' });
            response.write(`<html><head><title>CLI for Microsoft 365</title></head><body>${body}</body></html>`);
            response.end();
            this.httpServer.close();
        };
    }
    get server() {
        return this.httpServer;
    }
    openUrl(url) {
        this
            .open(url)
            .then(_ => {
            this.logger.logToStderr("To sign in, use the web browser that just has been opened. Please sign-in there.");
        })
            .catch(_ => {
            const errorResponse = {
                error: "Can't open the default browser",
                errorDescription: "Was not able to open a browser instance. Try again later or use a different authentication method."
            };
            this.reject(errorResponse);
            this.httpServer.close();
        });
    }
}
exports.AuthServer = AuthServer;
exports.default = new AuthServer();
//# sourceMappingURL=AuthServer.js.map