"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.packageManager = void 0;
const packageCommands = {
    npm: {
        install: 'npm i -SE',
        installDev: 'npm i -DE',
        uninstall: 'npm un -S',
        uninstallDev: 'npm un -D'
    },
    pnpm: {
        install: 'pnpm i -E',
        installDev: 'pnpm i -DE',
        uninstall: 'pnpm un',
        uninstallDev: 'pnpm un'
    },
    yarn: {
        install: 'yarn add -E',
        installDev: 'yarn add -DE',
        uninstall: 'yarn remove',
        uninstallDev: 'yarn remove'
    }
};
exports.packageManager = {
    getPackageManagerCommand(command, packageManager) {
        return packageCommands[packageManager][command];
    },
    mapPackageManagerCommand({ command, packagesDepExact, packagesDevExact, packagesDepUn, packagesDevUn, packageMgr }) {
        // matches must be in this particular order to avoid false matches, eg.
        // uninstallDev contains install
        if (command.startsWith(`${exports.packageManager.getPackageManagerCommand('uninstallDev', packageMgr)} `)) {
            packagesDevUn.push(command.replace(exports.packageManager.getPackageManagerCommand('uninstallDev', packageMgr), '').trim());
            return;
        }
        if (command.startsWith(`${exports.packageManager.getPackageManagerCommand('installDev', packageMgr)} `)) {
            packagesDevExact.push(command.replace(exports.packageManager.getPackageManagerCommand('installDev', packageMgr), '').trim());
            return;
        }
        if (command.startsWith(`${exports.packageManager.getPackageManagerCommand('uninstall', packageMgr)} `)) {
            packagesDepUn.push(command.replace(exports.packageManager.getPackageManagerCommand('uninstall', packageMgr), '').trim());
            return;
        }
        if (command.startsWith(`${exports.packageManager.getPackageManagerCommand('install', packageMgr)} `)) {
            packagesDepExact.push(command.replace(exports.packageManager.getPackageManagerCommand('install', packageMgr), '').trim());
        }
    },
    reducePackageManagerCommand({ packagesDepExact, packagesDevExact, packagesDepUn, packagesDevUn, packageMgr }) {
        const commandsToExecute = [];
        // uninstall commands must come first otherwise there is a chance that
        // whatever we recommended to install, will be immediately uninstalled
        if (packagesDepUn.length > 0) {
            commandsToExecute.push(`${exports.packageManager.getPackageManagerCommand('uninstall', packageMgr)} ${packagesDepUn.join(' ')}`);
        }
        if (packagesDevUn.length > 0) {
            commandsToExecute.push(`${exports.packageManager.getPackageManagerCommand('uninstallDev', packageMgr)} ${packagesDevUn.join(' ')}`);
        }
        if (packagesDepExact.length > 0) {
            commandsToExecute.push(`${exports.packageManager.getPackageManagerCommand('install', packageMgr)} ${packagesDepExact.join(' ')}`);
        }
        if (packagesDevExact.length > 0) {
            commandsToExecute.push(`${exports.packageManager.getPackageManagerCommand('installDev', packageMgr)} ${packagesDevExact.join(' ')}`);
        }
        return commandsToExecute;
    }
};
//# sourceMappingURL=packageManager.js.map