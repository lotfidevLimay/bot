"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.planner = void 0;
const request_1 = require("../request");
const odata_1 = require("./odata");
const graphResource = 'https://graph.microsoft.com';
const getRequestOptions = (url, metadata) => ({
    url: url,
    headers: {
        accept: `application/json;odata.metadata=${metadata}`
    },
    responseType: 'json'
});
exports.planner = {
    /**
     * Get Planner plan by ID.
     * @param id Planner ID.
     * @param metadata OData metadata level. Default is none
     */
    getPlanById(id, metadata = 'none') {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = getRequestOptions(`${graphResource}/v1.0/planner/plans/${id}`, metadata);
            try {
                return yield request_1.default.get(requestOptions);
            }
            catch (ex) {
                throw Error(`Planner plan with id '${id}' was not found.`);
            }
        });
    },
    /**
     * Get all Planner plans for a specific group.
     * @param groupId Group ID.
     */
    getPlansByGroupId(groupId) {
        return odata_1.odata.getAllItems(`${graphResource}/v1.0/groups/${groupId}/planner/plans`, 'none');
    },
    /**
     * Get Planner plan by title in a specific group.
     * @param title Title of the Planner plan. Case insensitive.
     * @param groupId Owner group ID .
     */
    getPlanByTitle(title, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
            const plans = yield this.getPlansByGroupId(groupId);
            const filteredPlans = plans.filter(p => p.title && p.title.toLowerCase() === title.toLowerCase());
            if (!filteredPlans.length) {
                throw Error(`The specified plan '${title}' does not exist.`);
            }
            if (filteredPlans.length > 1) {
                throw Error(`Multiple plans with title '${title}' found: ${filteredPlans.map(x => x.id)}.`);
            }
            return filteredPlans[0];
        });
    }
};
//# sourceMappingURL=planner.js.map