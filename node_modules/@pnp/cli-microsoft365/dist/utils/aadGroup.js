"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.aadGroup = void 0;
const request_1 = require("../request");
const odata_1 = require("./odata");
const graphResource = 'https://graph.microsoft.com';
exports.aadGroup = {
    /**
     * Retrieve a single group.
     * @param id Group ID.
     */
    getGroupById(id) {
        const requestOptions = {
            url: `${graphResource}/v1.0/groups/${id}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    },
    /**
     * Get a list of groups by display name.
     * @param displayName Group display name.
     */
    getGroupsByDisplayName(displayName) {
        return odata_1.odata.getAllItems(`${graphResource}/v1.0/groups?$filter=displayName eq '${encodeURIComponent(displayName)}'`);
    },
    /**
     * Get a single group by its display name.
     * @param displayName Group display name.
     * @throws Error when group was not found.
     * @throws Error when multiple groups with the same name were found.
     */
    getGroupByDisplayName(displayName) {
        return __awaiter(this, void 0, void 0, function* () {
            const groups = yield this.getGroupsByDisplayName(displayName);
            if (!groups.length) {
                throw Error(`The specified group '${displayName}' does not exist.`);
            }
            if (groups.length > 1) {
                throw Error(`Multiple groups with name '${displayName}' found: ${groups.map(x => x.id).join(',')}.`);
            }
            return groups[0];
        });
    }
};
//# sourceMappingURL=aadGroup.js.map