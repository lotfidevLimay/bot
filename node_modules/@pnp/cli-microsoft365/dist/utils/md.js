"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.md = void 0;
const fs = require("fs");
const os_1 = require("os");
const path = require("path");
function convertTitle(md) {
    return md.replace(/^#\s+(.*)/gm, (match, title) => {
        return title.toLocaleUpperCase() + os_1.EOL + Array(title.length + 1).join('=');
    });
}
function convertHeadings(md) {
    return md.replace(/^(#+)\s+(.*)/gm, (match, level, content) => {
        return `${os_1.EOL}${content.toLocaleUpperCase()}`;
    });
}
function convertAdmonitions(md) {
    const regex = new RegExp('^!!!\\s(.*)' + os_1.EOL + '\\s+', 'gm');
    return md.replace(regex, (match, content) => {
        return content.toLocaleUpperCase() + os_1.EOL + os_1.EOL;
    });
}
function includeContent(md, rootFolder) {
    return md.replace(/^--8<-- "([^"]+)"/gm, (match, filePath) => {
        return fs.readFileSync(path.join(rootFolder, filePath), 'utf8');
    });
}
function convertDd(md) {
    return md.replace(/^:\s(.*)/gm, (match, content) => {
        return `  ${content}`;
    });
}
function convertHyperlinks(md) {
    return md.replace(/\[([^\]]+)\]\(([^\)]+)\)/gm, (match, label, url) => {
        // if the link is the same as the content, return just the link
        if (label === url) {
            return url;
        }
        // if the link is relative, remove it because there's no way to open it
        // from the terminal anyway. In the future, we could convert it to the
        // actual link of the docs.
        if (!url.startsWith('http:') && !url.startsWith('https:')) {
            return label;
        }
        return `${label} (${url})`;
    });
}
function convertCodeFences(md) {
    const regex = new RegExp('^```.*?(?:\r\n|\n)(.*?)```(?:\r\n|\n)', 'gms');
    return md.replace(regex, (match, code) => {
        return `  ${code}${os_1.EOL}`;
    });
}
function removeInlineMarkup(md) {
    // from https://stackoverflow.com/a/70064453
    return md.replace(/(?<marks>[`]|\*{1,3}|_{1,3}|~{2})(?<inmarks>.*?)\1/g, '$<inmarks>$<link_text>');
}
function removeTooManyEmptyLines(md) {
    const regex = new RegExp('(' + os_1.EOL + '){4,}', 'g');
    return md.replace(regex, Array(4).join(os_1.EOL));
}
const convertFunctions = [
    convertTitle,
    convertHeadings,
    convertAdmonitions,
    convertDd,
    convertHyperlinks,
    convertCodeFences,
    removeInlineMarkup,
    removeTooManyEmptyLines
];
exports.md = {
    md2plain(md, rootFolderDocs) {
        md = includeContent(md, rootFolderDocs);
        convertFunctions.forEach(convert => {
            md = convert(md);
        });
        return md;
    }
};
//# sourceMappingURL=md.js.map