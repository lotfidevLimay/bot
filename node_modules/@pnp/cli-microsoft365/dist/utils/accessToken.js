"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.accessToken = void 0;
exports.accessToken = {
    isAppOnlyAccessToken(accessToken) {
        let isAppOnlyAccessToken = false;
        if (!accessToken || accessToken.length === 0) {
            return isAppOnlyAccessToken;
        }
        const chunks = accessToken.split('.');
        if (chunks.length !== 3) {
            return isAppOnlyAccessToken;
        }
        const tokenString = Buffer.from(chunks[1], 'base64').toString();
        try {
            const token = JSON.parse(tokenString);
            isAppOnlyAccessToken = token.idtyp === 'app';
        }
        catch (_a) {
        }
        return isAppOnlyAccessToken;
    },
    getTenantIdFromAccessToken(accessToken) {
        let tenantId = '';
        if (!accessToken || accessToken.length === 0) {
            return tenantId;
        }
        const chunks = accessToken.split('.');
        if (chunks.length !== 3) {
            return tenantId;
        }
        const tokenString = Buffer.from(chunks[1], 'base64').toString();
        try {
            const token = JSON.parse(tokenString);
            tenantId = token.tid;
        }
        catch (_a) {
        }
        return tenantId;
    },
    getUserNameFromAccessToken(accessToken) {
        let userName = '';
        if (!accessToken || accessToken.length === 0) {
            return userName;
        }
        const chunks = accessToken.split('.');
        if (chunks.length !== 3) {
            return userName;
        }
        const tokenString = Buffer.from(chunks[1], 'base64').toString();
        try {
            const token = JSON.parse(tokenString);
            // if authenticated using certificate, there is no upn so use
            // app display name instead
            userName = token.upn || token.app_displayname;
        }
        catch (_a) {
        }
        return userName;
    },
    getUserIdFromAccessToken(accessToken) {
        let userId = '';
        if (!accessToken || accessToken.length === 0) {
            return userId;
        }
        const chunks = accessToken.split('.');
        if (chunks.length !== 3) {
            return userId;
        }
        const tokenString = Buffer.from(chunks[1], 'base64').toString();
        try {
            const token = JSON.parse(tokenString);
            userId = token.oid;
        }
        catch (_a) {
        }
        return userId;
    }
};
//# sourceMappingURL=accessToken.js.map