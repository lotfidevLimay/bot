"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatting = void 0;
const stripJsonComments = require("strip-json-comments");
exports.formatting = {
    escapeXml(s) {
        if (!s) {
            return s;
        }
        return s.toString().replace(/[<>&"]/g, (c) => {
            let char = c;
            switch (c) {
                case '<':
                    char = '&lt;';
                    break;
                case '>':
                    char = '&gt;';
                    break;
                case '&':
                    char = '&amp;';
                    break;
                case '"':
                    char = '&quot;';
                    break;
            }
            return char;
        });
    },
    parseJsonWithBom(s) {
        return JSON.parse(s.replace(/^\uFEFF/, ''));
    },
    filterObject(obj, propertiesToInclude) {
        const objKeys = Object.keys(obj);
        return propertiesToInclude
            .filter(prop => objKeys.includes(prop))
            .reduce((filtered, key) => {
            filtered[key] = obj[key];
            return filtered;
        }, {});
    },
    parseCsvToJson(s) {
        const rows = s.split('\n');
        const jsonObj = [];
        const headers = rows[0].split(',');
        for (let i = 1; i < rows.length; i++) {
            const data = rows[i].split(',');
            const obj = {};
            for (let j = 0; j < data.length; j++) {
                const value = data[j].trim();
                const numValue = parseInt(value);
                obj[headers[j].trim()] = isNaN(numValue) || numValue.toString() !== value ? value : numValue;
            }
            jsonObj.push(obj);
        }
        return jsonObj;
    },
    encodeQueryParameter(value) {
        if (!value) {
            return value;
        }
        return encodeURIComponent(value).replace(/'/g, "''");
    },
    removeSingleLineComments(s) {
        return stripJsonComments(s);
    },
    splitAndTrim(s) {
        return s.split(',').map(c => c.trim());
    },
    openTypesEncoder(value) {
        return value
            .replace(/\%/g, '%25')
            .replace(/\./g, '%2E')
            .replace(/:/g, '%3A')
            .replace(/@/g, '%40')
            .replace(/#/g, '%23');
    }
};
//# sourceMappingURL=formatting.js.map