"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.msalCachePlugin = void 0;
const FileTokenStorage_1 = require("./FileTokenStorage");
class MsalCachePlugin {
    constructor() {
        this.fileTokenStorage = new FileTokenStorage_1.FileTokenStorage(FileTokenStorage_1.FileTokenStorage.msalCacheFilePath());
    }
    beforeCacheAccess(tokenCacheContext) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield this.fileTokenStorage.get();
                tokenCacheContext.tokenCache.deserialize(data);
            }
            catch (_a) { }
        });
    }
    afterCacheAccess(tokenCacheContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!tokenCacheContext.cacheHasChanged) {
                return;
            }
            try {
                yield this.fileTokenStorage.set(tokenCacheContext.tokenCache.serialize());
            }
            catch (_a) { }
        });
    }
}
const msalCachePlugin = new MsalCachePlugin();
exports.msalCachePlugin = msalCachePlugin;
//# sourceMappingURL=msalCachePlugin.js.map