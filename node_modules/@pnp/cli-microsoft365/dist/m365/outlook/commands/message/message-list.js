"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _OutlookMessageListCommand_instances, _OutlookMessageListCommand_initTelemetry, _OutlookMessageListCommand_initOptions, _OutlookMessageListCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const request_1 = require("../../../../request");
const odata_1 = require("../../../../utils/odata");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
const Outlook_1 = require("../../Outlook");
class OutlookMessageListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _OutlookMessageListCommand_instances.add(this);
        __classPrivateFieldGet(this, _OutlookMessageListCommand_instances, "m", _OutlookMessageListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _OutlookMessageListCommand_instances, "m", _OutlookMessageListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _OutlookMessageListCommand_instances, "m", _OutlookMessageListCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.MESSAGE_LIST;
    }
    get description() {
        return 'Gets all mail messages from the specified folder';
    }
    defaultProperties() {
        return ['subject', 'receivedDateTime'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const folderId = yield this.getFolderId(args);
                const url = folderId ? `me/mailFolders/${folderId}/messages` : 'me/messages';
                const messages = yield odata_1.odata.getAllItems(`${this.resource}/v1.0/${url}?$top=50`);
                logger.log(messages);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getFolderId(args) {
        if (!args.options.folderId && !args.options.folderName) {
            return Promise.resolve('');
        }
        if (args.options.folderId) {
            return Promise.resolve(args.options.folderId);
        }
        if (Outlook_1.Outlook.wellKnownFolderNames.indexOf(args.options.folderName) > -1) {
            return Promise.resolve(args.options.folderName);
        }
        return new Promise((resolve, reject) => {
            const requestOptions = {
                url: `${this.resource}/v1.0/me/mailFolders?$filter=displayName eq '${encodeURIComponent(args.options.folderName)}'&$select=id`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            request_1.default
                .get(requestOptions)
                .then((response) => {
                if (response.value.length === 1) {
                    return resolve(response.value[0].id);
                }
                if (response.value.length === 0) {
                    return reject(`Folder with name '${args.options.folderName}' not found`);
                }
                if (response.value.length > 1) {
                    return reject(`Multiple folders with name '${args.options.folderName}' found. Please disambiguate:${os.EOL}${response.value.map(f => `- ${f.id}`).join(os.EOL)}`);
                }
            }, err => reject(err));
        });
    }
}
_OutlookMessageListCommand_instances = new WeakSet(), _OutlookMessageListCommand_initTelemetry = function _OutlookMessageListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            folderId: typeof args.options.folderId !== 'undefined',
            folderName: typeof args.options.folderName !== 'undefined'
        });
    });
}, _OutlookMessageListCommand_initOptions = function _OutlookMessageListCommand_initOptions() {
    this.options.unshift({
        option: '--folderName [folderName]',
        autocomplete: Outlook_1.Outlook.wellKnownFolderNames
    }, {
        option: '--folderId [folderId]',
        autocomplete: Outlook_1.Outlook.wellKnownFolderNames
    });
}, _OutlookMessageListCommand_initOptionSets = function _OutlookMessageListCommand_initOptionSets() {
    this.optionSets.push(['folderId', 'folderName']);
};
module.exports = new OutlookMessageListCommand();
//# sourceMappingURL=message-list.js.map