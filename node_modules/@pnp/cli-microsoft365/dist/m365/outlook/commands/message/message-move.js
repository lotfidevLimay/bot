"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _OutlookMessageMoveCommand_instances, _OutlookMessageMoveCommand_initTelemetry, _OutlookMessageMoveCommand_initOptions, _OutlookMessageMoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
const Outlook_1 = require("../../Outlook");
class OutlookMessageMoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _OutlookMessageMoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _OutlookMessageMoveCommand_instances, "m", _OutlookMessageMoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _OutlookMessageMoveCommand_instances, "m", _OutlookMessageMoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _OutlookMessageMoveCommand_instances, "m", _OutlookMessageMoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.MESSAGE_MOVE;
    }
    get description() {
        return 'Moves message to the specified folder';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let sourceFolder;
            let targetFolder;
            try {
                sourceFolder = yield this.getFolderId(args.options.sourceFolderId, args.options.sourceFolderName);
                targetFolder = yield this.getFolderId(args.options.targetFolderId, args.options.targetFolderName);
                const messageUrl = `mailFolders/${sourceFolder}/messages/${args.options.messageId}`;
                const requestOptions = {
                    url: `${this.resource}/v1.0/me/${messageUrl}/move`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    data: {
                        destinationId: targetFolder
                    },
                    responseType: 'json'
                };
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getFolderId(folderId, folderName) {
        if (folderId) {
            return Promise.resolve(folderId);
        }
        if (Outlook_1.Outlook.wellKnownFolderNames.indexOf(folderName) > -1) {
            return Promise.resolve(folderName);
        }
        return new Promise((resolve, reject) => {
            const requestOptions = {
                url: `${this.resource}/v1.0/me/mailFolders?$filter=displayName eq '${encodeURIComponent(folderName)}'&$select=id`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            request_1.default
                .get(requestOptions)
                .then((response) => {
                if (response.value.length === 1) {
                    return resolve(response.value[0].id);
                }
                if (response.value.length === 0) {
                    return reject(`Folder with name '${folderName}' not found`);
                }
                if (response.value.length > 1) {
                    return reject(`Multiple folders with name '${folderName}' found. Please disambiguate:${os.EOL}${response.value.map(f => `- ${f.id}`).join(os.EOL)}`);
                }
            }, err => reject(err));
        });
    }
}
_OutlookMessageMoveCommand_instances = new WeakSet(), _OutlookMessageMoveCommand_initTelemetry = function _OutlookMessageMoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            sourceFolderId: typeof args.options.sourceFolderId !== 'undefined',
            sourceFolderName: typeof args.options.sourceFolderName !== 'undefined',
            targetFolderId: typeof args.options.targetFolderId !== 'undefined',
            targetFolderName: typeof args.options.targetFolderName !== 'undefined'
        });
    });
}, _OutlookMessageMoveCommand_initOptions = function _OutlookMessageMoveCommand_initOptions() {
    this.options.unshift({
        option: '--messageId <messageId>'
    }, {
        option: '--sourceFolderName [sourceFolderName]',
        autocomplete: Outlook_1.Outlook.wellKnownFolderNames
    }, {
        option: '--sourceFolderId [sourceFolderId]',
        autocomplete: Outlook_1.Outlook.wellKnownFolderNames
    }, {
        option: '--targetFolderName [targetFolderName]',
        autocomplete: Outlook_1.Outlook.wellKnownFolderNames
    }, {
        option: '--targetFolderId [targetFolderId]',
        autocomplete: Outlook_1.Outlook.wellKnownFolderNames
    });
}, _OutlookMessageMoveCommand_initOptionSets = function _OutlookMessageMoveCommand_initOptionSets() {
    this.optionSets.push(['sourceFolderId', 'sourceFolderName'], ['targetFolderId', 'targetFolderName']);
};
module.exports = new OutlookMessageMoveCommand();
//# sourceMappingURL=message-move.js.map