"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SearchExternalConnectionAddCommand_instances, _SearchExternalConnectionAddCommand_initTelemetry, _SearchExternalConnectionAddCommand_initOptions, _SearchExternalConnectionAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class SearchExternalConnectionAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _SearchExternalConnectionAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SearchExternalConnectionAddCommand_instances, "m", _SearchExternalConnectionAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SearchExternalConnectionAddCommand_instances, "m", _SearchExternalConnectionAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SearchExternalConnectionAddCommand_instances, "m", _SearchExternalConnectionAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.EXTERNALCONNECTION_ADD;
    }
    get description() {
        return 'Adds a new External Connection for Microsoft Search';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let appIds = [];
            if (args.options.authorizedAppIds !== undefined &&
                args.options.authorizedAppIds !== '') {
                appIds = args.options.authorizedAppIds.split(',');
            }
            const commandData = {
                id: args.options.id,
                name: args.options.name,
                description: args.options.description,
                configuration: {
                    authorizedAppIds: appIds
                }
            };
            const requestOptions = {
                url: `${this.resource}/v1.0/external/connections`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json',
                data: commandData
            };
            try {
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SearchExternalConnectionAddCommand_instances = new WeakSet(), _SearchExternalConnectionAddCommand_initTelemetry = function _SearchExternalConnectionAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            authorizedAppIds: typeof args.options.authorizedAppIds !== 'undefined'
        });
    });
}, _SearchExternalConnectionAddCommand_initOptions = function _SearchExternalConnectionAddCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '-n, --name <name>'
    }, {
        option: '-d, --description <description>'
    }, {
        option: '--authorizedAppIds [authorizedAppIds]'
    });
}, _SearchExternalConnectionAddCommand_initValidators = function _SearchExternalConnectionAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const id = args.options.id;
        if (id.length < 3 || id.length > 32) {
            return 'ID must be between 3 and 32 characters in length.';
        }
        const alphaNumericRegEx = /[^\w]|_/g;
        if (alphaNumericRegEx.test(id)) {
            return 'ID must only contain alphanumeric characters.';
        }
        if (id.length > 9 &&
            id.startsWith('Microsoft')) {
            return 'ID cannot begin with Microsoft';
        }
        const invalidIds = ['None',
            'Directory',
            'Exchange',
            'ExchangeArchive',
            'LinkedIn',
            'Mailbox',
            'OneDriveBusiness',
            'SharePoint',
            'Teams',
            'Yammer',
            'Connectors',
            'TaskFabric',
            'PowerBI',
            'Assistant',
            'TopicEngine',
            'MSFT_All_Connectors'
        ];
        if (invalidIds.indexOf(id) > -1) {
            return `ID cannot be one of the following values: ${invalidIds.join(', ')}.`;
        }
        return true;
    }));
};
module.exports = new SearchExternalConnectionAddCommand();
//# sourceMappingURL=externalconnection-add.js.map