"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SearchExternalConnectionGetCommand_instances, _SearchExternalConnectionGetCommand_initTelemetry, _SearchExternalConnectionGetCommand_initOptions, _SearchExternalConnectionGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class SearchExternalConnectionGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _SearchExternalConnectionGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SearchExternalConnectionGetCommand_instances, "m", _SearchExternalConnectionGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SearchExternalConnectionGetCommand_instances, "m", _SearchExternalConnectionGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SearchExternalConnectionGetCommand_instances, "m", _SearchExternalConnectionGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.EXTERNALCONNECTION_GET;
    }
    get description() {
        return 'Get a specific external connection for use in Microsoft Search';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `${this.resource}/v1.0/external/connections`;
            if (args.options.id) {
                url += `/${encodeURIComponent(args.options.id)}`;
            }
            else {
                url += `?$filter=name eq '${encodeURIComponent(args.options.name)}'`;
            }
            const requestOptions = {
                url: url,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            try {
                let res = yield request_1.default.get(requestOptions);
                if (args.options.name) {
                    if (res.value.length === 0) {
                        throw `External connection with name '${args.options.name}' not found`;
                    }
                    res = res.value[0];
                }
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SearchExternalConnectionGetCommand_instances = new WeakSet(), _SearchExternalConnectionGetCommand_initTelemetry = function _SearchExternalConnectionGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined'
        });
    });
}, _SearchExternalConnectionGetCommand_initOptions = function _SearchExternalConnectionGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    });
}, _SearchExternalConnectionGetCommand_initOptionSets = function _SearchExternalConnectionGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
};
module.exports = new SearchExternalConnectionGetCommand();
//# sourceMappingURL=externalconnection-get.js.map