"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SearchExternalConnectionRemoveCommand_instances, _SearchExternalConnectionRemoveCommand_initTelemetry, _SearchExternalConnectionRemoveCommand_initOptions, _SearchExternalConnectionRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class SearchExternalConnectionRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _SearchExternalConnectionRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SearchExternalConnectionRemoveCommand_instances, "m", _SearchExternalConnectionRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SearchExternalConnectionRemoveCommand_instances, "m", _SearchExternalConnectionRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SearchExternalConnectionRemoveCommand_instances, "m", _SearchExternalConnectionRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.EXTERNALCONNECTION_REMOVE;
    }
    get description() {
        return 'Removes a specific External Connection from Microsoft Search';
    }
    getExternalConnectionId(args) {
        if (args.options.id) {
            return Promise.resolve(args.options.id);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/external/connections?$filter=name eq '${encodeURIComponent(args.options.name)}'&$select=id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value.length === 1) {
                return Promise.resolve(res.value[0].id);
            }
            if (res.value.length === 0) {
                return Promise.reject(`The specified connection does not exist in Microsoft Search`);
            }
            return Promise.reject(`Multiple external connections with name ${args.options.name} found. Please disambiguate (IDs): ${res.value.map(x => x.id).join(', ')}`);
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeExternalConnection = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const externalConnectionId = yield this.getExternalConnectionId(args);
                    const requestOptions = {
                        url: `${this.resource}/v1.0/external/connections/${encodeURIComponent(externalConnectionId)}`,
                        headers: {
                            accept: 'application/json;odata.metadata=none'
                        },
                        responseType: 'json'
                    };
                    yield request_1.default.delete(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeExternalConnection();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the external connection '${args.options.id || args.options.name}'?`
                });
                if (result.continue) {
                    yield removeExternalConnection();
                }
            }
        });
    }
}
_SearchExternalConnectionRemoveCommand_instances = new WeakSet(), _SearchExternalConnectionRemoveCommand_initTelemetry = function _SearchExternalConnectionRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SearchExternalConnectionRemoveCommand_initOptions = function _SearchExternalConnectionRemoveCommand_initOptions() {
    this.options.unshift({ option: '--id [id]' }, { option: '--name [name]' }, { option: '--confirm' });
}, _SearchExternalConnectionRemoveCommand_initOptionSets = function _SearchExternalConnectionRemoveCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
};
module.exports = new SearchExternalConnectionRemoveCommand();
//# sourceMappingURL=externalconnection-remove.js.map