"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _UtilAccessTokenGetCommand_instances, _UtilAccessTokenGetCommand_initTelemetry, _UtilAccessTokenGetCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const Command_1 = require("../../../../Command");
const commands_1 = require("../../commands");
class UtilAccessTokenGetCommand extends Command_1.default {
    constructor() {
        super();
        _UtilAccessTokenGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _UtilAccessTokenGetCommand_instances, "m", _UtilAccessTokenGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _UtilAccessTokenGetCommand_instances, "m", _UtilAccessTokenGetCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.ACCESSTOKEN_GET;
    }
    get description() {
        return 'Gets access token for the specified resource';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let resource = args.options.resource;
            if (resource.toLowerCase() === 'sharepoint') {
                if (Auth_1.default.service.spoUrl) {
                    resource = Auth_1.default.service.spoUrl;
                }
                else {
                    throw `SharePoint URL undefined. Use the 'm365 spo set --url https://contoso.sharepoint.com' command to set the URL`;
                }
            }
            try {
                const accessToken = yield Auth_1.default.ensureAccessToken(resource, logger, this.debug, args.options.new);
                logger.log(accessToken);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_UtilAccessTokenGetCommand_instances = new WeakSet(), _UtilAccessTokenGetCommand_initTelemetry = function _UtilAccessTokenGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            new: args.options.new
        });
    });
}, _UtilAccessTokenGetCommand_initOptions = function _UtilAccessTokenGetCommand_initOptions() {
    this.options.unshift({
        option: '-r, --resource <resource>'
    }, {
        option: '--new'
    });
};
module.exports = new UtilAccessTokenGetCommand();
//# sourceMappingURL=accesstoken-get.js.map