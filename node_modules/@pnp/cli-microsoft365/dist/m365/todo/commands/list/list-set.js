"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TodoListSetCommand_instances, _TodoListSetCommand_initTelemetry, _TodoListSetCommand_initOptions, _TodoListSetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TodoListSetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TodoListSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _TodoListSetCommand_instances, "m", _TodoListSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TodoListSetCommand_instances, "m", _TodoListSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TodoListSetCommand_instances, "m", _TodoListSetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LIST_SET;
    }
    get description() {
        return 'Updates a Microsoft To Do task list';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = `${this.resource}/v1.0`;
            const data = {
                displayName: args.options.newName
            };
            try {
                const listId = yield this.getListId(args);
                if (!listId) {
                    throw `The list ${args.options.name} cannot be found`;
                }
                const requestOptions = {
                    url: `${endpoint}/me/todo/lists/${listId}`,
                    headers: {
                        accept: 'application/json;odata.metadata=none',
                        'content-type': 'application/json'
                    },
                    data,
                    responseType: 'json'
                };
                yield request_1.default.patch(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getListId(args) {
        const endpoint = `${this.resource}/v1.0`;
        if (args.options.id) {
            return Promise.resolve(args.options.id);
        }
        const requestOptions = {
            url: `${endpoint}/me/todo/lists?$filter=displayName eq '${escape(args.options.name)}'`,
            headers: {
                accept: "application/json;odata.metadata=none"
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((response) => response.value && response.value.length === 1 ? response.value[0].id : null);
    }
}
_TodoListSetCommand_instances = new WeakSet(), _TodoListSetCommand_initTelemetry = function _TodoListSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined'
        });
    });
}, _TodoListSetCommand_initOptions = function _TodoListSetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '--newName <newName>'
    });
}, _TodoListSetCommand_initOptionSets = function _TodoListSetCommand_initOptionSets() {
    this.optionSets.push(['name', 'id']);
};
module.exports = new TodoListSetCommand();
//# sourceMappingURL=list-set.js.map