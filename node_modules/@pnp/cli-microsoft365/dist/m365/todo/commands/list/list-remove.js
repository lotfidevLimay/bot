"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TodoListRemoveCommand_instances, _TodoListRemoveCommand_initTelemetry, _TodoListRemoveCommand_initOptions, _TodoListRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TodoListRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TodoListRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _TodoListRemoveCommand_instances, "m", _TodoListRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TodoListRemoveCommand_instances, "m", _TodoListRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TodoListRemoveCommand_instances, "m", _TodoListRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LIST_REMOVE;
    }
    get description() {
        return 'Removes a Microsoft To Do task list';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const getListId = () => __awaiter(this, void 0, void 0, function* () {
                if (args.options.name) {
                    // Search list by its name
                    const requestOptions = {
                        url: `${this.resource}/v1.0/me/todo/lists?$filter=displayName eq '${escape(args.options.name)}'`,
                        headers: {
                            accept: "application/json;odata.metadata=none"
                        },
                        responseType: 'json'
                    };
                    const response = yield request_1.default.get(requestOptions);
                    return response.value && response.value.length === 1 ? response.value[0].id : null;
                }
                return args.options.id;
            });
            const removeList = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const listId = yield getListId();
                    if (!listId) {
                        return Promise.reject(`The list ${args.options.name} cannot be found`);
                    }
                    const requestOptions = {
                        url: `${this.resource}/v1.0/me/todo/lists/${listId}`,
                        headers: {
                            accept: "application/json;odata.metadata=none"
                        },
                        responseType: 'json'
                    };
                    yield request_1.default.delete(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeList();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the task list ${args.options.id || args.options.name}?`
                });
                if (result.continue) {
                    yield removeList();
                }
            }
        });
    }
}
_TodoListRemoveCommand_instances = new WeakSet(), _TodoListRemoveCommand_initTelemetry = function _TodoListRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            name: typeof args.options.name !== 'undefined',
            id: typeof args.options.id !== 'undefined',
            confirm: typeof args.options.confirm !== 'undefined'
        });
    });
}, _TodoListRemoveCommand_initOptions = function _TodoListRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name [name]'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '--confirm'
    });
}, _TodoListRemoveCommand_initOptionSets = function _TodoListRemoveCommand_initOptionSets() {
    this.optionSets.push(['name', 'id']);
};
module.exports = new TodoListRemoveCommand();
//# sourceMappingURL=list-remove.js.map