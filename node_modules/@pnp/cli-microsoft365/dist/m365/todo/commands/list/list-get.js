"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TodoListGetCommand_instances, _TodoListGetCommand_initTelemetry, _TodoListGetCommand_initOptions, _TodoListGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TodoListGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TodoListGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _TodoListGetCommand_instances, "m", _TodoListGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TodoListGetCommand_instances, "m", _TodoListGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TodoListGetCommand_instances, "m", _TodoListGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LIST_GET;
    }
    get description() {
        return 'Gets a specific list of Microsoft To Do task lists';
    }
    defaultProperties() {
        return ['displayName', 'id'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const item = yield this.getList(args.options);
                logger.log(item);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getList(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            if (options.id) {
                requestOptions.url = `${this.resource}/v1.0/me/todo/lists/${options.id}`;
                const result = yield request_1.default.get(requestOptions);
                return result;
            }
            requestOptions.url = `${this.resource}/v1.0/me/todo/lists?$filter=displayName eq '${formatting_1.formatting.encodeQueryParameter(options.name)}'`;
            const result = yield request_1.default.get(requestOptions);
            if (result.value.length === 0) {
                throw `The specified list '${options.name}' does not exist.`;
            }
            return result.value[0];
        });
    }
}
_TodoListGetCommand_instances = new WeakSet(), _TodoListGetCommand_initTelemetry = function _TodoListGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined'
        });
    });
}, _TodoListGetCommand_initOptions = function _TodoListGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    });
}, _TodoListGetCommand_initOptionSets = function _TodoListGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
};
module.exports = new TodoListGetCommand();
//# sourceMappingURL=list-get.js.map