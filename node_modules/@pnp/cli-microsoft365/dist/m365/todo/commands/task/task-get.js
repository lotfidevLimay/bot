"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TodoTaskGetCommand_instances, _TodoTaskGetCommand_initTelemetry, _TodoTaskGetCommand_initOptions, _TodoTaskGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TodoTaskGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TodoTaskGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _TodoTaskGetCommand_instances, "m", _TodoTaskGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TodoTaskGetCommand_instances, "m", _TodoTaskGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TodoTaskGetCommand_instances, "m", _TodoTaskGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.TASK_GET;
    }
    get description() {
        return 'Get a specific task from a Microsoft To Do task list';
    }
    defaultProperties() {
        return ['id', 'title', 'status', 'createdDateTime', 'lastModifiedDateTime'];
    }
    getTodoListId(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.listId) {
                return args.options.listId;
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/me/todo/lists?$filter=displayName eq '${escape(args.options.listName)}'`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            const response = yield request_1.default.get(requestOptions);
            const taskList = response.value[0];
            if (!taskList) {
                throw `The specified task list does not exist`;
            }
            return taskList.id;
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const listId = yield this.getTodoListId(args);
                const requestOptions = {
                    url: `${this.resource}/v1.0/me/todo/lists/${listId}/tasks/${args.options.id}`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json'
                };
                const item = yield request_1.default.get(requestOptions);
                if (args.options.output === 'json') {
                    logger.log(item);
                }
                else {
                    logger.log({
                        id: item.id,
                        title: item.title,
                        status: item.status,
                        createdDateTime: item.createdDateTime,
                        lastModifiedDateTime: item.lastModifiedDateTime
                    });
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TodoTaskGetCommand_instances = new WeakSet(), _TodoTaskGetCommand_initTelemetry = function _TodoTaskGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listName: typeof args.options.listName !== 'undefined'
        });
    });
}, _TodoTaskGetCommand_initOptions = function _TodoTaskGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '--listName [listName]'
    }, {
        option: '--listId [listId]'
    });
}, _TodoTaskGetCommand_initOptionSets = function _TodoTaskGetCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listName']);
};
module.exports = new TodoTaskGetCommand();
//# sourceMappingURL=task-get.js.map