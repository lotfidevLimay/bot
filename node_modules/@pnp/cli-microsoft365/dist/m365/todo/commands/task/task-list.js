"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TodoTaskListCommand_instances, _TodoTaskListCommand_initTelemetry, _TodoTaskListCommand_initOptions, _TodoTaskListCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const odata_1 = require("../../../../utils/odata");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TodoTaskListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TodoTaskListCommand_instances.add(this);
        __classPrivateFieldGet(this, _TodoTaskListCommand_instances, "m", _TodoTaskListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TodoTaskListCommand_instances, "m", _TodoTaskListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TodoTaskListCommand_instances, "m", _TodoTaskListCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.TASK_LIST;
    }
    get description() {
        return 'List tasks from a Microsoft To Do task list';
    }
    defaultProperties() {
        return ['id', 'title', 'status', 'createdDateTime', 'lastModifiedDateTime'];
    }
    getTodoListId(args) {
        if (args.options.listId) {
            return Promise.resolve(args.options.listId);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/me/todo/lists?$filter=displayName eq '${escape(args.options.listName)}'`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions)
            .then(response => {
            const taskList = response.value[0];
            if (!taskList) {
                return Promise.reject(`The specified task list does not exist`);
            }
            return Promise.resolve(taskList.id);
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const listId = yield this.getTodoListId(args);
                const endpoint = `${this.resource}/v1.0/me/todo/lists/${listId}/tasks`;
                const items = yield odata_1.odata.getAllItems(endpoint);
                if (args.options.output === 'json') {
                    logger.log(items);
                }
                else {
                    logger.log(items.map(m => {
                        return {
                            id: m.id,
                            title: m.title,
                            status: m.status,
                            createdDateTime: m.createdDateTime,
                            lastModifiedDateTime: m.lastModifiedDateTime
                        };
                    }));
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TodoTaskListCommand_instances = new WeakSet(), _TodoTaskListCommand_initTelemetry = function _TodoTaskListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listName: typeof args.options.listName !== 'undefined'
        });
    });
}, _TodoTaskListCommand_initOptions = function _TodoTaskListCommand_initOptions() {
    this.options.unshift({
        option: '--listName [listName]'
    }, {
        option: '--listId [listId]'
    });
}, _TodoTaskListCommand_initOptionSets = function _TodoTaskListCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listName']);
};
module.exports = new TodoTaskListCommand();
//# sourceMappingURL=task-list.js.map