"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TodoTaskSetCommand_instances, _TodoTaskSetCommand_initTelemetry, _TodoTaskSetCommand_initOptions, _TodoTaskSetCommand_initValidators, _TodoTaskSetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TodoTaskSetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TodoTaskSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _TodoTaskSetCommand_instances, "m", _TodoTaskSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TodoTaskSetCommand_instances, "m", _TodoTaskSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TodoTaskSetCommand_instances, "m", _TodoTaskSetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TodoTaskSetCommand_instances, "m", _TodoTaskSetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.TASK_SET;
    }
    get description() {
        return 'Update a task in a Microsoft To Do task list';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = `${this.resource}/v1.0`;
            const data = this.mapRequestBody(args.options);
            try {
                const listId = yield this.getTodoListId(args);
                const requestOptions = {
                    url: `${endpoint}/me/todo/lists/${listId}/tasks/${encodeURIComponent(args.options.id)}`,
                    headers: {
                        accept: 'application/json;odata.metadata=none',
                        'Content-Type': 'application/json'
                    },
                    data: data,
                    responseType: 'json'
                };
                const res = yield request_1.default.patch(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getTodoListId(args) {
        if (args.options.listId) {
            return Promise.resolve(args.options.listId);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/me/todo/lists?$filter=displayName eq '${escape(args.options.listName)}'`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions)
            .then(response => {
            const taskList = response.value[0];
            if (!taskList) {
                return Promise.reject(`The specified task list does not exist`);
            }
            return Promise.resolve(taskList.id);
        });
    }
    getDateTimeTimeZone(dateTime) {
        return {
            dateTime: dateTime,
            timeZone: 'Etc/GMT'
        };
    }
    mapRequestBody(options) {
        var _a;
        const requestBody = {};
        if (options.status) {
            requestBody.status = options.status;
        }
        if (options.title) {
            requestBody.title = options.title;
        }
        if (options.importance) {
            requestBody.importance = options.importance.toLowerCase();
        }
        if (options.bodyContentType || options.bodyContent) {
            requestBody.body = {
                content: options.bodyContent,
                contentType: ((_a = options.bodyContentType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || 'text'
            };
        }
        if (options.dueDateTime) {
            requestBody.dueDateTime = this.getDateTimeTimeZone(options.dueDateTime);
        }
        if (options.reminderDateTime) {
            requestBody.reminderDateTime = this.getDateTimeTimeZone(options.reminderDateTime);
        }
        return requestBody;
    }
}
_TodoTaskSetCommand_instances = new WeakSet(), _TodoTaskSetCommand_initTelemetry = function _TodoTaskSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listName: typeof args.options.listName !== 'undefined',
            status: typeof args.options.status !== 'undefined',
            title: typeof args.options.title !== 'undefined',
            bodyContent: typeof args.options.bodyContent !== 'undefined',
            bodyContentType: args.options.bodyContentType,
            dueDateTime: typeof args.options.dueDateTime !== 'undefined',
            importance: args.options.importance,
            reminderDateTime: typeof args.options.reminderDateTime !== 'undefined'
        });
    });
}, _TodoTaskSetCommand_initOptions = function _TodoTaskSetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '-t, --title [title]'
    }, {
        option: '-s, --status [status]',
        autocomplete: ['notStarted', 'inProgress', 'completed', 'waitingOnOthers', 'deferred']
    }, {
        option: '--listName [listName]'
    }, {
        option: '--listId [listId]'
    }, {
        option: '--bodyContent [bodyContent]'
    }, {
        option: '--bodyContentType [bodyContentType]',
        autocomplete: ['text', 'html']
    }, {
        option: '--dueDateTime [dueDateTime]'
    }, {
        option: '--importance [importance]',
        autocomplete: ['low', 'normal', 'high']
    }, {
        option: '--reminderDateTime [reminderDateTime]'
    });
}, _TodoTaskSetCommand_initValidators = function _TodoTaskSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.status &&
            args.options.status !== 'notStarted' &&
            args.options.status !== 'inProgress' &&
            args.options.status !== 'completed' &&
            args.options.status !== 'waitingOnOthers' &&
            args.options.status !== 'deferred') {
            return `${args.options.status} is not a valid value. Allowed values are notStarted|inProgress|completed|waitingOnOthers|deferred`;
        }
        if (args.options.bodyContentType && ['text', 'html'].indexOf(args.options.bodyContentType.toLowerCase()) === -1) {
            return `'${args.options.bodyContentType}' is not a valid value for the bodyContentType option. Allowed values are text|html`;
        }
        if (args.options.importance && ['low', 'normal', 'high'].indexOf(args.options.importance.toLowerCase()) === -1) {
            return `'${args.options.importance}' is not a valid value for the importance option. Allowed values are low|normal|high`;
        }
        if (args.options.dueDateTime && !validation_1.validation.isValidISODateTime(args.options.dueDateTime)) {
            return `'${args.options.dueDateTime}' is not a valid ISO date string`;
        }
        if (args.options.reminderDateTime && !validation_1.validation.isValidISODateTime(args.options.reminderDateTime)) {
            return `'${args.options.reminderDateTime}' is not a valid ISO date string`;
        }
        return true;
    }));
}, _TodoTaskSetCommand_initOptionSets = function _TodoTaskSetCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listName']);
};
module.exports = new TodoTaskSetCommand();
//# sourceMappingURL=task-set.js.map