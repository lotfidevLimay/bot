"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PpSolutionListCommand_instances, _PpSolutionListCommand_initTelemetry, _PpSolutionListCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const powerPlatform_1 = require("../../../../utils/powerPlatform");
const PowerPlatformCommand_1 = require("../../../base/PowerPlatformCommand");
const commands_1 = require("../../commands");
class PpSolutionListCommand extends PowerPlatformCommand_1.default {
    constructor() {
        super();
        _PpSolutionListCommand_instances.add(this);
        __classPrivateFieldGet(this, _PpSolutionListCommand_instances, "m", _PpSolutionListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PpSolutionListCommand_instances, "m", _PpSolutionListCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.SOLUTION_LIST;
    }
    get description() {
        return 'Lists solutions in a given environment.';
    }
    defaultProperties() {
        return ['uniquename', 'version', 'publisher'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving list of solutions for which the user is an admin...`);
            }
            try {
                const dynamicsApiUrl = yield powerPlatform_1.powerPlatform.getDynamicsInstanceApiUrl(args.options.environment, args.options.asAdmin);
                const requestOptions = {
                    url: `${dynamicsApiUrl}/api/data/v9.0/solutions?$filter=isvisible eq true&$expand=publisherid($select=friendlyname)&$select=solutionid,uniquename,version,publisherid,installedon,solutionpackageversion,friendlyname,versionnumber&api-version=9.1`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.get(requestOptions);
                if (!args.options.output || args.options.output === 'json') {
                    logger.log(res.value);
                }
                else {
                    //converted to text friendly output
                    logger.log(res.value.map(i => {
                        return {
                            uniquename: i.uniquename,
                            version: i.version,
                            publisher: i.publisherid.friendlyname
                        };
                    }));
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_PpSolutionListCommand_instances = new WeakSet(), _PpSolutionListCommand_initTelemetry = function _PpSolutionListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            asAdmin: !!args.options.asAdmin
        });
    });
}, _PpSolutionListCommand_initOptions = function _PpSolutionListCommand_initOptions() {
    this.options.unshift({
        option: '-e, --environment <environment>'
    }, {
        option: '-a, --asAdmin'
    });
};
module.exports = new PpSolutionListCommand();
//# sourceMappingURL=solution-list.js.map