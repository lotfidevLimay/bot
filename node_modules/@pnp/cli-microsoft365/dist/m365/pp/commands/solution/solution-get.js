"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PpSolutionGetCommand_instances, _PpSolutionGetCommand_initTelemetry, _PpSolutionGetCommand_initOptions, _PpSolutionGetCommand_initOptionSets, _PpSolutionGetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const powerPlatform_1 = require("../../../../utils/powerPlatform");
const validation_1 = require("../../../../utils/validation");
const PowerPlatformCommand_1 = require("../../../base/PowerPlatformCommand");
const commands_1 = require("../../commands");
class PpSolutionGetCommand extends PowerPlatformCommand_1.default {
    constructor() {
        super();
        _PpSolutionGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _PpSolutionGetCommand_instances, "m", _PpSolutionGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PpSolutionGetCommand_instances, "m", _PpSolutionGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PpSolutionGetCommand_instances, "m", _PpSolutionGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _PpSolutionGetCommand_instances, "m", _PpSolutionGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.SOLUTION_GET;
    }
    get description() {
        return 'Gets a specific solution in a given environment.';
    }
    defaultProperties() {
        return ['uniquename', 'version', 'publisher'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving a specific solution '${args.options.id || args.options.name}'...`);
            }
            try {
                const dynamicsApiUrl = yield powerPlatform_1.powerPlatform.getDynamicsInstanceApiUrl(args.options.environment, args.options.asAdmin);
                const res = yield this.getSolution(dynamicsApiUrl, args.options);
                if (!args.options.output || args.options.output === 'json') {
                    logger.log(res);
                }
                else {
                    // Converted to text friendly output
                    logger.log({
                        uniquename: res.uniquename,
                        version: res.version,
                        publisher: res.publisherid.friendlyname
                    });
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getSolution(dynamicsApiUrl, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            if (options.id) {
                requestOptions.url = `${dynamicsApiUrl}/api/data/v9.0/solutions(${options.id})?$expand=publisherid($select=friendlyname)&$select=solutionid,uniquename,version,publisherid,installedon,solutionpackageversion,friendlyname,versionnumber&api-version=9.1`;
                const result = yield request_1.default.get(requestOptions);
                return result;
            }
            requestOptions.url = `${dynamicsApiUrl}/api/data/v9.0/solutions?$filter=isvisible eq true and uniquename eq \'${options.name}\'&$expand=publisherid($select=friendlyname)&$select=solutionid,uniquename,version,publisherid,installedon,solutionpackageversion,friendlyname,versionnumber&api-version=9.1`;
            const result = yield request_1.default.get(requestOptions);
            if (result.value.length === 0) {
                throw `The specified solution '${options.name}' does not exist.`;
            }
            return result.value[0];
        });
    }
}
_PpSolutionGetCommand_instances = new WeakSet(), _PpSolutionGetCommand_initTelemetry = function _PpSolutionGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined',
            asAdmin: !!args.options.asAdmin
        });
    });
}, _PpSolutionGetCommand_initOptions = function _PpSolutionGetCommand_initOptions() {
    this.options.unshift({
        option: '-e, --environment <environment>'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '-a, --asAdmin'
    });
}, _PpSolutionGetCommand_initOptionSets = function _PpSolutionGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
}, _PpSolutionGetCommand_initValidators = function _PpSolutionGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id && !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new PpSolutionGetCommand();
//# sourceMappingURL=solution-get.js.map