"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PpManagementAppAddCommand_instances, _PpManagementAppAddCommand_initTelemetry, _PpManagementAppAddCommand_initOptions, _PpManagementAppAddCommand_initValidators, _PpManagementAppAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const PowerPlatformCommand_1 = require("../../../base/PowerPlatformCommand");
const commands_1 = require("../../commands");
class PpManagementAppAddCommand extends PowerPlatformCommand_1.default {
    constructor() {
        super();
        _PpManagementAppAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _PpManagementAppAddCommand_instances, "m", _PpManagementAppAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PpManagementAppAddCommand_instances, "m", _PpManagementAppAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PpManagementAppAddCommand_instances, "m", _PpManagementAppAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _PpManagementAppAddCommand_instances, "m", _PpManagementAppAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.MANAGEMENTAPP_ADD;
    }
    get description() {
        return 'Register management application for Power Platform';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const appId = yield this.getAppId(args);
                const requestOptions = {
                    // This should be refactored once we implement a PowerPlatform base class as api.bap will differ between envs.
                    url: `${this.resource}/providers/Microsoft.BusinessAppPlatform/adminApplications/${appId}?api-version=2020-06-01`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.put(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getAppId(args) {
        if (args.options.appId) {
            return Promise.resolve(args.options.appId);
        }
        const { objectId, name } = args.options;
        const filter = objectId ?
            `id eq '${encodeURIComponent(objectId)}'` :
            `displayName eq '${encodeURIComponent(name)}'`;
        const requestOptions = {
            url: `https://graph.microsoft.com/v1.0/myorganization/applications?$filter=${filter}&$select=appId`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get((requestOptions))
            .then((aadApps) => {
            if (aadApps.value.length === 0) {
                const applicationIdentifier = objectId ? `ID ${objectId}` : `name ${name}`;
                return Promise.reject(`No Azure AD application registration with ${applicationIdentifier} found`);
            }
            if (aadApps.value.length === 1 && aadApps.value[0].appId) {
                return Promise.resolve(aadApps.value[0].appId);
            }
            return Promise.reject(`Multiple Azure AD application registration with name ${name} found. Please disambiguate (app IDs): ${aadApps.value.map(a => a.appId).join(', ')}`);
        });
    }
}
_PpManagementAppAddCommand_instances = new WeakSet(), _PpManagementAppAddCommand_initTelemetry = function _PpManagementAppAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            objectId: typeof args.options.objectId !== 'undefined',
            name: typeof args.options.name !== 'undefined'
        });
    });
}, _PpManagementAppAddCommand_initOptions = function _PpManagementAppAddCommand_initOptions() {
    this.options.unshift({ option: '--appId [appId]' }, { option: '--objectId [objectId]' }, { option: '--name [name]' });
}, _PpManagementAppAddCommand_initValidators = function _PpManagementAppAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        if (args.options.objectId && !validation_1.validation.isValidGuid(args.options.objectId)) {
            return `${args.options.objectId} is not a valid GUID`;
        }
        return true;
    }));
}, _PpManagementAppAddCommand_initOptionSets = function _PpManagementAppAddCommand_initOptionSets() {
    this.optionSets.push(['appId', 'objectId', 'name']);
};
module.exports = new PpManagementAppAddCommand();
//# sourceMappingURL=managementapp-add.js.map