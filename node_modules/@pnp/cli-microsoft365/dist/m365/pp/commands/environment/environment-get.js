"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PpEnvironmentGetCommand_instances, _PpEnvironmentGetCommand_initTelemetry, _PpEnvironmentGetCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const PowerPlatformCommand_1 = require("../../../base/PowerPlatformCommand");
const commands_1 = require("../../commands");
class PpEnvironmentGetCommand extends PowerPlatformCommand_1.default {
    constructor() {
        super();
        _PpEnvironmentGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _PpEnvironmentGetCommand_instances, "m", _PpEnvironmentGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PpEnvironmentGetCommand_instances, "m", _PpEnvironmentGetCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.ENVIRONMENT_GET;
    }
    get description() {
        return 'Gets information about the specified Power Platform environment';
    }
    defaultProperties() {
        return ['name', 'id'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `${this.resource}/providers/Microsoft.BusinessAppPlatform/environments`;
            if (args.options.asAdmin) {
                url = `${this.resource}/providers/Microsoft.BusinessAppPlatform/scopes/admin/environments`;
            }
            const requestOptions = {
                url: `${url}?api-version=2020-10-01`,
                headers: {
                    accept: 'application/json'
                },
                responseType: 'json'
            };
            const res = yield request_1.default.get(requestOptions);
            const environmentItem = res.value.filter((env) => {
                return env.name === args.options.name;
            })[0];
            if (!environmentItem) {
                throw `The specified Power Platform environment does not exist`;
            }
            logger.log(environmentItem);
        });
    }
}
_PpEnvironmentGetCommand_instances = new WeakSet(), _PpEnvironmentGetCommand_initTelemetry = function _PpEnvironmentGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            asAdmin: !!args.options.asAdmin
        });
    });
}, _PpEnvironmentGetCommand_initOptions = function _PpEnvironmentGetCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name <name>'
    }, {
        option: '-a, --asAdmin'
    });
};
module.exports = new PpEnvironmentGetCommand();
//# sourceMappingURL=environment-get.js.map