"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerTenantSettingsSetCommand_instances, _PlannerTenantSettingsSetCommand_initTelemetry, _PlannerTenantSettingsSetCommand_initOptions, _PlannerTenantSettingsSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const PlannerCommand_1 = require("../../../base/PlannerCommand");
const commands_1 = require("../../commands");
class PlannerTenantSettingsSetCommand extends PlannerCommand_1.default {
    constructor() {
        super();
        _PlannerTenantSettingsSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerTenantSettingsSetCommand_instances, "m", _PlannerTenantSettingsSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerTenantSettingsSetCommand_instances, "m", _PlannerTenantSettingsSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerTenantSettingsSetCommand_instances, "m", _PlannerTenantSettingsSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.TENANT_SETTINGS_SET;
    }
    get description() {
        return 'Sets Microsoft Planner configuration of the tenant';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: `${this.resource}/taskAPI/tenantAdminSettings/Settings`,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    prefer: 'return=representation'
                },
                responseType: 'json',
                data: {
                    isPlannerAllowed: args.options.isPlannerAllowed,
                    allowCalendarSharing: args.options.allowCalendarSharing,
                    allowTenantMoveWithDataLoss: args.options.allowTenantMoveWithDataLoss,
                    allowTenantMoveWithDataMigration: args.options.allowTenantMoveWithDataMigration,
                    allowRosterCreation: args.options.allowRosterCreation,
                    allowPlannerMobilePushNotifications: args.options.allowPlannerMobilePushNotifications
                }
            };
            try {
                const result = yield request_1.default.patch(requestOptions);
                logger.log(result);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_PlannerTenantSettingsSetCommand_instances = new WeakSet(), _PlannerTenantSettingsSetCommand_initTelemetry = function _PlannerTenantSettingsSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            isPlannerAllowed: typeof args.options.isPlannerAllowed !== 'undefined',
            allowCalendarSharing: typeof args.options.allowCalendarSharing !== 'undefined',
            allowTenantMoveWithDataLoss: typeof args.options.allowTenantMoveWithDataLoss !== 'undefined',
            allowTenantMoveWithDataMigration: typeof args.options.allowTenantMoveWithDataMigration !== 'undefined',
            allowRosterCreation: typeof args.options.allowRosterCreation !== 'undefined',
            allowPlannerMobilePushNotifications: typeof args.options.allowPlannerMobilePushNotifications !== 'undefined'
        });
    });
}, _PlannerTenantSettingsSetCommand_initOptions = function _PlannerTenantSettingsSetCommand_initOptions() {
    this.options.unshift({
        option: '--isPlannerAllowed [isPlannerAllowed]',
        autocomplete: ['true', 'false']
    }, {
        option: '--allowCalendarSharing [allowCalendarSharing]',
        autocomplete: ['true', 'false']
    }, {
        option: '--allowTenantMoveWithDataLoss [allowTenantMoveWithDataLoss]',
        autocomplete: ['true', 'false']
    }, {
        option: '--allowTenantMoveWithDataMigration [allowTenantMoveWithDataMigration]',
        autocomplete: ['true', 'false']
    }, {
        option: '--allowRosterCreation [allowRosterCreation]',
        autocomplete: ['true', 'false']
    }, {
        option: '--allowPlannerMobilePushNotifications [allowPlannerMobilePushNotifications]',
        autocomplete: ['true', 'false']
    });
}, _PlannerTenantSettingsSetCommand_initValidators = function _PlannerTenantSettingsSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const optionsArray = [
            args.options.isPlannerAllowed, args.options.allowCalendarSharing, args.options.allowTenantMoveWithDataLoss,
            args.options.allowTenantMoveWithDataMigration, args.options.allowRosterCreation, args.options.allowPlannerMobilePushNotifications
        ];
        if (optionsArray.every(o => typeof o === 'undefined')) {
            return 'You must specify at least one option';
        }
        for (const option of optionsArray) {
            if (typeof option !== 'undefined' && !validation_1.validation.isValidBoolean(option)) {
                return `Value '${option}' is not a valid boolean`;
            }
        }
        return true;
    }));
};
module.exports = new PlannerTenantSettingsSetCommand();
//# sourceMappingURL=tenant-settings-set.js.map