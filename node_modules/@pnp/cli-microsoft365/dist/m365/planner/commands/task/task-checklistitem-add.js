"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerTaskChecklistItemAddCommand_instances, _PlannerTaskChecklistItemAddCommand_initTelemetry, _PlannerTaskChecklistItemAddCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const Auth_1 = require("../../../../Auth");
const request_1 = require("../../../../request");
const accessToken_1 = require("../../../../utils/accessToken");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerTaskChecklistItemAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerTaskChecklistItemAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerTaskChecklistItemAddCommand_instances, "m", _PlannerTaskChecklistItemAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerTaskChecklistItemAddCommand_instances, "m", _PlannerTaskChecklistItemAddCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.TASK_CHECKLISTITEM_ADD;
    }
    get description() {
        return 'Adds a new checklist item to a Planner task.';
    }
    defaultProperties() {
        return ['id', 'title', 'isChecked'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (accessToken_1.accessToken.isAppOnlyAccessToken(Auth_1.default.service.accessTokens[this.resource].accessToken)) {
                this.handleError('This command does not support application permissions.');
                return;
            }
            try {
                const etag = yield this.getTaskDetailsEtag(args.options.taskId);
                const body = {
                    checklist: {
                        // Generate new GUID for new task checklist item
                        [(0, uuid_1.v4)()]: {
                            '@odata.type': 'microsoft.graph.plannerChecklistItem',
                            title: args.options.title,
                            isChecked: args.options.isChecked || false
                        }
                    }
                };
                const requestOptions = {
                    url: `${this.resource}/v1.0/planner/tasks/${encodeURIComponent(args.options.taskId)}/details`,
                    headers: {
                        accept: 'application/json;odata.metadata=none',
                        prefer: 'return=representation',
                        'if-match': etag
                    },
                    responseType: 'json',
                    data: body
                };
                const result = yield request_1.default.patch(requestOptions);
                if (args.options.output === 'json') {
                    logger.log(result.checklist);
                }
                else {
                    // Transform checklist item object to text friendly format
                    const output = Object.getOwnPropertyNames(result.checklist).map(prop => (Object.assign({ id: prop }, result.checklist[prop])));
                    logger.log(output);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getTaskDetailsEtag(taskId) {
        const requestOptions = {
            url: `${this.resource}/v1.0/planner/tasks/${encodeURIComponent(taskId)}/details`,
            headers: {
                accept: 'application/json;odata.metadata=minimal'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((task) => task['@odata.etag'], () => Promise.reject('Planner task was not found.'));
    }
}
_PlannerTaskChecklistItemAddCommand_instances = new WeakSet(), _PlannerTaskChecklistItemAddCommand_initTelemetry = function _PlannerTaskChecklistItemAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            isChecked: args.options.isChecked || false
        });
    });
}, _PlannerTaskChecklistItemAddCommand_initOptions = function _PlannerTaskChecklistItemAddCommand_initOptions() {
    this.options.unshift({ option: '-i, --taskId <taskId>' }, { option: '-t, --title <title>' }, { option: '--isChecked' });
};
module.exports = new PlannerTaskChecklistItemAddCommand();
//# sourceMappingURL=task-checklistitem-add.js.map