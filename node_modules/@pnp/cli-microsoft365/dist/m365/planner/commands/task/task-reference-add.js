"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerTaskReferenceAddCommand_instances, _PlannerTaskReferenceAddCommand_initTelemetry, _PlannerTaskReferenceAddCommand_initOptions, _PlannerTaskReferenceAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerTaskReferenceAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerTaskReferenceAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerTaskReferenceAddCommand_instances, "m", _PlannerTaskReferenceAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerTaskReferenceAddCommand_instances, "m", _PlannerTaskReferenceAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerTaskReferenceAddCommand_instances, "m", _PlannerTaskReferenceAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.TASK_REFERENCE_ADD;
    }
    get description() {
        return 'Adds a new reference to a Planner task';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const etag = yield this.getTaskDetailsEtag(args.options.taskId);
                const requestOptionsTaskDetails = {
                    url: `${this.resource}/v1.0/planner/tasks/${encodeURIComponent(args.options.taskId)}/details`,
                    headers: {
                        'accept': 'application/json;odata.metadata=none',
                        'If-Match': etag,
                        'Prefer': 'return=representation'
                    },
                    responseType: 'json',
                    data: {
                        references: {
                            [formatting_1.formatting.openTypesEncoder(args.options.url)]: Object.assign(Object.assign({ '@odata.type': 'microsoft.graph.plannerExternalReference', previewPriority: ' !' }, (args.options.alias && { alias: args.options.alias })), (args.options.type && { type: args.options.type }))
                        }
                    }
                };
                const res = yield request_1.default.patch(requestOptionsTaskDetails);
                logger.log(res.references);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getTaskDetailsEtag(taskId) {
        const requestOptions = {
            url: `${this.resource}/v1.0/planner/tasks/${encodeURIComponent(taskId)}/details`,
            headers: {
                accept: 'application/json'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((response) => response['@odata.etag']);
    }
}
_PlannerTaskReferenceAddCommand_instances = new WeakSet(), _PlannerTaskReferenceAddCommand_initTelemetry = function _PlannerTaskReferenceAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            alias: typeof args.options.alias !== 'undefined',
            type: args.options.type
        });
    });
}, _PlannerTaskReferenceAddCommand_initOptions = function _PlannerTaskReferenceAddCommand_initOptions() {
    this.options.unshift({ option: '-i, --taskId <taskId>' }, { option: '-u, --url <url>' }, { option: '--alias [alias]' }, {
        option: '--type [type]',
        autocomplete: ['PowerPoint', 'Word', 'Excel', 'Other']
    });
}, _PlannerTaskReferenceAddCommand_initValidators = function _PlannerTaskReferenceAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.type && ['powerpoint', 'word', 'excel', 'other'].indexOf(args.options.type.toLocaleLowerCase()) === -1) {
            return `${args.options.type} is not a valid type value. Allowed values PowerPoint|Word|Excel|Other`;
        }
        return true;
    }));
};
module.exports = new PlannerTaskReferenceAddCommand();
//# sourceMappingURL=task-reference-add.js.map