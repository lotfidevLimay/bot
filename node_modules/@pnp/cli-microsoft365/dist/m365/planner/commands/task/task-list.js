"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerTaskListCommand_instances, _PlannerTaskListCommand_initTelemetry, _PlannerTaskListCommand_initOptions, _PlannerTaskListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const request_1 = require("../../../../request");
const accessToken_1 = require("../../../../utils/accessToken");
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const planner_1 = require("../../../../utils/planner");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerTaskListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerTaskListCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerTaskListCommand_instances, "m", _PlannerTaskListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerTaskListCommand_instances, "m", _PlannerTaskListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerTaskListCommand_instances, "m", _PlannerTaskListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.TASK_LIST;
    }
    get description() {
        return 'Lists planner tasks in a bucket, plan, or tasks for the currently logged in user';
    }
    defaultProperties() {
        return ['id', 'title', 'startDateTime', 'dueDateTime', 'completedDateTime'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.planName) {
                args.options.planTitle = args.options.planName;
                this.warn(logger, `Option 'planName' is deprecated. Please use 'planTitle' instead`);
            }
            if (accessToken_1.accessToken.isAppOnlyAccessToken(Auth_1.default.service.accessTokens[this.resource].accessToken)) {
                this.handleError('This command does not support application permissions.');
                return;
            }
            const bucketName = args.options.bucketName;
            let bucketId = args.options.bucketId;
            const planTitle = args.options.planTitle;
            let planId = args.options.planId;
            let taskItems = [];
            if (bucketId || bucketName) {
                try {
                    bucketId = yield this.getBucketId(args);
                    taskItems = yield odata_1.odata.getAllItems(`${this.resource}/v1.0/planner/buckets/${bucketId}/tasks`);
                    const betaTasks = yield odata_1.odata.getAllItems(`${this.resource}/beta/planner/buckets/${bucketId}/tasks`);
                    logger.log(this.mergeTaskPriority(taskItems, betaTasks));
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            }
            else if (planId || planTitle) {
                try {
                    planId = yield this.getPlanId(args);
                    taskItems = yield odata_1.odata.getAllItems(`${this.resource}/v1.0/planner/plans/${planId}/tasks`);
                    const betaTasks = yield odata_1.odata.getAllItems(`${this.resource}/beta/planner/plans/${planId}/tasks`);
                    logger.log(this.mergeTaskPriority(taskItems, betaTasks));
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            }
            else {
                try {
                    taskItems = yield odata_1.odata.getAllItems(`${this.resource}/v1.0/me/planner/tasks`);
                    const betaTasks = yield odata_1.odata.getAllItems(`${this.resource}/beta/me/planner/tasks`);
                    logger.log(this.mergeTaskPriority(taskItems, betaTasks));
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            }
        });
    }
    getBucketId(args) {
        if (args.options.bucketId) {
            return Promise.resolve(encodeURIComponent(args.options.bucketId));
        }
        return this
            .getPlanId(args)
            .then((planId) => {
            const requestOptions = {
                url: `${this.resource}/v1.0/planner/plans/${planId}/buckets`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        })
            .then(response => {
            const bucket = response.value.find(val => val.name === args.options.bucketName);
            if (!bucket) {
                return Promise.reject(`The specified bucket does not exist`);
            }
            return Promise.resolve(bucket.id);
        });
    }
    getPlanId(args) {
        if (args.options.planId) {
            return Promise.resolve(encodeURIComponent(args.options.planId));
        }
        return this
            .getGroupId(args)
            .then((groupId) => planner_1.planner.getPlanByTitle(args.options.planTitle, groupId))
            .then(plan => plan.id);
    }
    getGroupId(args) {
        if (args.options.ownerGroupId) {
            return Promise.resolve(encodeURIComponent(args.options.ownerGroupId));
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.ownerGroupName)
            .then(group => group.id);
    }
    mergeTaskPriority(taskItems, betaTaskItems) {
        const findBetaTask = (id) => betaTaskItems.find(task => task.id === id);
        taskItems.forEach(task => {
            const betaTaskItem = findBetaTask(task.id);
            if (betaTaskItem) {
                const { priority } = betaTaskItem;
                Object.assign(task, { priority });
            }
        });
        return taskItems;
    }
}
_PlannerTaskListCommand_instances = new WeakSet(), _PlannerTaskListCommand_initTelemetry = function _PlannerTaskListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            bucketId: typeof args.options.bucketId !== 'undefined',
            bucketName: typeof args.options.bucketName !== 'undefined',
            planId: typeof args.options.planId !== 'undefined',
            planName: typeof args.options.planName !== 'undefined',
            planTitle: typeof args.options.planTitle !== 'undefined',
            ownerGroupId: typeof args.options.ownerGroupId !== 'undefined',
            ownerGroupName: typeof args.options.ownerGroupName !== 'undefined'
        });
    });
}, _PlannerTaskListCommand_initOptions = function _PlannerTaskListCommand_initOptions() {
    this.options.unshift({
        option: '--bucketId [bucketId]'
    }, {
        option: '--bucketName [bucketName]'
    }, {
        option: '--planId [planId]'
    }, {
        option: '--planName [planName]'
    }, {
        option: '--planTitle [planTitle]'
    }, {
        option: '--ownerGroupId [ownerGroupId]'
    }, {
        option: '--ownerGroupName [ownerGroupName]'
    });
}, _PlannerTaskListCommand_initValidators = function _PlannerTaskListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.bucketId && args.options.bucketName) {
            return 'To retrieve tasks from a bucket, specify bucketId or bucketName, but not both';
        }
        if (args.options.bucketName && !args.options.planId && !args.options.planName && !args.options.planTitle) {
            return 'Specify either planId or planTitle when using bucketName';
        }
        if (args.options.planId && (args.options.planName || args.options.planTitle)) {
            return 'Specify either planId or planTitle but not both';
        }
        if ((args.options.planName || args.options.planTitle) && !args.options.ownerGroupId && !args.options.ownerGroupName) {
            return 'Specify either ownerGroupId or ownerGroupName when using planTitle';
        }
        if ((args.options.planName || args.options.planTitle) && args.options.ownerGroupId && args.options.ownerGroupName) {
            return 'Specify either ownerGroupId or ownerGroupName when using planTitle but not both';
        }
        if (args.options.ownerGroupId && !validation_1.validation.isValidGuid(args.options.ownerGroupId)) {
            return `${args.options.ownerGroupId} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new PlannerTaskListCommand();
//# sourceMappingURL=task-list.js.map