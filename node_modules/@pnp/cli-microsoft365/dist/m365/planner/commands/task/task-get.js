"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerTaskGetCommand_instances, _PlannerTaskGetCommand_initTelemetry, _PlannerTaskGetCommand_initOptions, _PlannerTaskGetCommand_initValidators, _PlannerTaskGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const request_1 = require("../../../../request");
const accessToken_1 = require("../../../../utils/accessToken");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const planner_1 = require("../../../../utils/planner");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerTaskGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerTaskGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerTaskGetCommand_instances, "m", _PlannerTaskGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerTaskGetCommand_instances, "m", _PlannerTaskGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerTaskGetCommand_instances, "m", _PlannerTaskGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _PlannerTaskGetCommand_instances, "m", _PlannerTaskGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.TASK_GET;
    }
    alias() {
        return [commands_1.default.TASK_DETAILS_GET];
    }
    get description() {
        return 'Retrieve the specified planner task';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.showDeprecationWarning(logger, commands_1.default.TASK_DETAILS_GET, commands_1.default.TASK_GET);
            if (args.options.planName) {
                args.options.planTitle = args.options.planName;
                this.warn(logger, `Option 'planName' is deprecated. Please use 'planTitle' instead`);
            }
            if (accessToken_1.accessToken.isAppOnlyAccessToken(Auth_1.default.service.accessTokens[this.resource].accessToken)) {
                this.handleError('This command does not support application permissions.');
                return;
            }
            // This check has been added to support task details get alias. Needs to be removed when deprecation is removed. 
            if (args.options.taskId) {
                args.options.id = args.options.taskId;
            }
            try {
                const taskId = yield this.getTaskId(args.options);
                const task = yield this.getTask(taskId);
                const res = yield this.getTaskDetails(task);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getTask(taskId) {
        const requestOptions = {
            url: `${this.resource}/v1.0/planner/tasks/${encodeURIComponent(taskId)}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    getTaskDetails(task) {
        const requestOptionsTaskDetails = {
            url: `${this.resource}/v1.0/planner/tasks/${task.id}/details`,
            headers: {
                'accept': 'application/json;odata.metadata=none',
                'Prefer': 'return=representation'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptionsTaskDetails)
            .then(taskDetails => {
            return Object.assign(Object.assign({}, task), taskDetails);
        });
    }
    getTaskId(options) {
        if (options.id) {
            return Promise.resolve(options.id);
        }
        return this
            .getBucketId(options)
            .then(bucketId => {
            const requestOptions = {
                url: `${this.resource}/v1.0/planner/buckets/${bucketId}/tasks?$select=id,title`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        })
            .then((response) => {
            const title = options.title;
            const tasks = response.value.filter(val => { var _a; return ((_a = val.title) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === title.toLocaleLowerCase(); });
            if (!tasks.length) {
                return Promise.reject(`The specified task ${options.title} does not exist`);
            }
            if (tasks.length > 1) {
                return Promise.reject(`Multiple tasks with title ${options.title} found: ${tasks.map(x => x.id)}`);
            }
            return Promise.resolve(tasks[0].id);
        });
    }
    getBucketId(options) {
        if (options.bucketId) {
            return Promise.resolve(options.bucketId);
        }
        return this
            .getPlanId(options)
            .then(planId => {
            const requestOptions = {
                url: `${this.resource}/v1.0/planner/plans/${planId}/buckets?$select=id,name`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        })
            .then((response) => {
            const bucketName = options.bucketName;
            const buckets = response.value.filter(val => { var _a; return ((_a = val.name) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === bucketName.toLocaleLowerCase(); });
            if (!buckets.length) {
                return Promise.reject(`The specified bucket ${options.bucketName} does not exist`);
            }
            if (buckets.length > 1) {
                return Promise.reject(`Multiple buckets with name ${options.bucketName} found: ${buckets.map(x => x.id)}`);
            }
            return Promise.resolve(buckets[0].id);
        });
    }
    getPlanId(options) {
        if (options.planId) {
            return Promise.resolve(options.planId);
        }
        return this
            .getGroupId(options)
            .then(groupId => planner_1.planner.getPlanByTitle(options.planTitle, groupId))
            .then(plan => plan.id);
    }
    getGroupId(options) {
        if (options.ownerGroupId) {
            return Promise.resolve(options.ownerGroupId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(options.ownerGroupName)
            .then(group => group.id);
    }
}
_PlannerTaskGetCommand_instances = new WeakSet(), _PlannerTaskGetCommand_initTelemetry = function _PlannerTaskGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            title: typeof args.options.title !== 'undefined',
            bucketId: typeof args.options.bucketId !== 'undefined',
            bucketName: typeof args.options.bucketName !== 'undefined',
            planId: typeof args.options.planId !== 'undefined',
            planName: typeof args.options.planName !== 'undefined',
            ownerGroupId: typeof args.options.ownerGroupId !== 'undefined',
            ownerGroupName: typeof args.options.ownerGroupName !== 'undefined'
        });
    });
}, _PlannerTaskGetCommand_initOptions = function _PlannerTaskGetCommand_initOptions() {
    this.options.unshift({ option: '--taskId [taskId]' }, // This option has been added to support task details get alias. Needs to be removed when deprecation is removed. 
    { option: '-i, --id [id]' }, { option: '-t, --title [title]' }, { option: '--bucketId [bucketId]' }, { option: '--bucketName [bucketName]' }, { option: '--planId [planId]' }, { option: '--planName [planName]' }, { option: '--planTitle [planTitle]' }, { option: '--ownerGroupId [ownerGroupId]' }, { option: '--ownerGroupName [ownerGroupName]' });
}, _PlannerTaskGetCommand_initValidators = function _PlannerTaskGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id) {
            if (args.options.bucketId || args.options.bucketName ||
                args.options.planId || args.options.planName || args.options.planTitle ||
                args.options.ownerGroupId || args.options.ownerGroupName) {
                return 'Don\'t specify bucketId, bucketName, planId, planTitle, ownerGroupId or ownerGroupName when using id';
            }
        }
        if (args.options.title && !args.options.bucketId && !args.options.bucketName) {
            return 'Specify either bucketId or bucketName when using title';
        }
        if (args.options.title && args.options.bucketId && args.options.bucketName) {
            return 'Specify either bucketId or bucketName when using title but not both';
        }
        if (args.options.bucketName && !args.options.planId && !args.options.planName && !args.options.planTitle) {
            return 'Specify either planId or planTitle when using bucketName';
        }
        if (args.options.bucketName && args.options.planId && (args.options.planName || args.options.planTitle)) {
            return 'Specify either planId or planTitle when using bucketName but not both';
        }
        if ((args.options.planName || args.options.planTitle) && !args.options.ownerGroupId && !args.options.ownerGroupName) {
            return 'Specify either ownerGroupId or ownerGroupName when using planTitle';
        }
        if ((args.options.planName || args.options.planTitle) && args.options.ownerGroupId && args.options.ownerGroupName) {
            return 'Specify either ownerGroupId or ownerGroupName when using planTitle but not both';
        }
        if (args.options.ownerGroupId && !validation_1.validation.isValidGuid(args.options.ownerGroupId)) {
            return `${args.options.ownerGroupId} is not a valid GUID`;
        }
        return true;
    }));
}, _PlannerTaskGetCommand_initOptionSets = function _PlannerTaskGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'title']);
};
module.exports = new PlannerTaskGetCommand();
//# sourceMappingURL=task-get.js.map