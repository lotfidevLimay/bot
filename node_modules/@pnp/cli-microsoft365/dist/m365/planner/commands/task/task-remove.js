"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerTaskRemoveCommand_instances, _PlannerTaskRemoveCommand_initTelemetry, _PlannerTaskRemoveCommand_initOptions, _PlannerTaskRemoveCommand_initValidators, _PlannerTaskRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const aadGroup_1 = require("../../../../utils/aadGroup");
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const planner_1 = require("../../../../utils/planner");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerTaskRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerTaskRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerTaskRemoveCommand_instances, "m", _PlannerTaskRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerTaskRemoveCommand_instances, "m", _PlannerTaskRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerTaskRemoveCommand_instances, "m", _PlannerTaskRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _PlannerTaskRemoveCommand_instances, "m", _PlannerTaskRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.TASK_REMOVE;
    }
    get description() {
        return 'Removes the Microsoft Planner task from a plan';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeTask = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const task = yield this.getTask(args.options);
                    const requestOptions = {
                        url: `${this.resource}/v1.0/planner/tasks/${task.id}`,
                        headers: {
                            accept: 'application/json;odata.metadata=none',
                            'if-match': task['@odata.etag']
                        },
                        responseType: 'json'
                    };
                    yield request_1.default.delete(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeTask();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the task ${args.options.id || args.options.title}?`
                });
                if (result.continue) {
                    yield removeTask();
                }
            }
        });
    }
    getTask(options) {
        const { id, title } = options;
        if (id) {
            const requestOptions = {
                url: `${this.resource}/v1.0/planner/tasks/${id}`,
                headers: {
                    accept: 'application/json'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        }
        return this
            .getBucketId(options)
            .then(bucketId => {
            // $filter is not working on the buckets/{bucketId}/tasks endpoint, hence it is not being used.
            return odata_1.odata.getAllItems(`${this.resource}/v1.0/planner/buckets/${bucketId}/tasks?$select=title,id`, 'minimal');
        })
            .then(tasks => {
            const filteredtasks = tasks.filter(b => title.toLocaleLowerCase() === b.title.toLocaleLowerCase());
            if (filteredtasks.length === 0) {
                return Promise.reject(`The specified task ${title} does not exist`);
            }
            if (filteredtasks.length > 1) {
                return Promise.reject(`Multiple tasks with title ${title} found: Please disambiguate: ${os.EOL}${filteredtasks.map(f => `- ${f.id}`).join(os.EOL)}`);
            }
            return Promise.resolve(filteredtasks[0]);
        });
    }
    getBucketId(options) {
        const { bucketId, bucketName } = options;
        if (bucketId) {
            return Promise.resolve(bucketId);
        }
        return this
            .getPlanId(options)
            .then(planId => {
            const requestOptions = {
                url: `${this.resource}/v1.0/planner/plans/${planId}/buckets?$select=id,name`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        })
            .then((buckets) => {
            const filteredBuckets = buckets.value.filter(b => bucketName.toLocaleLowerCase() === b.name.toLocaleLowerCase());
            if (filteredBuckets.length === 0) {
                return Promise.reject(`The specified bucket ${bucketName} does not exist`);
            }
            if (filteredBuckets.length > 1) {
                return Promise.reject(`Multiple buckets with name ${bucketName} found: Please disambiguate:${os.EOL}${filteredBuckets.map(f => `- ${f.id}`).join(os.EOL)}`);
            }
            return Promise.resolve(filteredBuckets[0].id);
        });
    }
    getPlanId(options) {
        const { planId, planTitle } = options;
        if (planId) {
            return Promise.resolve(planId);
        }
        return this
            .getGroupId(options)
            .then(groupId => planner_1.planner.getPlanByTitle(planTitle, groupId))
            .then(plan => plan.id);
    }
    getGroupId(options) {
        const { ownerGroupId, ownerGroupName } = options;
        if (ownerGroupId) {
            return Promise.resolve(ownerGroupId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(ownerGroupName)
            .then(group => group.id);
    }
}
_PlannerTaskRemoveCommand_instances = new WeakSet(), _PlannerTaskRemoveCommand_initTelemetry = function _PlannerTaskRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            title: typeof args.options.title !== 'undefined',
            bucketId: typeof args.options.bucketId !== 'undefined',
            bucketName: typeof args.options.bucketName !== 'undefined',
            planId: typeof args.options.planId !== 'undefined',
            planTitle: typeof args.options.planTitle !== 'undefined',
            ownerGroupId: typeof args.options.ownerGroupId !== 'undefined',
            ownerGroupName: typeof args.options.ownerGroupName !== 'undefined',
            confirm: !!args.options.confirm
        });
    });
}, _PlannerTaskRemoveCommand_initOptions = function _PlannerTaskRemoveCommand_initOptions() {
    this.options.unshift({ option: '-i, --id [id]' }, { option: '-t, --title [title]' }, { option: '--bucketId [bucketId]' }, { option: '--bucketName [bucketName]' }, { option: '--planId [planId]' }, { option: '--planTitle [planTitle]' }, { option: '--ownerGroupId [ownerGroupId]' }, { option: '--ownerGroupName [ownerGroupName]' }, { option: '--confirm' });
}, _PlannerTaskRemoveCommand_initValidators = function _PlannerTaskRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id) {
            if (args.options.bucketId || args.options.bucketName || args.options.planId || args.options.planTitle || args.options.ownerGroupId || args.options.ownerGroupName) {
                return 'Don\'t specify bucketId,bucketName, planId, planTitle, ownerGroupId or ownerGroupName when using id';
            }
        }
        if (args.options.title) {
            if (!args.options.bucketId && !args.options.bucketName) {
                return 'Specify either bucketId or bucketName when using title';
            }
            if (args.options.bucketId && args.options.bucketName) {
                return 'Specify either bucketId or bucketName when using title but not both';
            }
            if (args.options.bucketName) {
                if (!args.options.planId && !args.options.planTitle) {
                    return 'Specify either planId or planTitle when using bucketName';
                }
                if (args.options.planId && args.options.planTitle) {
                    return 'Specify either planId or planTitle when using bucketName but not both';
                }
            }
            if (args.options.planTitle) {
                if (!args.options.ownerGroupId && !args.options.ownerGroupName) {
                    return 'Specify either ownerGroupId or ownerGroupName when using planTitle';
                }
                if (args.options.ownerGroupId && args.options.ownerGroupName) {
                    return 'Specify either ownerGroupId or ownerGroupName when using planTitle but not both';
                }
            }
            if (args.options.ownerGroupId && !validation_1.validation.isValidGuid(args.options.ownerGroupId)) {
                return `${args.options.ownerGroupId} is not a valid GUID`;
            }
        }
        return true;
    }));
}, _PlannerTaskRemoveCommand_initOptionSets = function _PlannerTaskRemoveCommand_initOptionSets() {
    this.optionSets.push(['id', 'title']);
};
module.exports = new PlannerTaskRemoveCommand();
//# sourceMappingURL=task-remove.js.map