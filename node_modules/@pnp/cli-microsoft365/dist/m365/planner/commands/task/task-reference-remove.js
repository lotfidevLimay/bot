"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerTaskReferenceRemoveCommand_instances, _PlannerTaskReferenceRemoveCommand_initTelemetry, _PlannerTaskReferenceRemoveCommand_initOptions, _PlannerTaskReferenceRemoveCommand_initValidators, _PlannerTaskReferenceRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerTaskReferenceRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerTaskReferenceRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerTaskReferenceRemoveCommand_instances, "m", _PlannerTaskReferenceRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerTaskReferenceRemoveCommand_instances, "m", _PlannerTaskReferenceRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerTaskReferenceRemoveCommand_instances, "m", _PlannerTaskReferenceRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _PlannerTaskReferenceRemoveCommand_instances, "m", _PlannerTaskReferenceRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.TASK_REFERENCE_REMOVE;
    }
    get description() {
        return 'Removes the reference from the Planner task';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.confirm) {
                yield this.removeReference(logger, args);
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the reference from the Planner task?`
                });
                if (result.continue) {
                    yield this.removeReference(logger, args);
                }
            }
        });
    }
    removeReference(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { etag, url } = yield this.getTaskDetailsEtagAndUrl(args.options);
                const requestOptionsTaskDetails = {
                    url: `${this.resource}/v1.0/planner/tasks/${args.options.taskId}/details`,
                    headers: {
                        'accept': 'application/json;odata.metadata=none',
                        'If-Match': etag,
                        'Prefer': 'return=representation'
                    },
                    responseType: 'json',
                    data: {
                        references: {
                            [formatting_1.formatting.openTypesEncoder(url)]: null
                        }
                    }
                };
                yield request_1.default.patch(requestOptionsTaskDetails);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getTaskDetailsEtagAndUrl(options) {
        const requestOptions = {
            url: `${this.resource}/v1.0/planner/tasks/${encodeURIComponent(options.taskId)}/details`,
            headers: {
                accept: 'application/json'
            },
            responseType: 'json'
        };
        let url = options.url;
        return request_1.default
            .get(requestOptions)
            .then((taskDetails) => {
            if (options.alias) {
                const urls = [];
                if (taskDetails.references) {
                    Object.entries(taskDetails.references).forEach((ref) => {
                        var _a;
                        if (((_a = ref[1].alias) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === options.alias.toLocaleLowerCase()) {
                            urls.push(decodeURIComponent(ref[0]));
                        }
                    });
                }
                if (urls.length === 0) {
                    return Promise.reject(`The specified reference with alias ${options.alias} does not exist`);
                }
                if (urls.length > 1) {
                    return Promise.reject(`Multiple references with alias ${options.alias} found. Pass one of the following urls within the "--url" option : ${urls}`);
                }
                url = urls[0];
            }
            return Promise.resolve({ etag: taskDetails['@odata.etag'], url });
        });
    }
}
_PlannerTaskReferenceRemoveCommand_instances = new WeakSet(), _PlannerTaskReferenceRemoveCommand_initTelemetry = function _PlannerTaskReferenceRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            url: typeof args.options.url !== 'undefined',
            alias: typeof args.options.alias !== 'undefined',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _PlannerTaskReferenceRemoveCommand_initOptions = function _PlannerTaskReferenceRemoveCommand_initOptions() {
    this.options.unshift({ option: '-u, --url [url]' }, { option: '--alias [alias]' }, { option: '-i, --taskId <taskId>' }, { option: '--confirm' });
}, _PlannerTaskReferenceRemoveCommand_initValidators = function _PlannerTaskReferenceRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.url && args.options.url.indexOf('https://') !== 0 && args.options.url.indexOf('http://') !== 0) {
            return 'The url option should contain a valid URL. A valid URL starts with http(s)://';
        }
        return true;
    }));
}, _PlannerTaskReferenceRemoveCommand_initOptionSets = function _PlannerTaskReferenceRemoveCommand_initOptionSets() {
    this.optionSets.push(['url', 'alias']);
};
module.exports = new PlannerTaskReferenceRemoveCommand();
//# sourceMappingURL=task-reference-remove.js.map