"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerTaskChecklistItemListCommand_instances, _PlannerTaskChecklistItemListCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const request_1 = require("../../../../request");
const accessToken_1 = require("../../../../utils/accessToken");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerTaskChecklistItemListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerTaskChecklistItemListCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerTaskChecklistItemListCommand_instances, "m", _PlannerTaskChecklistItemListCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.TASK_CHECKLISTITEM_LIST;
    }
    get description() {
        return 'Lists the checklist items of a Planner task.';
    }
    defaultProperties() {
        return ['id', 'title', 'isChecked'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (accessToken_1.accessToken.isAppOnlyAccessToken(Auth_1.default.service.accessTokens[this.resource].accessToken)) {
                this.handleError('This command does not support application permissions.');
                return;
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/planner/tasks/${encodeURIComponent(args.options.taskId)}/details?$select=checklist`,
                headers: {
                    accept: "application/json;odata.metadata=none"
                },
                responseType: "json"
            };
            try {
                const res = yield request_1.default.get(requestOptions);
                if (!args.options.output || args.options.output === 'json') {
                    logger.log(res.checklist);
                }
                else {
                    //converted to text friendly output
                    const output = Object.getOwnPropertyNames(res.checklist).map(prop => (Object.assign({ id: prop }, res.checklist[prop])));
                    logger.log(output);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_PlannerTaskChecklistItemListCommand_instances = new WeakSet(), _PlannerTaskChecklistItemListCommand_initOptions = function _PlannerTaskChecklistItemListCommand_initOptions() {
    this.options.unshift({
        option: "-i, --taskId <taskId>"
    });
};
module.exports = new PlannerTaskChecklistItemListCommand();
//# sourceMappingURL=task-checklistitem-list.js.map