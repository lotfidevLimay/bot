"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerTaskChecklistItemRemoveCommand_instances, _PlannerTaskChecklistItemRemoveCommand_initTelemetry, _PlannerTaskChecklistItemRemoveCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerTaskChecklistItemRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerTaskChecklistItemRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerTaskChecklistItemRemoveCommand_instances, "m", _PlannerTaskChecklistItemRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerTaskChecklistItemRemoveCommand_instances, "m", _PlannerTaskChecklistItemRemoveCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.TASK_CHECKLISTITEM_REMOVE;
    }
    get description() {
        return 'Removes the checklist item from the planner task';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.confirm) {
                yield this.removeChecklistitem(args);
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the checklist item with id ${args.options.id} from the planner task?`
                });
                if (result.continue) {
                    yield this.removeChecklistitem(args);
                }
            }
        });
    }
    removeChecklistitem(args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const task = yield this.getTaskDetails(args.options.taskId);
                if (!task.checklist || !task.checklist[args.options.id]) {
                    throw `The specified checklist item with id ${args.options.id} does not exist`;
                }
                const requestOptionsTaskDetails = {
                    url: `${this.resource}/v1.0/planner/tasks/${args.options.taskId}/details`,
                    headers: {
                        'accept': 'application/json;odata.metadata=none',
                        'If-Match': task['@odata.etag'],
                        'Prefer': 'return=representation'
                    },
                    responseType: 'json',
                    data: {
                        checklist: {
                            [args.options.id]: null
                        }
                    }
                };
                yield request_1.default.patch(requestOptionsTaskDetails);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getTaskDetails(taskId) {
        const requestOptions = {
            url: `${this.resource}/v1.0/planner/tasks/${encodeURIComponent(taskId)}/details?$select=checklist`,
            headers: {
                accept: 'application/json;odata.metadata=minimal'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
}
_PlannerTaskChecklistItemRemoveCommand_instances = new WeakSet(), _PlannerTaskChecklistItemRemoveCommand_initTelemetry = function _PlannerTaskChecklistItemRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _PlannerTaskChecklistItemRemoveCommand_initOptions = function _PlannerTaskChecklistItemRemoveCommand_initOptions() {
    this.options.unshift({ option: '-i, --id <id>' }, { option: '--taskId <taskId>' }, { option: '--confirm' });
};
module.exports = new PlannerTaskChecklistItemRemoveCommand();
//# sourceMappingURL=task-checklistitem-remove.js.map