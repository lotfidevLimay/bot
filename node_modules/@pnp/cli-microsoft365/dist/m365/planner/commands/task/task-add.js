"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerTaskAddCommand_instances, _PlannerTaskAddCommand_initTelemetry, _PlannerTaskAddCommand_initOptions, _PlannerTaskAddCommand_initValidators, _PlannerTaskAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const request_1 = require("../../../../request");
const accessToken_1 = require("../../../../utils/accessToken");
const formatting_1 = require("../../../../utils/formatting");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const planner_1 = require("../../../../utils/planner");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
const taskPriority_1 = require("../../taskPriority");
class PlannerTaskAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerTaskAddCommand_instances.add(this);
        this.allowedAppliedCategories = ['category1', 'category2', 'category3', 'category4', 'category5', 'category6'];
        this.allowedPreviewTypes = ['automatic', 'nopreview', 'checklist', 'description', 'reference'];
        __classPrivateFieldGet(this, _PlannerTaskAddCommand_instances, "m", _PlannerTaskAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerTaskAddCommand_instances, "m", _PlannerTaskAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerTaskAddCommand_instances, "m", _PlannerTaskAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _PlannerTaskAddCommand_instances, "m", _PlannerTaskAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.TASK_ADD;
    }
    get description() {
        return 'Adds a new Microsoft Planner Task';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.planName) {
                args.options.planTitle = args.options.planName;
                this.warn(logger, `Option 'planName' is deprecated. Please use 'planTitle' instead`);
            }
            if (accessToken_1.accessToken.isAppOnlyAccessToken(Auth_1.default.service.accessTokens[this.resource].accessToken)) {
                this.handleError('This command does not support application permissions.');
                return;
            }
            try {
                this.planId = yield this.getPlanId(args);
                this.bucketId = yield this.getBucketId(args, this.planId);
                const assignments = yield this.generateUserAssignments(args);
                const appliedCategories = this.generateAppliedCategories(args.options);
                const requestOptions = {
                    url: `${this.resource}/v1.0/planner/tasks`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json',
                    data: {
                        planId: this.planId,
                        bucketId: this.bucketId,
                        title: args.options.title,
                        startDateTime: args.options.startDateTime,
                        dueDateTime: args.options.dueDateTime,
                        percentComplete: args.options.percentComplete,
                        assignments: assignments,
                        orderHint: args.options.orderHint,
                        assigneePriority: args.options.assigneePriority,
                        appliedCategories: appliedCategories,
                        priority: taskPriority_1.taskPriority.getPriorityValue(args.options.priority)
                    }
                };
                const newTask = yield request_1.default.post(requestOptions);
                const result = yield this.updateTaskDetails(args.options, newTask);
                logger.log(result);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getTaskDetailsEtag(taskId) {
        const requestOptions = {
            url: `${this.resource}/v1.0/planner/tasks/${encodeURIComponent(taskId)}/details`,
            headers: {
                accept: 'application/json'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((response) => response['@odata.etag']);
    }
    generateAppliedCategories(options) {
        if (!options.appliedCategories) {
            return {};
        }
        const categories = {};
        options.appliedCategories.toLocaleLowerCase().split(',').forEach(x => categories[x] = true);
        return categories;
    }
    updateTaskDetails(options, newTask) {
        const taskId = newTask.id;
        if (!options.description && !options.previewType) {
            return Promise.resolve(newTask);
        }
        return this
            .getTaskDetailsEtag(taskId)
            .then(etag => {
            const requestOptionsTaskDetails = {
                url: `${this.resource}/v1.0/planner/tasks/${taskId}/details`,
                headers: {
                    'accept': 'application/json;odata.metadata=none',
                    'If-Match': etag,
                    'Prefer': 'return=representation'
                },
                responseType: 'json',
                data: {
                    description: options.description,
                    previewType: options.previewType
                }
            };
            return request_1.default.patch(requestOptionsTaskDetails);
        })
            .then(taskDetails => {
            return Object.assign(Object.assign({}, newTask), taskDetails);
        });
    }
    generateUserAssignments(args) {
        const assignments = {};
        if (!args.options.assignedToUserIds && !args.options.assignedToUserNames) {
            return Promise.resolve(assignments);
        }
        return this
            .getUserIds(args.options)
            .then((userIds) => {
            userIds.map(x => assignments[x] = {
                '@odata.type': '#microsoft.graph.plannerAssignment',
                orderHint: ' !'
            });
            return Promise.resolve(assignments);
        });
    }
    getBucketId(args, planId) {
        if (args.options.bucketId) {
            return Promise.resolve(args.options.bucketId);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/planner/plans/${planId}/buckets`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((response) => {
            const bucket = response.value.find(val => val.name === args.options.bucketName);
            if (!bucket) {
                return Promise.reject(`The specified bucket does not exist`);
            }
            return Promise.resolve(bucket.id);
        });
    }
    getPlanId(args) {
        if (args.options.planId) {
            return Promise.resolve(args.options.planId);
        }
        return this
            .getGroupId(args)
            .then((groupId) => planner_1.planner.getPlanByTitle(args.options.planTitle, groupId))
            .then(plan => plan.id);
    }
    getGroupId(args) {
        if (args.options.ownerGroupId) {
            return Promise.resolve(args.options.ownerGroupId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.ownerGroupName)
            .then(group => group.id);
    }
    getUserIds(options) {
        if (options.assignedToUserIds) {
            return Promise.resolve(options.assignedToUserIds.split(','));
        }
        // Hitting this section means assignedToUserNames won't be undefined
        const userNames = options.assignedToUserNames;
        const userArr = userNames.split(',').map(o => o.trim());
        let userIds = [];
        const promises = userArr.map(user => {
            const requestOptions = {
                url: `${this.resource}/v1.0/users?$filter=userPrincipalName eq '${formatting_1.formatting.encodeQueryParameter(user)}'&$select=id,userPrincipalName`,
                headers: {
                    'content-type': 'application/json'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        });
        return Promise
            .all(promises)
            .then((usersRes) => {
            let userUpns = [];
            userUpns = usersRes.map(res => { var _a; return (_a = res.value[0]) === null || _a === void 0 ? void 0 : _a.userPrincipalName; });
            userIds = usersRes.map(res => { var _a; return (_a = res.value[0]) === null || _a === void 0 ? void 0 : _a.id; });
            // Find the members where no graph response was found
            const invalidUsers = userArr.filter(user => !userUpns.some((upn) => (upn === null || upn === void 0 ? void 0 : upn.toLowerCase()) === user.toLowerCase()));
            if (invalidUsers && invalidUsers.length > 0) {
                return Promise.reject(`Cannot proceed with planner task creation. The following users provided are invalid : ${invalidUsers.join(',')}`);
            }
            return Promise.resolve(userIds);
        });
    }
}
_PlannerTaskAddCommand_instances = new WeakSet(), _PlannerTaskAddCommand_initTelemetry = function _PlannerTaskAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            planId: typeof args.options.planId !== 'undefined',
            planName: typeof args.options.planName !== 'undefined',
            planTitle: typeof args.options.planTitle !== 'undefined',
            ownerGroupId: typeof args.options.ownerGroupId !== 'undefined',
            ownerGroupName: typeof args.options.ownerGroupName !== 'undefined',
            bucketId: typeof args.options.bucketId !== 'undefined',
            bucketName: typeof args.options.bucketName !== 'undefined',
            startDateTime: typeof args.options.startDateTime !== 'undefined',
            dueDateTime: typeof args.options.dueDateTime !== 'undefined',
            percentComplete: typeof args.options.percentComplete !== 'undefined',
            assignedToUserIds: typeof args.options.assignedToUserIds !== 'undefined',
            assignedToUserNames: typeof args.options.assignedToUserNames !== 'undefined',
            assigneePriority: typeof args.options.assigneePriority !== 'undefined',
            description: typeof args.options.description !== 'undefined',
            appliedCategories: typeof args.options.appliedCategories !== 'undefined',
            previewType: typeof args.options.previewType !== 'undefined',
            orderHint: typeof args.options.orderHint !== 'undefined',
            priority: typeof args.options.priority !== 'undefined'
        });
    });
}, _PlannerTaskAddCommand_initOptions = function _PlannerTaskAddCommand_initOptions() {
    this.options.unshift({ option: '-t, --title <title>' }, { option: '--planId [planId]' }, { option: '--planName [planName]' }, { option: '--planTitle [planTitle]' }, { option: '--ownerGroupId [ownerGroupId]' }, { option: '--ownerGroupName [ownerGroupName]' }, { option: '--bucketId [bucketId]' }, { option: '--bucketName [bucketName]' }, { option: '--startDateTime [startDateTime]' }, { option: '--dueDateTime [dueDateTime]' }, { option: '--percentComplete [percentComplete]' }, { option: '--assignedToUserIds [assignedToUserIds]' }, { option: '--assignedToUserNames [assignedToUserNames]' }, { option: '--assigneePriority [assigneePriority]' }, { option: '--description [description]' }, {
        option: '--appliedCategories [appliedCategories]',
        autocomplete: this.allowedAppliedCategories
    }, {
        option: '--previewType [previewType]',
        autocomplete: this.allowedPreviewTypes
    }, { option: '--orderHint [orderHint]' }, { option: '--priority [priority]', autocomplete: taskPriority_1.taskPriority.priorityValues });
}, _PlannerTaskAddCommand_initValidators = function _PlannerTaskAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if ((args.options.planName || args.options.planTitle) && !args.options.ownerGroupId && !args.options.ownerGroupName) {
            return 'Specify either ownerGroupId or ownerGroupName when using planTitle';
        }
        if ((args.options.planName || args.options.planTitle) && args.options.ownerGroupId && args.options.ownerGroupName) {
            return 'Specify either ownerGroupId or ownerGroupName when using planTitle but not both';
        }
        if (args.options.ownerGroupId && !validation_1.validation.isValidGuid(args.options.ownerGroupId)) {
            return `${args.options.ownerGroupId} is not a valid GUID`;
        }
        if (args.options.startDateTime && !validation_1.validation.isValidISODateTime(args.options.startDateTime)) {
            return 'The startDateTime is not a valid ISO date string';
        }
        if (args.options.dueDateTime && !validation_1.validation.isValidISODateTime(args.options.dueDateTime)) {
            return 'The dueDateTime is not a valid ISO date string';
        }
        if (args.options.percentComplete && isNaN(args.options.percentComplete)) {
            return `percentComplete is not a number`;
        }
        if (args.options.percentComplete && (args.options.percentComplete < 0 || args.options.percentComplete > 100)) {
            return `percentComplete should be between 0 and 100`;
        }
        if (args.options.assignedToUserIds && !validation_1.validation.isValidGuidArray(args.options.assignedToUserIds.split(','))) {
            return 'assignedToUserIds contains invalid GUID';
        }
        if (args.options.assignedToUserIds && args.options.assignedToUserNames) {
            return 'Specify either assignedToUserIds or assignedToUserNames but not both';
        }
        if (args.options.appliedCategories && args.options.appliedCategories.split(',').filter(category => this.allowedAppliedCategories.indexOf(category.toLocaleLowerCase()) < 0).length !== 0) {
            return `The appliedCategories contains invalid value. Specify either ${this.allowedAppliedCategories.join(', ')} as properties`;
        }
        if (args.options.previewType && this.allowedPreviewTypes.indexOf(args.options.previewType.toLocaleLowerCase()) === -1) {
            return `${args.options.previewType} is not a valid preview type value. Allowed values are ${this.allowedPreviewTypes.join(', ')}`;
        }
        if (args.options.priority !== undefined) {
            if (typeof args.options.priority === "number") {
                if (isNaN(args.options.priority) || args.options.priority < 0 || args.options.priority > 10 || !Number.isInteger(args.options.priority)) {
                    return 'priority should be an integer between 0 and 10.';
                }
            }
            else if (taskPriority_1.taskPriority.priorityValues.map(l => l.toLowerCase()).indexOf(args.options.priority.toString().toLowerCase()) === -1) {
                return `${args.options.priority} is not a valid priority value. Allowed values are ${taskPriority_1.taskPriority.priorityValues.join('|')}.`;
            }
        }
        return true;
    }));
}, _PlannerTaskAddCommand_initOptionSets = function _PlannerTaskAddCommand_initOptionSets() {
    this.optionSets.push(['planId', 'planTitle'], ['bucketId', 'bucketName']);
};
module.exports = new PlannerTaskAddCommand();
//# sourceMappingURL=task-add.js.map