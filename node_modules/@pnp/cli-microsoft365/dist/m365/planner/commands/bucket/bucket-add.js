"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerBucketAddCommand_instances, _PlannerBucketAddCommand_initTelemetry, _PlannerBucketAddCommand_initOptions, _PlannerBucketAddCommand_initValidators, _PlannerBucketAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const request_1 = require("../../../../request");
const accessToken_1 = require("../../../../utils/accessToken");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const planner_1 = require("../../../../utils/planner");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerBucketAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerBucketAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerBucketAddCommand_instances, "m", _PlannerBucketAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerBucketAddCommand_instances, "m", _PlannerBucketAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerBucketAddCommand_instances, "m", _PlannerBucketAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _PlannerBucketAddCommand_instances, "m", _PlannerBucketAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.BUCKET_ADD;
    }
    get description() {
        return 'Adds a new Microsoft Planner bucket';
    }
    defaultProperties() {
        return ['id', 'name', 'planId', 'orderHint'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.planName) {
                args.options.planTitle = args.options.planName;
                this.warn(logger, `Option 'planName' is deprecated. Please use 'planTitle' instead`);
            }
            if (accessToken_1.accessToken.isAppOnlyAccessToken(Auth_1.default.service.accessTokens[this.resource].accessToken)) {
                this.handleError('This command does not support application permissions.');
                return;
            }
            try {
                const planId = yield this.getPlanId(args);
                const requestOptions = {
                    url: `${this.resource}/v1.0/planner/buckets`,
                    headers: {
                        'accept': 'application/json;odata.metadata=none'
                    },
                    responseType: 'json',
                    data: {
                        name: args.options.name,
                        planId: planId,
                        orderHint: args.options.orderHint
                    }
                };
                const response = yield request_1.default.post(requestOptions);
                logger.log(response);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getPlanId(args) {
        if (args.options.planId) {
            return Promise.resolve(args.options.planId);
        }
        return this
            .getGroupId(args)
            .then(groupId => planner_1.planner.getPlanByTitle(args.options.planTitle, groupId))
            .then(plan => plan.id);
    }
    getGroupId(args) {
        if (args.options.ownerGroupId) {
            return Promise.resolve(args.options.ownerGroupId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.ownerGroupName)
            .then(group => group.id);
    }
}
_PlannerBucketAddCommand_instances = new WeakSet(), _PlannerBucketAddCommand_initTelemetry = function _PlannerBucketAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            planId: typeof args.options.planId !== 'undefined',
            planName: typeof args.options.planName !== 'undefined',
            planTitle: typeof args.options.planTitle !== 'undefined',
            ownerGroupId: typeof args.options.ownerGroupId !== 'undefined',
            ownerGroupName: typeof args.options.ownerGroupName !== 'undefined',
            orderHint: typeof args.options.orderHint !== 'undefined'
        });
    });
}, _PlannerBucketAddCommand_initOptions = function _PlannerBucketAddCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name <name>'
    }, {
        option: "--planId [planId]"
    }, {
        option: "--planName [planName]"
    }, {
        option: "--planTitle [planTitle]"
    }, {
        option: "--ownerGroupId [ownerGroupId]"
    }, {
        option: "--ownerGroupName [ownerGroupName]"
    }, {
        option: "--orderHint [orderHint]"
    });
}, _PlannerBucketAddCommand_initValidators = function _PlannerBucketAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if ((args.options.planName || args.options.planTitle) && !args.options.ownerGroupId && !args.options.ownerGroupName) {
            return 'Specify either ownerGroupId or ownerGroupName when using planTitle';
        }
        if ((args.options.planName || args.options.planTitle) && args.options.ownerGroupId && args.options.ownerGroupName) {
            return 'Specify either ownerGroupId or ownerGroupName when using planTitle but not both';
        }
        if (args.options.ownerGroupId && !validation_1.validation.isValidGuid(args.options.ownerGroupId)) {
            return `${args.options.ownerGroupId} is not a valid GUID`;
        }
        return true;
    }));
}, _PlannerBucketAddCommand_initOptionSets = function _PlannerBucketAddCommand_initOptionSets() {
    this.optionSets.push(['planId', 'planTitle']);
};
module.exports = new PlannerBucketAddCommand();
//# sourceMappingURL=bucket-add.js.map