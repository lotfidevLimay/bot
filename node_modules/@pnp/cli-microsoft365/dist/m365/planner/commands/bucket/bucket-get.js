"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerBucketGetCommand_instances, _PlannerBucketGetCommand_initTelemetry, _PlannerBucketGetCommand_initOptions, _PlannerBucketGetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const request_1 = require("../../../../request");
const accessToken_1 = require("../../../../utils/accessToken");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const planner_1 = require("../../../../utils/planner");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerBucketGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerBucketGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerBucketGetCommand_instances, "m", _PlannerBucketGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerBucketGetCommand_instances, "m", _PlannerBucketGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerBucketGetCommand_instances, "m", _PlannerBucketGetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.BUCKET_GET;
    }
    get description() {
        return 'Gets the Microsoft Planner bucket in a plan';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.planName) {
                args.options.planTitle = args.options.planName;
                this.warn(logger, `Option 'planName' is deprecated. Please use 'planTitle' instead`);
            }
            if (accessToken_1.accessToken.isAppOnlyAccessToken(Auth_1.default.service.accessTokens[this.resource].accessToken)) {
                this.handleError('This command does not support application permissions.');
                return;
            }
            try {
                const bucketId = yield this.getBucketId(args);
                const bucket = yield this.getBucketById(bucketId);
                logger.log(bucket);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getBucketId(args) {
        const { id, name } = args.options;
        if (id) {
            return Promise.resolve(id);
        }
        return this
            .getPlanId(args)
            .then((planId) => {
            const requestOptions = {
                url: `${this.resource}/v1.0/planner/plans/${planId}/buckets`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        })
            .then(buckets => {
            const filteredBuckets = buckets.value.filter(b => name.toLowerCase() === b.name.toLowerCase());
            if (!filteredBuckets.length) {
                return Promise.reject(`The specified bucket ${name} does not exist`);
            }
            if (filteredBuckets.length > 1) {
                return Promise.reject(`Multiple buckets with name ${name} found: ${filteredBuckets.map(x => x.id)}`);
            }
            return Promise.resolve(filteredBuckets[0].id.toString());
        });
    }
    getPlanId(args) {
        const { planId, planTitle } = args.options;
        if (planId) {
            return Promise.resolve(planId);
        }
        return this
            .getGroupId(args)
            .then(groupId => planner_1.planner.getPlanByTitle(planTitle, groupId))
            .then(plan => plan.id);
    }
    getBucketById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: `${this.resource}/v1.0/planner/buckets/${id}`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        });
    }
    getGroupId(args) {
        const { ownerGroupId, ownerGroupName } = args.options;
        if (ownerGroupId) {
            return Promise.resolve(ownerGroupId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(ownerGroupName)
            .then(group => group.id);
    }
}
_PlannerBucketGetCommand_instances = new WeakSet(), _PlannerBucketGetCommand_initTelemetry = function _PlannerBucketGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined',
            planId: typeof args.options.planId !== 'undefined',
            planName: typeof args.options.planName !== 'undefined',
            planTitle: typeof args.options.planTitle !== 'undefined',
            ownerGroupId: typeof args.options.ownerGroupId !== 'undefined',
            ownerGroupName: typeof args.options.ownerGroupName !== 'undefined'
        });
    });
}, _PlannerBucketGetCommand_initOptions = function _PlannerBucketGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '--planId [planId]'
    }, {
        option: '--planName [planName]'
    }, {
        option: "--planTitle [planTitle]"
    }, {
        option: '--ownerGroupId [ownerGroupId]'
    }, {
        option: '--ownerGroupName [ownerGroupName]'
    });
}, _PlannerBucketGetCommand_initValidators = function _PlannerBucketGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id) {
            if (args.options.planId || args.options.planName || args.options.planTitle || args.options.ownerGroupId || args.options.ownerGroupName) {
                return 'Don\'t specify planId, planTitle, ownerGroupId or ownerGroupName when using id';
            }
            if (args.options.name) {
                return 'Specify either id or name';
            }
        }
        if (args.options.name) {
            if (!args.options.planId && !args.options.planName && !args.options.planTitle) {
                return 'Specify either planId or planTitle when using name';
            }
            if (args.options.planId && (args.options.planName || args.options.planTitle)) {
                return 'Specify either planId or planTitle when using name but not both';
            }
            if (args.options.planName || args.options.planTitle) {
                if (!args.options.ownerGroupId && !args.options.ownerGroupName) {
                    return 'Specify either ownerGroupId or ownerGroupName when using planTitle';
                }
                if (args.options.ownerGroupId && args.options.ownerGroupName) {
                    return 'Specify either ownerGroupId or ownerGroupName when using planTitle but not both';
                }
                if (args.options.ownerGroupId && !validation_1.validation.isValidGuid(args.options.ownerGroupId)) {
                    return `${args.options.ownerGroupId} is not a valid GUID`;
                }
            }
            if (args.options.planId) {
                if (args.options.ownerGroupId || args.options.ownerGroupName) {
                    return 'Don\'t specify ownerGroupId or ownerGroupName when using planId';
                }
            }
        }
        if (!args.options.id && !args.options.name) {
            return 'Please specify id or name';
        }
        return true;
    }));
};
module.exports = new PlannerBucketGetCommand();
//# sourceMappingURL=bucket-get.js.map