"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerPlanGetCommand_instances, _PlannerPlanGetCommand_initTelemetry, _PlannerPlanGetCommand_initOptions, _PlannerPlanGetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const request_1 = require("../../../../request");
const accessToken_1 = require("../../../../utils/accessToken");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const planner_1 = require("../../../../utils/planner");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerPlanGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerPlanGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerPlanGetCommand_instances, "m", _PlannerPlanGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerPlanGetCommand_instances, "m", _PlannerPlanGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerPlanGetCommand_instances, "m", _PlannerPlanGetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PLAN_GET;
    }
    alias() {
        return [commands_1.default.PLAN_DETAILS_GET];
    }
    get description() {
        return 'Get a Microsoft Planner plan';
    }
    defaultProperties() {
        return ['id', 'title', 'createdDateTime', 'owner', '@odata.etag'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.showDeprecationWarning(logger, commands_1.default.PLAN_DETAILS_GET, commands_1.default.PLAN_GET);
            if (accessToken_1.accessToken.isAppOnlyAccessToken(Auth_1.default.service.accessTokens[this.resource].accessToken)) {
                this.handleError('This command does not support application permissions.');
                return;
            }
            if (args.options.planId) {
                args.options.id = args.options.planId;
            }
            if (args.options.planTitle) {
                args.options.title = args.options.planTitle;
            }
            try {
                if (args.options.id) {
                    const plan = yield planner_1.planner.getPlanById(args.options.id);
                    const result = yield this.getPlanDetails(plan);
                    logger.log(result);
                }
                else {
                    const groupId = yield this.getGroupId(args);
                    const plan = yield planner_1.planner.getPlanByTitle(args.options.title, groupId);
                    const result = yield this.getPlanDetails(plan);
                    if (result) {
                        logger.log(result);
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getPlanDetails(plan) {
        const requestOptionsTaskDetails = {
            url: `${this.resource}/v1.0/planner/plans/${plan.id}/details`,
            headers: {
                'accept': 'application/json;odata.metadata=none',
                'Prefer': 'return=representation'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptionsTaskDetails)
            .then(planDetails => {
            return Object.assign(Object.assign({}, plan), planDetails);
        });
    }
    getGroupId(args) {
        if (args.options.ownerGroupId) {
            return Promise.resolve(args.options.ownerGroupId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.ownerGroupName)
            .then(group => group.id);
    }
}
_PlannerPlanGetCommand_instances = new WeakSet(), _PlannerPlanGetCommand_initTelemetry = function _PlannerPlanGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            planId: typeof args.options.planId !== 'undefined',
            planTitle: typeof args.options.planTitle !== 'undefined',
            id: typeof args.options.id !== 'undefined',
            title: typeof args.options.title !== 'undefined',
            ownerGroupId: typeof args.options.ownerGroupId !== 'undefined',
            ownerGroupName: typeof args.options.ownerGroupName !== 'undefined'
        });
    });
}, _PlannerPlanGetCommand_initOptions = function _PlannerPlanGetCommand_initOptions() {
    this.options.unshift({
        option: '--planId [planId]'
    }, {
        option: '--planTitle [planTitle]'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '-t, --title [title]'
    }, {
        option: '--ownerGroupId [ownerGroupId]'
    }, {
        option: '--ownerGroupName [ownerGroupName]'
    });
}, _PlannerPlanGetCommand_initValidators = function _PlannerPlanGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.planId && args.options.planTitle ||
            args.options.id && args.options.title ||
            args.options.planId && args.options.title ||
            args.options.id && args.options.planTitle) {
            return 'Specify either id or title but not both';
        }
        if (!args.options.planId && !args.options.id) {
            if (!args.options.planTitle && !args.options.title) {
                return 'Specify either id or title';
            }
            if ((args.options.title || args.options.planTitle) && !args.options.ownerGroupId && !args.options.ownerGroupName) {
                return 'Specify either ownerGroupId or ownerGroupName';
            }
            if ((args.options.title || args.options.planTitle) && args.options.ownerGroupId && args.options.ownerGroupName) {
                return 'Specify either ownerGroupId or ownerGroupName but not both';
            }
            if (args.options.ownerGroupId && !validation_1.validation.isValidGuid(args.options.ownerGroupId)) {
                return `${args.options.ownerGroupId} is not a valid GUID`;
            }
        }
        return true;
    }));
};
module.exports = new PlannerPlanGetCommand();
//# sourceMappingURL=plan-get.js.map