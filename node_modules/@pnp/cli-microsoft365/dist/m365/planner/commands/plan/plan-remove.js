"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlannerPlanRemoveCommand_instances, _PlannerPlanRemoveCommand_initTelemetry, _PlannerPlanRemoveCommand_initOptions, _PlannerPlanRemoveCommand_initValidators, _PlannerPlanRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const accessToken_1 = require("../../../../utils/accessToken");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const planner_1 = require("../../../../utils/planner");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class PlannerPlanRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _PlannerPlanRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _PlannerPlanRemoveCommand_instances, "m", _PlannerPlanRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PlannerPlanRemoveCommand_instances, "m", _PlannerPlanRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PlannerPlanRemoveCommand_instances, "m", _PlannerPlanRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _PlannerPlanRemoveCommand_instances, "m", _PlannerPlanRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.PLAN_REMOVE;
    }
    get description() {
        return 'Removes the Microsoft Planner plan';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (accessToken_1.accessToken.isAppOnlyAccessToken(Auth_1.default.service.accessTokens[this.resource].accessToken)) {
                this.handleError('This command does not support application permissions.');
                return;
            }
            const removePlan = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const plan = yield this.getPlan(args);
                    const requestOptions = {
                        url: `${this.resource}/v1.0/planner/plans/${plan.id}`,
                        headers: {
                            accept: 'application/json;odata.metadata=none',
                            'if-match': plan['@odata.etag']
                        },
                        responseType: 'json'
                    };
                    yield request_1.default.delete(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removePlan();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the plan ${args.options.id || args.options.title}?`
                });
                if (result.continue) {
                    yield removePlan();
                }
            }
        });
    }
    getPlan(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id, title } = args.options;
            if (id) {
                return planner_1.planner.getPlanById(id, 'minimal');
            }
            const groupId = yield this.getGroupId(args);
            return yield planner_1.planner.getPlanByTitle(title, groupId);
        });
    }
    getGroupId(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { ownerGroupId, ownerGroupName } = args.options;
            if (ownerGroupId) {
                return ownerGroupId;
            }
            const group = yield aadGroup_1.aadGroup.getGroupByDisplayName(ownerGroupName);
            return group.id;
        });
    }
}
_PlannerPlanRemoveCommand_instances = new WeakSet(), _PlannerPlanRemoveCommand_initTelemetry = function _PlannerPlanRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            title: typeof args.options.title !== 'undefined',
            ownerGroupId: typeof args.options.ownerGroupId !== 'undefined',
            ownerGroupName: typeof args.options.ownerGroupName !== 'undefined',
            confirm: !!args.options.confirm
        });
    });
}, _PlannerPlanRemoveCommand_initOptions = function _PlannerPlanRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-t, --title [title]'
    }, {
        option: '--ownerGroupId [ownerGroupId]'
    }, {
        option: '--ownerGroupName [ownerGroupName]'
    }, {
        option: '--confirm'
    });
}, _PlannerPlanRemoveCommand_initValidators = function _PlannerPlanRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.title) {
            if (!args.options.ownerGroupId && !args.options.ownerGroupName) {
                return 'Specify either ownerGroupId or ownerGroupName';
            }
            if (args.options.ownerGroupId && args.options.ownerGroupName) {
                return 'Specify either ownerGroupId or ownerGroupName but not both';
            }
            if (args.options.ownerGroupId && !validation_1.validation.isValidGuid(args.options.ownerGroupId)) {
                return `${args.options.ownerGroupId} is not a valid GUID`;
            }
        }
        else if (args.options.ownerGroupId || args.options.ownerGroupName) {
            return 'Don\'t specify ownerGroupId or ownerGroupName when using id';
        }
        return true;
    }));
}, _PlannerPlanRemoveCommand_initOptionSets = function _PlannerPlanRemoveCommand_initOptionSets() {
    this.optionSets.push(['id', 'title']);
};
module.exports = new PlannerPlanRemoveCommand();
//# sourceMappingURL=plan-remove.js.map