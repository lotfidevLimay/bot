"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../config");
const request_1 = require("../../../request");
const spo_1 = require("../../../utils/spo");
const SpoCommand_1 = require("../../base/SpoCommand");
const commands_1 = require("../commands");
class OneDriveListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST;
    }
    get description() {
        return "Retrieves a list of OneDrive sites";
    }
    defaultProperties() {
        return ['Title', 'Url'];
    }
    commandAction(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                if (this.verbose) {
                    logger.logToStderr(`Retrieving list of OneDrive sites...`);
                }
                this.allSites = [];
                yield this.getAllSites(spoAdminUrl, '0', undefined, logger);
                logger.log(this.allSites);
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
    getAllSites(spoAdminUrl, startIndex, formDigest, logger) {
        return new Promise((resolve, reject) => {
            spo_1.spo
                .ensureFormDigest(spoAdminUrl, logger, formDigest, this.debug)
                .then((res) => {
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': res.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="2" ObjectPathId="1" /><ObjectPath Id="4" ObjectPathId="3" /><Query Id="5" ObjectPathId="3"><Query SelectAllProperties="true"><Properties /></Query><ChildItemQuery SelectAllProperties="true"><Properties /></ChildItemQuery></Query></Actions><ObjectPaths><Constructor Id="1" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /><Method Id="3" ParentId="1" Name="GetSitePropertiesFromSharePointByFilters"><Parameters><Parameter TypeId="{b92aeee2-c92c-4b67-abcc-024e471bc140}"><Property Name="IncludeDetail" Type="Boolean">false</Property><Property Name="IncludePersonalSite" Type="Enum">1</Property><Property Name="StartIndex" Type="String">${startIndex}</Property><Property Name="Template" Type="String">SPSPERS</Property></Parameter></Parameters></Method></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                    return;
                }
                else {
                    const sites = json[json.length - 1];
                    this.allSites.push(...sites._Child_Items_);
                    if (sites.NextStartIndexFromSharePoint) {
                        this
                            .getAllSites(spoAdminUrl, sites.NextStartIndexFromSharePoint, formDigest, logger)
                            .then(_ => resolve(), err => reject(err));
                    }
                    else {
                        resolve();
                    }
                }
            }, err => reject(err));
        });
    }
}
module.exports = new OneDriveListCommand();
//# sourceMappingURL=onedrive-list.js.map