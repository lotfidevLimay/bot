"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GraphSchemaExtensionAddCommand_instances, _GraphSchemaExtensionAddCommand_initOptions, _GraphSchemaExtensionAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class GraphSchemaExtensionAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _GraphSchemaExtensionAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _GraphSchemaExtensionAddCommand_instances, "m", _GraphSchemaExtensionAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _GraphSchemaExtensionAddCommand_instances, "m", _GraphSchemaExtensionAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SCHEMAEXTENSION_ADD;
    }
    get description() {
        return 'Creates a Microsoft Graph schema extension';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Adding schema extension with id '${args.options.id}'...`);
            }
            const targetTypes = args.options.targetTypes.split(',').map(t => t.trim());
            const properties = JSON.parse(args.options.properties);
            const requestOptions = {
                url: `${this.resource}/v1.0/schemaExtensions`,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json'
                },
                data: {
                    id: args.options.id,
                    description: args.options.description,
                    owner: args.options.owner,
                    targetTypes,
                    properties
                },
                responseType: 'json'
            };
            try {
                const res = yield request_1.default.post(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    validateProperties(propertiesString) {
        let result = false;
        try {
            const properties = JSON.parse(propertiesString);
            // If the properties object is not an array
            if (properties.length === undefined) {
                result = 'The specified JSON string is not an array';
            }
            else {
                for (let i = 0; i < properties.length; i++) {
                    const property = properties[i];
                    if (!property.name) {
                        result = `Property ${JSON.stringify(property)} misses name`;
                    }
                    if (!this.isValidPropertyType(property.type)) {
                        result = `${property.type} is not a valid property type. Valid types are: Binary, Boolean, DateTime, Integer and String`;
                    }
                }
                if (typeof result !== "string") {
                    result = true;
                }
            }
        }
        catch (e) {
            result = e;
        }
        return result;
    }
    isValidPropertyType(propertyType) {
        if (!propertyType) {
            return false;
        }
        return ['Binary', 'Boolean', 'DateTime', 'Integer', 'String'].indexOf(propertyType) > -1;
    }
}
_GraphSchemaExtensionAddCommand_instances = new WeakSet(), _GraphSchemaExtensionAddCommand_initOptions = function _GraphSchemaExtensionAddCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '--owner <owner>'
    }, {
        option: '-t, --targetTypes <targetTypes>'
    }, {
        option: '-p, --properties <properties>'
    });
}, _GraphSchemaExtensionAddCommand_initValidators = function _GraphSchemaExtensionAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.owner && !validation_1.validation.isValidGuid(args.options.owner)) {
            return `The specified owner '${args.options.owner}' is not a valid App Id`;
        }
        return this.validateProperties(args.options.properties);
    }));
};
module.exports = new GraphSchemaExtensionAddCommand();
//# sourceMappingURL=schemaextension-add.js.map