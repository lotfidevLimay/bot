"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadGroupSettingRemoveCommand_instances, _AadGroupSettingRemoveCommand_initTelemetry, _AadGroupSettingRemoveCommand_initOptions, _AadGroupSettingRemoveCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadGroupSettingRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadGroupSettingRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadGroupSettingRemoveCommand_instances, "m", _AadGroupSettingRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadGroupSettingRemoveCommand_instances, "m", _AadGroupSettingRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadGroupSettingRemoveCommand_instances, "m", _AadGroupSettingRemoveCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.GROUPSETTING_REMOVE;
    }
    get description() {
        return 'Removes the particular group setting';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeGroupSetting = () => __awaiter(this, void 0, void 0, function* () {
                if (this.verbose) {
                    logger.logToStderr(`Removing group setting: ${args.options.id}...`);
                }
                try {
                    const requestOptions = {
                        url: `${this.resource}/v1.0/groupSettings/${args.options.id}`,
                        headers: {
                            'accept': 'application/json;odata.metadata=none'
                        }
                    };
                    yield request_1.default.delete(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeGroupSetting();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the group setting ${args.options.id}?`
                });
                if (result.continue) {
                    yield removeGroupSetting();
                }
            }
        });
    }
}
_AadGroupSettingRemoveCommand_instances = new WeakSet(), _AadGroupSettingRemoveCommand_initTelemetry = function _AadGroupSettingRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _AadGroupSettingRemoveCommand_initOptions = function _AadGroupSettingRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '--confirm'
    });
}, _AadGroupSettingRemoveCommand_initValidators = function _AadGroupSettingRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new AadGroupSettingRemoveCommand();
//# sourceMappingURL=groupsetting-remove.js.map