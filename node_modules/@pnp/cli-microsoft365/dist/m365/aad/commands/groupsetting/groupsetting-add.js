"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadGroupSettingAddCommand_instances, _AadGroupSettingAddCommand_initOptions, _AadGroupSettingAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadGroupSettingAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadGroupSettingAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadGroupSettingAddCommand_instances, "m", _AadGroupSettingAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadGroupSettingAddCommand_instances, "m", _AadGroupSettingAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.GROUPSETTING_ADD;
    }
    get description() {
        return 'Creates a group setting';
    }
    allowUnknownOptions() {
        return true;
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving group setting template with id '${args.options.templateId}'...`);
            }
            try {
                let requestOptions = {
                    url: `${this.resource}/v1.0/groupSettingTemplates/${args.options.templateId}`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json'
                };
                const groupSettingTemplate = yield request_1.default.get(requestOptions);
                requestOptions = {
                    url: `${this.resource}/v1.0/groupSettings`,
                    headers: {
                        accept: 'application/json;odata.metadata=none',
                        'content-type': 'application/json'
                    },
                    data: {
                        templateId: args.options.templateId,
                        values: this.getGroupSettingValues(args.options, groupSettingTemplate)
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.post(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getGroupSettingValues(options, groupSettingTemplate) {
        const values = [];
        const excludeOptions = [
            'templateId',
            'debug',
            'verbose',
            'output'
        ];
        Object.keys(options).forEach(key => {
            if (excludeOptions.indexOf(key) === -1) {
                values.push({
                    name: key,
                    value: options[key]
                });
            }
        });
        groupSettingTemplate.values.forEach(v => {
            if (!values.find(e => e.name === v.name)) {
                values.push({
                    name: v.name,
                    value: v.defaultValue
                });
            }
        });
        return values;
    }
}
_AadGroupSettingAddCommand_instances = new WeakSet(), _AadGroupSettingAddCommand_initOptions = function _AadGroupSettingAddCommand_initOptions() {
    this.options.unshift({
        option: '-i, --templateId <templateId>'
    });
}, _AadGroupSettingAddCommand_initValidators = function _AadGroupSettingAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.templateId)) {
            return `${args.options.templateId} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new AadGroupSettingAddCommand();
//# sourceMappingURL=groupsetting-add.js.map