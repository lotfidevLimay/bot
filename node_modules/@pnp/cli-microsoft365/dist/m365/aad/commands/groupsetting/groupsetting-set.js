"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadGroupSettingSetCommand_instances, _AadGroupSettingSetCommand_initOptions, _AadGroupSettingSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadGroupSettingSetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadGroupSettingSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadGroupSettingSetCommand_instances, "m", _AadGroupSettingSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadGroupSettingSetCommand_instances, "m", _AadGroupSettingSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.GROUPSETTING_SET;
    }
    get description() {
        return 'Updates the particular group setting';
    }
    allowUnknownOptions() {
        return true;
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving group setting with id '${args.options.id}'...`);
            }
            try {
                let requestOptions = {
                    url: `${this.resource}/v1.0/groupSettings/${args.options.id}`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json'
                };
                const groupSetting = yield request_1.default.get(requestOptions);
                requestOptions = {
                    url: `${this.resource}/v1.0/groupSettings/${args.options.id}`,
                    headers: {
                        accept: 'application/json;odata.metadata=none',
                        'content-type': 'application/json'
                    },
                    data: {
                        displayName: groupSetting.displayName,
                        templateId: groupSetting.templateId,
                        values: this.getGroupSettingValues(args.options, groupSetting)
                    },
                    responseType: 'json'
                };
                yield request_1.default.patch(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getGroupSettingValues(options, groupSetting) {
        const values = [];
        const excludeOptions = [
            'id',
            'debug',
            'verbose',
            'output'
        ];
        Object.keys(options).forEach(key => {
            if (excludeOptions.indexOf(key) === -1) {
                values.push({
                    name: key,
                    value: options[key]
                });
            }
        });
        groupSetting.values.forEach(v => {
            if (!values.find(e => e.name === v.name)) {
                values.push({
                    name: v.name,
                    value: v.value
                });
            }
        });
        return values;
    }
}
_AadGroupSettingSetCommand_instances = new WeakSet(), _AadGroupSettingSetCommand_initOptions = function _AadGroupSettingSetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    });
}, _AadGroupSettingSetCommand_initValidators = function _AadGroupSettingSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new AadGroupSettingSetCommand();
//# sourceMappingURL=groupsetting-set.js.map