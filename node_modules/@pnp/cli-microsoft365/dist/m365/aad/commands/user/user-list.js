"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadUserListCommand_instances, _AadUserListCommand_initTelemetry, _AadUserListCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadUserListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadUserListCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadUserListCommand_instances, "m", _AadUserListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadUserListCommand_instances, "m", _AadUserListCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.USER_LIST;
    }
    get description() {
        return 'Lists users matching specified criteria';
    }
    allowUnknownOptions() {
        return true;
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let filter = '';
                const properties = args.options.properties ?
                    args.options.properties.split(',').map(p => p.trim()) :
                    ['userPrincipalName', 'displayName'];
                try {
                    filter = this.getFilter(args.options);
                }
                catch (ex) {
                    throw ex;
                }
                const endpoint = args.options.deleted ? 'directory/deletedItems/microsoft.graph.user' : 'users';
                const url = `${this.resource}/v1.0/${endpoint}?$select=${properties.join(',')}${(filter.length > 0 ? '&' + filter : '')}&$top=100`;
                const users = yield odata_1.odata.getAllItems(url);
                logger.log(users);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getFilter(options) {
        const filters = {};
        const excludeOptions = [
            'properties',
            'p',
            'deleted',
            'd',
            'debug',
            'verbose',
            'output',
            'o',
            'query',
            '_'
        ];
        Object.keys(options).forEach(key => {
            if (excludeOptions.indexOf(key) === -1) {
                if (typeof options[key] === 'boolean') {
                    throw `Specify value for the ${key} property`;
                }
                filters[key] = encodeURIComponent(options[key].toString().replace(/'/g, `''`));
            }
        });
        let filter = Object.keys(filters).map(key => `startsWith(${key}, '${filters[key]}')`).join(' and ');
        if (filter.length > 0) {
            filter = '$filter=' + filter;
        }
        return filter;
    }
}
_AadUserListCommand_instances = new WeakSet(), _AadUserListCommand_initTelemetry = function _AadUserListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            properties: args.options.properties,
            deleted: typeof args.options.deleted !== 'undefined'
        });
    });
}, _AadUserListCommand_initOptions = function _AadUserListCommand_initOptions() {
    this.options.unshift({ option: '-p, --properties [properties]' }, { option: '-d, --deleted' });
};
module.exports = new AadUserListCommand();
//# sourceMappingURL=user-list.js.map