"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadUserGetCommand_instances, _AadUserGetCommand_initTelemetry, _AadUserGetCommand_initOptions, _AadUserGetCommand_initValidators, _AadUserGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadUserGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadUserGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadUserGetCommand_instances, "m", _AadUserGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadUserGetCommand_instances, "m", _AadUserGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadUserGetCommand_instances, "m", _AadUserGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadUserGetCommand_instances, "m", _AadUserGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.USER_GET;
    }
    get description() {
        return 'Gets information about the specified user';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const properties = args.options.properties ?
                `&$select=${args.options.properties.split(',').map(p => encodeURIComponent(p.trim())).join(',')}` :
                '';
            let requestUrl = `${this.resource}/v1.0/users`;
            if (args.options.id) {
                requestUrl += `?$filter=id eq '${encodeURIComponent(args.options.id)}'${properties}`;
            }
            else if (args.options.userName) {
                requestUrl += `?$filter=userPrincipalName eq '${encodeURIComponent(args.options.userName)}'${properties}`;
            }
            else if (args.options.email) {
                requestUrl += `?$filter=mail eq '${encodeURIComponent(args.options.email)}'${properties}`;
            }
            const requestOptions = {
                url: requestUrl,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            try {
                const res = yield request_1.default.get(requestOptions);
                const identifier = args.options.id ? `id ${args.options.id}`
                    : args.options.userName ? `user name ${args.options.userName}`
                        : `email ${args.options.email}`;
                if (res.value.length === 0) {
                    throw `The specified user with ${identifier} does not exist`;
                }
                if (res.value.length > 1) {
                    throw `Multiple users with ${identifier} found. Please disambiguate (user names): ${res.value.map(a => a.userPrincipalName).join(', ')} or (ids): ${res.value.map(a => a.id).join(', ')}`;
                }
                logger.log(res.value[0]);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_AadUserGetCommand_instances = new WeakSet(), _AadUserGetCommand_initTelemetry = function _AadUserGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            userName: typeof args.options.userName !== 'undefined',
            properties: args.options.properties
        });
    });
}, _AadUserGetCommand_initOptions = function _AadUserGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-n, --userName [userName]'
    }, {
        option: '--email [email]'
    }, {
        option: '-p, --properties [properties]'
    });
}, _AadUserGetCommand_initValidators = function _AadUserGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id &&
            !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        return true;
    }));
}, _AadUserGetCommand_initOptionSets = function _AadUserGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'userName', 'email']);
};
module.exports = new AadUserGetCommand();
//# sourceMappingURL=user-get.js.map