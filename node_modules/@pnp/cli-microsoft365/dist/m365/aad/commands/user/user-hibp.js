"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadUserHibpCommand_instances, _AadUserHibpCommand_initTelemetry, _AadUserHibpCommand_initOptions, _AadUserHibpCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const AnonymousCommand_1 = require("../../../base/AnonymousCommand");
const commands_1 = require("../../commands");
class AadUserHibpCommand extends AnonymousCommand_1.default {
    constructor() {
        super();
        _AadUserHibpCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadUserHibpCommand_instances, "m", _AadUserHibpCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadUserHibpCommand_instances, "m", _AadUserHibpCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadUserHibpCommand_instances, "m", _AadUserHibpCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.USER_HIBP;
    }
    get description() {
        return 'Allows you to retrieve all accounts that have been pwned with the specified username';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const requestOptions = {
                    url: `https://haveibeenpwned.com/api/v3/breachedaccount/${encodeURIComponent(args.options.userName)}${(args.options.domain ? `?domain=${encodeURIComponent(args.options.domain)}` : '')}`,
                    headers: {
                        'accept': 'application/json',
                        'hibp-api-key': args.options.apiKey,
                        'x-anonymous': true
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.get(requestOptions);
                logger.log(res);
            }
            catch (err) {
                if ((err && err.response !== undefined && err.response.status === 404) && (this.debug || this.verbose)) {
                    logger.log('No pwnage found');
                    return;
                }
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_AadUserHibpCommand_instances = new WeakSet(), _AadUserHibpCommand_initTelemetry = function _AadUserHibpCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            domain: args.options.domain
        });
    });
}, _AadUserHibpCommand_initOptions = function _AadUserHibpCommand_initOptions() {
    this.options.unshift({
        option: '-n, --userName <userName>'
    }, {
        option: '--apiKey, <apiKey>'
    }, {
        option: '--domain, [domain]'
    });
}, _AadUserHibpCommand_initValidators = function _AadUserHibpCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidUserPrincipalName(args.options.userName)) {
            return 'Specify valid userName';
        }
        return true;
    }));
};
module.exports = new AadUserHibpCommand();
//# sourceMappingURL=user-hibp.js.map