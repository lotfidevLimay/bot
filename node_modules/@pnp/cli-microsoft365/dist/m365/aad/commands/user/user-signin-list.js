"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadUserSigninListCommand_instances, _AadUserSigninListCommand_initTelemetry, _AadUserSigninListCommand_initOptions, _AadUserSigninListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadUserSigninListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadUserSigninListCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadUserSigninListCommand_instances, "m", _AadUserSigninListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadUserSigninListCommand_instances, "m", _AadUserSigninListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadUserSigninListCommand_instances, "m", _AadUserSigninListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.USER_SIGNIN_LIST;
    }
    get description() {
        return 'Retrieves the Azure AD user sign-ins for the tenant';
    }
    defaultProperties() {
        return ['id', 'userPrincipalName', 'appId', 'appDisplayName', 'createdDateTime'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let endpoint = `${this.resource}/v1.0/auditLogs/signIns`;
                let filter = "";
                if (args.options.userName || args.options.userId) {
                    filter = args.options.userId ?
                        `?$filter=userId eq '${encodeURIComponent(args.options.userId)}'` :
                        `?$filter=userPrincipalName eq '${encodeURIComponent(args.options.userName)}'`;
                }
                if (args.options.appId || args.options.appDisplayName) {
                    filter += filter ? " and " : "?$filter=";
                    filter += args.options.appId ?
                        `appId eq '${encodeURIComponent(args.options.appId)}'` :
                        `appDisplayName eq '${encodeURIComponent(args.options.appDisplayName)}'`;
                }
                endpoint += filter;
                const signins = yield odata_1.odata.getAllItems(endpoint);
                logger.log(signins);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_AadUserSigninListCommand_instances = new WeakSet(), _AadUserSigninListCommand_initTelemetry = function _AadUserSigninListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            userName: typeof args.options.userName !== 'undefined',
            userId: typeof args.options.userId !== 'undefined',
            appDisplayName: typeof args.options.appDisplayName !== 'undefined',
            appId: typeof args.options.appId !== 'undefined'
        });
    });
}, _AadUserSigninListCommand_initOptions = function _AadUserSigninListCommand_initOptions() {
    this.options.unshift({
        option: '-n, --userName [userName]'
    }, {
        option: '--userId [userId]'
    }, {
        option: '--appDisplayName [appDisplayName]'
    }, {
        option: '--appId [appId]'
    });
}, _AadUserSigninListCommand_initValidators = function _AadUserSigninListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.userId && args.options.userName) {
            return 'Specify either userId or userName, but not both';
        }
        if (args.options.appId && args.options.appDisplayName) {
            return 'Specify either appId or appDisplayName, but not both';
        }
        if (args.options.userId && !validation_1.validation.isValidGuid(args.options.userId)) {
            return `${args.options.userId} is not a valid GUID`;
        }
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new AadUserSigninListCommand();
//# sourceMappingURL=user-signin-list.js.map