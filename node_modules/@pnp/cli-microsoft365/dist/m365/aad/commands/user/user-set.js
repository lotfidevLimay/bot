"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadUserSetCommand_instances, _AadUserSetCommand_initTelemetry, _AadUserSetCommand_initOptions, _AadUserSetCommand_initValidators, _AadUserSetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadUserSetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadUserSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadUserSetCommand_instances, "m", _AadUserSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadUserSetCommand_instances, "m", _AadUserSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadUserSetCommand_instances, "m", _AadUserSetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadUserSetCommand_instances, "m", _AadUserSetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.USER_SET;
    }
    get description() {
        return 'Updates information about the specified user';
    }
    allowUnknownOptions() {
        return true;
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const manifest = this.mapRequestBody(args.options);
                const requestOptions = {
                    url: `${this.resource}/v1.0/users/${encodeURIComponent(args.options.objectId ? args.options.objectId : args.options.userPrincipalName)}`,
                    headers: {
                        accept: 'application/json'
                    },
                    responseType: 'json',
                    data: manifest
                };
                yield request_1.default.patch(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    mapRequestBody(options) {
        const requestBody = {};
        const excludeOptions = [
            'debug',
            'verbose',
            'output',
            'objectId',
            'i',
            'userPrincipalName',
            'n',
            'accountEnabled'
        ];
        if (options.accountEnabled) {
            requestBody['AccountEnabled'] = String(options.accountEnabled) === "true";
        }
        Object.keys(options).forEach(key => {
            if (excludeOptions.indexOf(key) === -1) {
                requestBody[key] = `${options[key]}`;
            }
        });
        return requestBody;
    }
}
_AadUserSetCommand_instances = new WeakSet(), _AadUserSetCommand_initTelemetry = function _AadUserSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            objectId: typeof args.options.objectId !== 'undefined',
            userPrincipalName: typeof args.options.userPrincipalName !== 'undefined',
            accountEnabled: (!!args.options.accountEnabled).toString()
        });
    });
}, _AadUserSetCommand_initOptions = function _AadUserSetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --objectId [objectId]'
    }, {
        option: '-n, --userPrincipalName [userPrincipalName]'
    }, {
        option: '--accountEnabled [accountEnabled]'
    });
}, _AadUserSetCommand_initValidators = function _AadUserSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.objectId &&
            !validation_1.validation.isValidGuid(args.options.objectId)) {
            return `${args.options.objectId} is not a valid GUID`;
        }
        return true;
    }));
}, _AadUserSetCommand_initOptionSets = function _AadUserSetCommand_initOptionSets() {
    this.optionSets.push(['objectId', 'userPrincipalName']);
};
module.exports = new AadUserSetCommand();
//# sourceMappingURL=user-set.js.map