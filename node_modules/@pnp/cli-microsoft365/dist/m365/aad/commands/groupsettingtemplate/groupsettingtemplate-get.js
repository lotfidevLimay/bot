"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadGroupSettingTemplateGetCommand_instances, _AadGroupSettingTemplateGetCommand_initTelemetry, _AadGroupSettingTemplateGetCommand_initOptions, _AadGroupSettingTemplateGetCommand_initValidators, _AadGroupSettingTemplateGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadGroupSettingTemplateGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadGroupSettingTemplateGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadGroupSettingTemplateGetCommand_instances, "m", _AadGroupSettingTemplateGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadGroupSettingTemplateGetCommand_instances, "m", _AadGroupSettingTemplateGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadGroupSettingTemplateGetCommand_instances, "m", _AadGroupSettingTemplateGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadGroupSettingTemplateGetCommand_instances, "m", _AadGroupSettingTemplateGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.GROUPSETTINGTEMPLATE_GET;
    }
    get description() {
        return 'Gets information about the specified Azure AD group settings template';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const templates = yield odata_1.odata.getAllItems(`${this.resource}/v1.0/groupSettingTemplates`);
                const groupSettingTemplate = templates.filter(t => args.options.id ? t.id === args.options.id : t.displayName === args.options.displayName);
                if (groupSettingTemplate && groupSettingTemplate.length > 0) {
                    logger.log(groupSettingTemplate.pop());
                }
                else {
                    throw `Resource '${(args.options.id || args.options.displayName)}' does not exist.`;
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_AadGroupSettingTemplateGetCommand_instances = new WeakSet(), _AadGroupSettingTemplateGetCommand_initTelemetry = function _AadGroupSettingTemplateGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            displayName: typeof args.options.displayName !== 'undefined'
        });
    });
}, _AadGroupSettingTemplateGetCommand_initOptions = function _AadGroupSettingTemplateGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-n, --displayName [displayName]'
    });
}, _AadGroupSettingTemplateGetCommand_initValidators = function _AadGroupSettingTemplateGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id &&
            !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        return true;
    }));
}, _AadGroupSettingTemplateGetCommand_initOptionSets = function _AadGroupSettingTemplateGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'displayName']);
};
module.exports = new AadGroupSettingTemplateGetCommand();
//# sourceMappingURL=groupsettingtemplate-get.js.map