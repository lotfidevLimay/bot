"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadAppRoleAssignmentRemoveCommand_instances, _AadAppRoleAssignmentRemoveCommand_initTelemetry, _AadAppRoleAssignmentRemoveCommand_initOptions, _AadAppRoleAssignmentRemoveCommand_initValidators, _AadAppRoleAssignmentRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadAppRoleAssignmentRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadAppRoleAssignmentRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentRemoveCommand_instances, "m", _AadAppRoleAssignmentRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentRemoveCommand_instances, "m", _AadAppRoleAssignmentRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentRemoveCommand_instances, "m", _AadAppRoleAssignmentRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentRemoveCommand_instances, "m", _AadAppRoleAssignmentRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APPROLEASSIGNMENT_REMOVE;
    }
    get description() {
        return 'Deletes an app role assignment for the specified Azure AD Application Registration';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeAppRoleAssignment = () => __awaiter(this, void 0, void 0, function* () {
                let sp;
                // get the service principal associated with the appId
                let spMatchQuery = '';
                if (args.options.appId) {
                    spMatchQuery = `appId eq '${encodeURIComponent(args.options.appId)}'`;
                }
                else if (args.options.objectId) {
                    spMatchQuery = `id eq '${encodeURIComponent(args.options.objectId)}'`;
                }
                else {
                    spMatchQuery = `displayName eq '${encodeURIComponent(args.options.displayName)}'`;
                }
                try {
                    let resp = yield this.getServicePrincipalForApp(spMatchQuery);
                    if (!resp.value.length) {
                        throw 'app registration not found';
                    }
                    sp = resp.value[0];
                    let resource = encodeURIComponent(args.options.resource);
                    // try resolve aliases that the user might enter since these are seen in the Azure portal
                    switch (args.options.resource.toLocaleLowerCase()) {
                        case 'sharepoint':
                            resource = 'Office 365 SharePoint Online';
                            break;
                        case 'intune':
                            resource = 'Microsoft Intune API';
                            break;
                        case 'exchange':
                            resource = 'Office 365 Exchange Online';
                            break;
                    }
                    // will perform resource name, appId or objectId search
                    let filter = `$filter=(displayName eq '${resource}' or startswith(displayName,'${resource}'))`;
                    if (validation_1.validation.isValidGuid(resource)) {
                        filter += ` or appId eq '${resource}' or id eq '${resource}'`;
                    }
                    const requestOptions = {
                        url: `${this.resource}/v1.0/servicePrincipals?${filter}`,
                        headers: {
                            'accept': 'application/json'
                        },
                        responseType: 'json'
                    };
                    resp = yield request_1.default.get(requestOptions);
                    if (!resp.value.length) {
                        throw 'Resource not found';
                    }
                    const appRolesToBeDeleted = [];
                    const appRolesFound = resp.value[0].appRoles;
                    if (!appRolesFound.length) {
                        throw `The resource '${args.options.resource}' does not have any application permissions available.`;
                    }
                    for (const scope of args.options.scope.split(',')) {
                        const existingRoles = appRolesFound.filter((role) => {
                            return role.value.toLocaleLowerCase() === scope.toLocaleLowerCase().trim();
                        });
                        if (!existingRoles.length) {
                            // the role specified in the scope option does not belong to the found service principles
                            // throw an error and show list with available roles (scopes)
                            let availableRoles = '';
                            appRolesFound.map((r) => availableRoles += `${os.EOL}${r.value}`);
                            throw `The scope value '${scope}' you have specified does not exist for ${args.options.resource}. ${os.EOL}Available scopes (application permissions) are: ${availableRoles}`;
                        }
                        appRolesToBeDeleted.push(existingRoles[0]);
                    }
                    const tasks = [];
                    for (const appRole of appRolesToBeDeleted) {
                        const appRoleAssignment = sp.appRoleAssignments.filter((role) => role.appRoleId === appRole.id);
                        if (!appRoleAssignment.length) {
                            throw 'App role assignment not found';
                        }
                        tasks.push(this.removeAppRoleAssignmentForServicePrincipal(sp.id, appRoleAssignment[0].id));
                    }
                    yield Promise.all(tasks);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeAppRoleAssignment();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the appRoleAssignment with scope ${args.options.scope} for resource ${args.options.resource}?`
                });
                if (result.continue) {
                    yield removeAppRoleAssignment();
                }
            }
        });
    }
    getServicePrincipalForApp(filterParam) {
        const spRequestOptions = {
            url: `${this.resource}/v1.0/servicePrincipals?$expand=appRoleAssignments&$filter=${filterParam}`,
            headers: {
                accept: 'application/json'
            },
            responseType: 'json'
        };
        return request_1.default.get(spRequestOptions);
    }
    removeAppRoleAssignmentForServicePrincipal(spId, appRoleAssignmentId) {
        const spRequestOptions = {
            url: `${this.resource}/v1.0/servicePrincipals/${spId}/appRoleAssignments/${appRoleAssignmentId}`,
            headers: {
                'accept': 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.delete(spRequestOptions);
    }
}
_AadAppRoleAssignmentRemoveCommand_instances = new WeakSet(), _AadAppRoleAssignmentRemoveCommand_initTelemetry = function _AadAppRoleAssignmentRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            displayName: typeof args.options.displayName !== 'undefined',
            objectId: typeof args.options.objectId !== 'undefined',
            confirm: (!!args.options.confirm).toString()
        });
    });
}, _AadAppRoleAssignmentRemoveCommand_initOptions = function _AadAppRoleAssignmentRemoveCommand_initOptions() {
    this.options.unshift({
        option: '--appId [appId]'
    }, {
        option: '--objectId [objectId]'
    }, {
        option: '--displayName [displayName]'
    }, {
        option: '-r, --resource <resource>',
        autocomplete: ['Microsoft Graph', 'SharePoint', 'OneNote', 'Exchange', 'Microsoft Forms', 'Azure Active Directory Graph', 'Skype for Business']
    }, {
        option: '-s, --scope <scope>'
    }, {
        option: '--confirm'
    });
}, _AadAppRoleAssignmentRemoveCommand_initValidators = function _AadAppRoleAssignmentRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        if (args.options.objectId && !validation_1.validation.isValidGuid(args.options.objectId)) {
            return `${args.options.objectId} is not a valid GUID`;
        }
        return true;
    }));
}, _AadAppRoleAssignmentRemoveCommand_initOptionSets = function _AadAppRoleAssignmentRemoveCommand_initOptionSets() {
    this.optionSets.push(['appId', 'objectId', 'displayName']);
};
module.exports = new AadAppRoleAssignmentRemoveCommand();
//# sourceMappingURL=approleassignment-remove.js.map