"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadAppRoleAssignmentAddCommand_instances, _AadAppRoleAssignmentAddCommand_initTelemetry, _AadAppRoleAssignmentAddCommand_initOptions, _AadAppRoleAssignmentAddCommand_initValidators, _AadAppRoleAssignmentAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadAppRoleAssignmentAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadAppRoleAssignmentAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentAddCommand_instances, "m", _AadAppRoleAssignmentAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentAddCommand_instances, "m", _AadAppRoleAssignmentAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentAddCommand_instances, "m", _AadAppRoleAssignmentAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentAddCommand_instances, "m", _AadAppRoleAssignmentAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APPROLEASSIGNMENT_ADD;
    }
    get description() {
        return 'Adds service principal permissions also known as scopes and app role assignments for specified Azure AD application registration';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let objectId = '';
            let queryFilter = '';
            if (args.options.appId) {
                queryFilter = `$filter=appId eq '${encodeURIComponent(args.options.appId)}'`;
            }
            else if (args.options.objectId) {
                queryFilter = `$filter=id eq '${encodeURIComponent(args.options.objectId)}'`;
            }
            else {
                queryFilter = `$filter=displayName eq '${encodeURIComponent(args.options.displayName)}'`;
            }
            const getServicePrinciplesRequestOptions = {
                url: `${this.resource}/v1.0/servicePrincipals?${queryFilter}`,
                headers: {
                    accept: 'application/json'
                },
                responseType: 'json'
            };
            try {
                const servicePrincipalResult = yield request_1.default.get(getServicePrinciplesRequestOptions);
                if (servicePrincipalResult.value.length > 1) {
                    throw 'More than one service principal found. Please use the appId or objectId option to make sure the right service principal is specified.';
                }
                objectId = servicePrincipalResult.value[0].id;
                let resource = encodeURIComponent(args.options.resource);
                // try resolve aliases that the user might enter since these are seen in the Azure portal
                switch (args.options.resource.toLocaleLowerCase()) {
                    case 'sharepoint':
                        resource = 'Office 365 SharePoint Online';
                        break;
                    case 'intune':
                        resource = 'Microsoft Intune API';
                        break;
                    case 'exchange':
                        resource = 'Office 365 Exchange Online';
                        break;
                }
                // will perform resource name, appId or objectId search
                let filter = `$filter=(displayName eq '${resource}' or startswith(displayName,'${resource}'))`;
                if (validation_1.validation.isValidGuid(resource)) {
                    filter += ` or appId eq '${resource}' or id eq '${resource}'`;
                }
                const requestOptions = {
                    url: `${this.resource}/v1.0/servicePrincipals?${filter}`,
                    headers: {
                        'accept': 'application/json'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.get(requestOptions);
                const appRoles = [];
                // flatten the app roles found
                const appRolesFound = [];
                for (const servicePrincipal of res.value) {
                    for (const role of servicePrincipal.appRoles) {
                        appRolesFound.push({
                            resourceId: servicePrincipal.id,
                            objectId: role.id,
                            value: role.value
                        });
                    }
                }
                if (!appRolesFound.length) {
                    throw `The resource '${args.options.resource}' does not have any application permissions available.`;
                }
                // search for match between the found app roles and the specified scope option value
                for (const scope of args.options.scope.split(',')) {
                    const existingRoles = appRolesFound.filter((role) => {
                        return role.value.toLocaleLowerCase() === scope.toLocaleLowerCase().trim();
                    });
                    if (!existingRoles.length) {
                        // the role specified in the scope option does not belong to the found service principles
                        // throw an error and show list with available roles (scopes)
                        let availableRoles = '';
                        appRolesFound.map((r) => availableRoles += `${os.EOL}${r.value}`);
                        throw `The scope value '${scope}' you have specified does not exist for ${args.options.resource}. ${os.EOL}Available scopes (application permissions) are: ${availableRoles}`;
                    }
                    appRoles.push(existingRoles[0]);
                }
                const tasks = [];
                for (const appRole of appRoles) {
                    tasks.push(this.addRoleToServicePrincipal(objectId, appRole));
                }
                const rolesAddedResponse = yield Promise.all(tasks);
                if (args.options.output && args.options.output.toLowerCase() === 'json') {
                    logger.log(rolesAddedResponse);
                }
                else {
                    logger.log(rolesAddedResponse.map((result) => ({
                        objectId: result.id,
                        principalDisplayName: result.principalDisplayName,
                        resourceDisplayName: result.resourceDisplayName
                    })));
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    addRoleToServicePrincipal(objectId, appRole) {
        const requestOptions = {
            url: `${this.resource}/v1.0/servicePrincipals/${objectId}/appRoleAssignments`,
            headers: {
                'Content-Type': 'application/json'
            },
            responseType: 'json',
            data: {
                appRoleId: appRole.objectId,
                principalId: objectId,
                resourceId: appRole.resourceId
            }
        };
        return request_1.default.post(requestOptions);
    }
}
_AadAppRoleAssignmentAddCommand_instances = new WeakSet(), _AadAppRoleAssignmentAddCommand_initTelemetry = function _AadAppRoleAssignmentAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            objectId: typeof args.options.objectId !== 'undefined',
            displayName: typeof args.options.displayName !== 'undefined'
        });
    });
}, _AadAppRoleAssignmentAddCommand_initOptions = function _AadAppRoleAssignmentAddCommand_initOptions() {
    this.options.unshift({
        option: '--appId [appId]'
    }, {
        option: '--objectId [objectId]'
    }, {
        option: '--displayName [displayName]'
    }, {
        option: '-r, --resource <resource>',
        autocomplete: ['Microsoft Graph', 'SharePoint', 'OneNote', 'Exchange', 'Microsoft Forms', 'Azure Active Directory Graph', 'Skype for Business']
    }, {
        option: '-s, --scope <scope>'
    });
}, _AadAppRoleAssignmentAddCommand_initValidators = function _AadAppRoleAssignmentAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        if (args.options.objectId && !validation_1.validation.isValidGuid(args.options.objectId)) {
            return `${args.options.objectId} is not a valid GUID`;
        }
        return true;
    }));
}, _AadAppRoleAssignmentAddCommand_initOptionSets = function _AadAppRoleAssignmentAddCommand_initOptionSets() {
    this.optionSets.push(['appId', 'objectId', 'displayName']);
};
module.exports = new AadAppRoleAssignmentAddCommand();
//# sourceMappingURL=approleassignment-add.js.map