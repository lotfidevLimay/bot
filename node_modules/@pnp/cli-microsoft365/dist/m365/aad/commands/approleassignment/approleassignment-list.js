"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadAppRoleAssignmentListCommand_instances, _AadAppRoleAssignmentListCommand_initTelemetry, _AadAppRoleAssignmentListCommand_initOptions, _AadAppRoleAssignmentListCommand_initValidators, _AadAppRoleAssignmentListCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadAppRoleAssignmentListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadAppRoleAssignmentListCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentListCommand_instances, "m", _AadAppRoleAssignmentListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentListCommand_instances, "m", _AadAppRoleAssignmentListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentListCommand_instances, "m", _AadAppRoleAssignmentListCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAssignmentListCommand_instances, "m", _AadAppRoleAssignmentListCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APPROLEASSIGNMENT_LIST;
    }
    get description() {
        return 'Lists app role assignments for the specified application registration';
    }
    defaultProperties() {
        return ['resourceDisplayName', 'roleName'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spAppRoleAssignments = yield this.getAppRoleAssignments(args.options);
                // the role assignment has an appRoleId but no name. To get the name,
                // we need to get all the roles from the resource. the resource is
                // a service principal. Multiple roles may have same resource id.
                const resourceIds = spAppRoleAssignments.map((item) => item.resourceId);
                const tasks = [];
                for (let i = 0; i < resourceIds.length; i++) {
                    tasks.push(this.getServicePrincipal(resourceIds[i]));
                }
                const resources = yield Promise.all(tasks);
                // loop through all appRoleAssignments for the servicePrincipal
                // and lookup the appRole.Id in the resources[resourceId].appRoles array...
                const results = [];
                spAppRoleAssignments.map((appRoleAssignment) => {
                    const resource = resources.find((r) => r.id === appRoleAssignment.resourceId);
                    if (resource) {
                        const appRole = resource.appRoles.find((r) => r.id === appRoleAssignment.appRoleId);
                        if (appRole) {
                            results.push({
                                appRoleId: appRoleAssignment.appRoleId,
                                resourceDisplayName: appRoleAssignment.resourceDisplayName,
                                resourceId: appRoleAssignment.resourceId,
                                roleId: appRole.id,
                                roleName: appRole.value,
                                created: appRoleAssignment.createdDateTime,
                                deleted: appRoleAssignment.deletedDateTime
                            });
                        }
                    }
                });
                logger.log(results);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getAppRoleAssignments(argOptions) {
        return new Promise((resolve, reject) => {
            if (argOptions.objectId) {
                this.getSPAppRoleAssignments(argOptions.objectId)
                    .then((spAppRoleAssignments) => {
                    if (!spAppRoleAssignments.value.length) {
                        reject('no app role assignments found');
                    }
                    resolve(spAppRoleAssignments.value);
                })
                    .catch((err) => {
                    reject(err);
                });
            }
            else {
                // Use existing way to get service principal object
                let spMatchQuery = '';
                if (argOptions.appId) {
                    spMatchQuery = `appId eq '${encodeURIComponent(argOptions.appId)}'`;
                }
                else {
                    spMatchQuery = `displayName eq '${encodeURIComponent(argOptions.displayName)}'`;
                }
                this.getServicePrincipalForApp(spMatchQuery)
                    .then((resp) => {
                    if (!resp.value.length) {
                        reject('app registration not found');
                    }
                    resolve(resp.value[0].appRoleAssignments);
                })
                    .catch((err) => {
                    reject(err);
                });
            }
        });
    }
    getSPAppRoleAssignments(spId) {
        const spRequestOptions = {
            url: `${this.resource}/v1.0/servicePrincipals/${spId}/appRoleAssignments`,
            headers: {
                accept: 'application/json'
            },
            responseType: 'json'
        };
        return request_1.default.get(spRequestOptions);
    }
    getServicePrincipalForApp(filterParam) {
        const spRequestOptions = {
            url: `${this.resource}/v1.0/servicePrincipals?$expand=appRoleAssignments&$filter=${filterParam}`,
            headers: {
                accept: 'application/json'
            },
            responseType: 'json'
        };
        return request_1.default.get(spRequestOptions);
    }
    getServicePrincipal(spId) {
        const spRequestOptions = {
            url: `${this.resource}/v1.0/servicePrincipals/${spId}`,
            headers: {
                accept: 'application/json'
            },
            responseType: 'json'
        };
        return request_1.default.get(spRequestOptions);
    }
}
_AadAppRoleAssignmentListCommand_instances = new WeakSet(), _AadAppRoleAssignmentListCommand_initTelemetry = function _AadAppRoleAssignmentListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            displayName: typeof args.options.displayName !== 'undefined',
            objectId: typeof args.options.objectId !== 'undefined'
        });
    });
}, _AadAppRoleAssignmentListCommand_initOptions = function _AadAppRoleAssignmentListCommand_initOptions() {
    this.options.unshift({
        option: '-i, --appId [appId]'
    }, {
        option: '-n, --displayName [displayName]'
    }, {
        option: '--objectId [objectId]'
    });
}, _AadAppRoleAssignmentListCommand_initValidators = function _AadAppRoleAssignmentListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        if (args.options.objectId && !validation_1.validation.isValidGuid(args.options.objectId)) {
            return `${args.options.objectId} is not a valid GUID`;
        }
        return true;
    }));
}, _AadAppRoleAssignmentListCommand_initOptionSets = function _AadAppRoleAssignmentListCommand_initOptionSets() {
    this.optionSets.push(['appId', 'objectId', 'displayName']);
};
module.exports = new AadAppRoleAssignmentListCommand();
//# sourceMappingURL=approleassignment-list.js.map