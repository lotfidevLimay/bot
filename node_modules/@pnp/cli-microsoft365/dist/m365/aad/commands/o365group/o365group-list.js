"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadO365GroupListCommand_instances, _AadO365GroupListCommand_initTelemetry, _AadO365GroupListCommand_initOptions, _AadO365GroupListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const odata_1 = require("../../../../utils/odata");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadO365GroupListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadO365GroupListCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadO365GroupListCommand_instances, "m", _AadO365GroupListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadO365GroupListCommand_instances, "m", _AadO365GroupListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadO365GroupListCommand_instances, "m", _AadO365GroupListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.O365GROUP_LIST;
    }
    get description() {
        return 'Lists Microsoft 365 Groups in the current tenant';
    }
    defaultProperties() {
        return ['id', 'displayName', 'mailNickname', 'deletedDateTime', 'siteUrl'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const groupFilter = `?$filter=groupTypes/any(c:c+eq+'Unified')`;
            const displayNameFilter = args.options.displayName ? ` and startswith(DisplayName,'${encodeURIComponent(args.options.displayName).replace(/'/g, `''`)}')` : '';
            const mailNicknameFilter = args.options.mailNickname ? ` and startswith(MailNickname,'${encodeURIComponent(args.options.mailNickname).replace(/'/g, `''`)}')` : '';
            const expandOwners = args.options.orphaned ? '&$expand=owners' : '';
            const topCount = '&$top=100';
            let endpoint = `${this.resource}/v1.0/groups${groupFilter}${displayNameFilter}${mailNicknameFilter}${expandOwners}${topCount}`;
            if (args.options.deleted) {
                endpoint = `${this.resource}/v1.0/directory/deletedItems/Microsoft.Graph.Group${groupFilter}${displayNameFilter}${mailNicknameFilter}${topCount}`;
            }
            try {
                let groups = [];
                groups = yield odata_1.odata.getAllItems(endpoint);
                if (args.options.orphaned) {
                    const orphanedGroups = [];
                    groups.forEach((group) => {
                        if (!group.owners || group.owners.length === 0) {
                            orphanedGroups.push(group);
                        }
                    });
                    groups = orphanedGroups;
                }
                if (args.options.includeSiteUrl) {
                    const res = yield Promise.all(groups.map(g => this.getGroupSiteUrl(g.id)));
                    res.forEach(r => {
                        for (let i = 0; i < groups.length; i++) {
                            if (groups[i].id !== r.id) {
                                continue;
                            }
                            groups[i].siteUrl = r.url;
                            break;
                        }
                    });
                }
                logger.log(groups);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getGroupSiteUrl(groupId) {
        return new Promise((resolve, reject) => {
            const requestOptions = {
                url: `${this.resource}/v1.0/groups/${groupId}/drive?$select=webUrl`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            request_1.default
                .get(requestOptions)
                .then((res) => {
                resolve({
                    id: groupId,
                    url: res.webUrl ? res.webUrl.substr(0, res.webUrl.lastIndexOf('/')) : ''
                });
            }, (err) => {
                reject(err);
            });
        });
    }
}
_AadO365GroupListCommand_instances = new WeakSet(), _AadO365GroupListCommand_initTelemetry = function _AadO365GroupListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            displayName: typeof args.options.displayName !== 'undefined',
            mailNickname: typeof args.options.mailNickname !== 'undefined',
            includeSiteUrl: args.options.includeSiteUrl,
            deleted: args.options.deleted,
            orphaned: args.options.orphaned
        });
    });
}, _AadO365GroupListCommand_initOptions = function _AadO365GroupListCommand_initOptions() {
    this.options.unshift({
        option: '-d, --displayName [displayName]'
    }, {
        option: '-m, --mailNickname [displayName]'
    }, {
        option: '--includeSiteUrl'
    }, {
        option: '--deleted'
    }, {
        option: '--orphaned'
    });
}, _AadO365GroupListCommand_initValidators = function _AadO365GroupListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.deleted && args.options.includeSiteUrl) {
            return 'You can\'t retrieve site URLs of deleted Microsoft 365 Groups';
        }
        return true;
    }));
};
module.exports = new AadO365GroupListCommand();
//# sourceMappingURL=o365group-list.js.map