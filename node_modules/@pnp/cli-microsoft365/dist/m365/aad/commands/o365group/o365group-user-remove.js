"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadO365GroupUserRemoveCommand_instances, _AadO365GroupUserRemoveCommand_initTelemetry, _AadO365GroupUserRemoveCommand_initOptions, _AadO365GroupUserRemoveCommand_initValidators, _AadO365GroupUserRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../../teams/commands");
const commands_2 = require("../../commands");
class AadO365GroupUserRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadO365GroupUserRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadO365GroupUserRemoveCommand_instances, "m", _AadO365GroupUserRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserRemoveCommand_instances, "m", _AadO365GroupUserRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserRemoveCommand_instances, "m", _AadO365GroupUserRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserRemoveCommand_instances, "m", _AadO365GroupUserRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_2.default.O365GROUP_USER_REMOVE;
    }
    get description() {
        return 'Removes the specified user from specified Microsoft 365 Group or Microsoft Teams team';
    }
    alias() {
        return [commands_1.default.USER_REMOVE];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const groupId = (typeof args.options.groupId !== 'undefined') ? args.options.groupId : args.options.teamId;
            const removeUser = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    // retrieve user
                    const user = yield request_1.default.get({
                        url: `${this.resource}/v1.0/users/${encodeURIComponent(args.options.userName)}/id`,
                        headers: {
                            accept: 'application/json;odata.metadata=none'
                        },
                        responseType: 'json'
                    });
                    // used to verify if the group exists or not
                    yield request_1.default.get({
                        url: `${this.resource}/v1.0/groups/${groupId}/id`,
                        headers: {
                            'accept': 'application/json;odata.metadata=none'
                        }
                    });
                    try {
                        // try to delete the user from the owners. Accepted error is 404
                        yield request_1.default.delete({
                            url: `${this.resource}/v1.0/groups/${groupId}/owners/${user.value}/$ref`,
                            headers: {
                                'accept': 'application/json;odata.metadata=none'
                            }
                        });
                    }
                    catch (err) {
                        // the 404 error is accepted
                        if (err.response.status !== 404) {
                            throw err.response.data;
                        }
                    }
                    // try to delete the user from the members. Accepted error is 404
                    try {
                        yield request_1.default.delete({
                            url: `${this.resource}/v1.0/groups/${groupId}/members/${user.value}/$ref`,
                            headers: {
                                'accept': 'application/json;odata.metadata=none'
                            }
                        });
                    }
                    catch (err) {
                        // the 404 error is accepted
                        if (err.response.status !== 404) {
                            throw err.response.data;
                        }
                    }
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeUser();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove ${args.options.userName} from the ${(typeof args.options.groupId !== 'undefined' ? 'group' : 'team')} ${groupId}?`
                });
                if (result.continue) {
                    yield removeUser();
                }
            }
        });
    }
}
_AadO365GroupUserRemoveCommand_instances = new WeakSet(), _AadO365GroupUserRemoveCommand_initTelemetry = function _AadO365GroupUserRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            confirm: (!(!args.options.confirm)).toString(),
            teamId: typeof args.options.teamId !== 'undefined',
            groupId: typeof args.options.groupId !== 'undefined'
        });
    });
}, _AadO365GroupUserRemoveCommand_initOptions = function _AadO365GroupUserRemoveCommand_initOptions() {
    this.options.unshift({
        option: "-i, --groupId [groupId]"
    }, {
        option: "--teamId [teamId]"
    }, {
        option: '-n, --userName <userName>'
    }, {
        option: '--confirm'
    });
}, _AadO365GroupUserRemoveCommand_initValidators = function _AadO365GroupUserRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.groupId && !validation_1.validation.isValidGuid(args.options.groupId)) {
            return `${args.options.groupId} is not a valid GUID`;
        }
        return true;
    }));
}, _AadO365GroupUserRemoveCommand_initOptionSets = function _AadO365GroupUserRemoveCommand_initOptionSets() {
    this.optionSets.push(['groupId', 'teamId']);
};
module.exports = new AadO365GroupUserRemoveCommand();
//# sourceMappingURL=o365group-user-remove.js.map