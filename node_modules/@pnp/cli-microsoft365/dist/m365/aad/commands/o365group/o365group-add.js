"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadO365GroupAddCommand_instances, _AadO365GroupAddCommand_initTelemetry, _AadO365GroupAddCommand_initOptions, _AadO365GroupAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadO365GroupAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadO365GroupAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadO365GroupAddCommand_instances, "m", _AadO365GroupAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadO365GroupAddCommand_instances, "m", _AadO365GroupAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadO365GroupAddCommand_instances, "m", _AadO365GroupAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.O365GROUP_ADD;
    }
    get description() {
        return 'Creates a Microsoft 365 Group';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let group;
            let ownerIds = [];
            let memberIds = [];
            const resourceBehaviorOptionsCollection = [];
            if (this.verbose) {
                logger.logToStderr(`Creating Microsoft 365 Group...`);
            }
            if (args.options.allowMembersToPost) {
                resourceBehaviorOptionsCollection.push("allowMembersToPost");
            }
            if (args.options.hideGroupInOutlook) {
                resourceBehaviorOptionsCollection.push("hideGroupInOutlook");
            }
            if (args.options.subscribeNewGroupMembers) {
                resourceBehaviorOptionsCollection.push("subscribeNewGroupMembers");
            }
            if (args.options.welcomeEmailDisabled) {
                resourceBehaviorOptionsCollection.push("welcomeEmailDisabled");
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/groups`,
                headers: {
                    'accept': 'application/json;odata.metadata=none'
                },
                responseType: 'json',
                data: {
                    description: args.options.description,
                    displayName: args.options.displayName,
                    groupTypes: [
                        "Unified"
                    ],
                    mailEnabled: true,
                    mailNickname: args.options.mailNickname,
                    resourceBehaviorOptions: resourceBehaviorOptionsCollection,
                    securityEnabled: false,
                    visibility: args.options.isPrivate === 'true' ? 'Private' : 'Public'
                }
            };
            try {
                ownerIds = yield this.getUserIds(logger, args.options.owners);
                memberIds = yield this.getUserIds(logger, args.options.members);
                group = yield request_1.default.post(requestOptions);
                if (!args.options.logoPath) {
                    if (this.debug) {
                        logger.logToStderr('logoPath not set. Skipping');
                    }
                }
                else {
                    const fullPath = path.resolve(args.options.logoPath);
                    if (this.verbose) {
                        logger.logToStderr(`Setting group logo ${fullPath}...`);
                    }
                    const requestOptionsPhoto = {
                        url: `${this.resource}/v1.0/groups/${group.id}/photo/$value`,
                        headers: {
                            'content-type': this.getImageContentType(fullPath)
                        },
                        data: fs.readFileSync(fullPath)
                    };
                    yield new Promise((resolve, reject) => {
                        this.setGroupLogo(requestOptionsPhoto, AadO365GroupAddCommand.numRepeat, resolve, reject, logger);
                    });
                }
                if (ownerIds.length !== 0) {
                    yield Promise.all(ownerIds.map(ownerId => request_1.default.post({
                        url: `${this.resource}/v1.0/groups/${group.id}/owners/$ref`,
                        headers: {
                            'content-type': 'application/json'
                        },
                        responseType: 'json',
                        data: {
                            "@odata.id": `https://graph.microsoft.com/v1.0/users/${ownerId}`
                        }
                    })));
                }
                if (memberIds.length !== 0) {
                    yield Promise.all(memberIds.map(memberId => request_1.default.post({
                        url: `${this.resource}/v1.0/groups/${group.id}/members/$ref`,
                        headers: {
                            'content-type': 'application/json'
                        },
                        responseType: 'json',
                        data: {
                            "@odata.id": `https://graph.microsoft.com/v1.0/users/${memberId}`
                        }
                    })));
                }
                logger.log(group);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getUserIds(logger, users) {
        if (!users) {
            if (this.debug) {
                logger.logToStderr('No users to validate, skipping.');
            }
            return Promise.resolve([]);
        }
        if (this.verbose) {
            logger.logToStderr('Retrieving user information.');
        }
        const userArr = users.split(',').map(o => o.trim());
        let promises = [];
        let userIds = [];
        promises = userArr.map(user => {
            const requestOptions = {
                url: `${this.resource}/v1.0/users?$filter=userPrincipalName eq '${formatting_1.formatting.encodeQueryParameter(user)}'&$select=id,userPrincipalName`,
                headers: {
                    'content-type': 'application/json'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        });
        return Promise.all(promises).then((usersRes) => {
            let userUpns = [];
            userUpns = usersRes.map(res => { var _a; return (_a = res.value[0]) === null || _a === void 0 ? void 0 : _a.userPrincipalName; });
            userIds = usersRes.map(res => { var _a; return (_a = res.value[0]) === null || _a === void 0 ? void 0 : _a.id; });
            // Find the members where no graph response was found
            const invalidUsers = userArr.filter(user => !userUpns.some((upn) => (upn === null || upn === void 0 ? void 0 : upn.toLowerCase()) === user.toLowerCase()));
            if (invalidUsers && invalidUsers.length > 0) {
                return Promise.reject(`Cannot proceed with group creation. The following users provided are invalid : ${invalidUsers.join(',')}`);
            }
            return Promise.resolve(userIds);
        });
    }
    setGroupLogo(requestOptions, retryLeft, resolve, reject, logger) {
        request_1.default
            .put(requestOptions)
            .then(() => resolve(), (err) => {
            if (--retryLeft > 0) {
                setTimeout(() => {
                    this.setGroupLogo(requestOptions, retryLeft, resolve, reject, logger);
                }, 500 * (AadO365GroupAddCommand.numRepeat - retryLeft));
            }
            else {
                reject(err);
            }
        });
    }
    getImageContentType(imagePath) {
        const extension = imagePath.substr(imagePath.lastIndexOf('.')).toLowerCase();
        switch (extension) {
            case '.png':
                return 'image/png';
            case '.gif':
                return 'image/gif';
            default:
                return 'image/jpeg';
        }
    }
}
_AadO365GroupAddCommand_instances = new WeakSet(), _AadO365GroupAddCommand_initTelemetry = function _AadO365GroupAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            owners: typeof args.options.owners !== 'undefined',
            members: typeof args.options.members !== 'undefined',
            logoPath: typeof args.options.logoPath !== 'undefined',
            isPrivate: typeof args.options.isPrivate !== 'undefined',
            allowMembersToPost: (!(!args.options.allowMembersToPost)).toString(),
            hideGroupInOutlook: (!(!args.options.hideGroupInOutlook)).toString(),
            subscribeNewGroupMembers: (!(!args.options.subscribeNewGroupMembers)).toString(),
            welcomeEmailDisabled: (!(!args.options.welcomeEmailDisabled)).toString()
        });
    });
}, _AadO365GroupAddCommand_initOptions = function _AadO365GroupAddCommand_initOptions() {
    this.options.unshift({
        option: '-n, --displayName <displayName>'
    }, {
        option: '-d, --description <description>'
    }, {
        option: '-m, --mailNickname <mailNickname>'
    }, {
        option: '--owners [owners]'
    }, {
        option: '--members [members]'
    }, {
        option: '--isPrivate [isPrivate]'
    }, {
        option: '--allowMembersToPost [allowMembersToPost]'
    }, {
        option: '--hideGroupInOutlook [hideGroupInOutlook]'
    }, {
        option: '--subscribeNewGroupMembers [subscribeNewGroupMembers]'
    }, {
        option: '--welcomeEmailDisabled [welcomeEmailDisabled]'
    }, {
        option: '-l, --logoPath [logoPath]'
    });
}, _AadO365GroupAddCommand_initValidators = function _AadO365GroupAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.owners) {
            const owners = args.options.owners.split(',').map(o => o.trim());
            for (let i = 0; i < owners.length; i++) {
                if (owners[i].indexOf('@') < 0) {
                    return `${owners[i]} is not a valid userPrincipalName`;
                }
            }
        }
        if (args.options.members) {
            const members = args.options.members.split(',').map(m => m.trim());
            for (let i = 0; i < members.length; i++) {
                if (members[i].indexOf('@') < 0) {
                    return `${members[i]} is not a valid userPrincipalName`;
                }
            }
        }
        if (typeof args.options.isPrivate !== 'undefined' &&
            args.options.isPrivate !== 'true' &&
            args.options.isPrivate !== 'false') {
            return `${args.options.isPrivate} is not a valid boolean value`;
        }
        if (args.options.logoPath) {
            const fullPath = path.resolve(args.options.logoPath);
            if (!fs.existsSync(fullPath)) {
                return `File '${fullPath}' not found`;
            }
            if (fs.lstatSync(fullPath).isDirectory()) {
                return `Path '${fullPath}' points to a directory`;
            }
        }
        return true;
    }));
};
AadO365GroupAddCommand.numRepeat = 15;
module.exports = new AadO365GroupAddCommand();
//# sourceMappingURL=o365group-add.js.map