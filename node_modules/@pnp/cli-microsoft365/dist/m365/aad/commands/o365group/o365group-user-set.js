"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadO365GroupUserSetCommand_instances, _AadO365GroupUserSetCommand_initTelemetry, _AadO365GroupUserSetCommand_initOptions, _AadO365GroupUserSetCommand_initValidators, _AadO365GroupUserSetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../../teams/commands");
const commands_2 = require("../../commands");
class AadO365GroupUserSetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadO365GroupUserSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadO365GroupUserSetCommand_instances, "m", _AadO365GroupUserSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserSetCommand_instances, "m", _AadO365GroupUserSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserSetCommand_instances, "m", _AadO365GroupUserSetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserSetCommand_instances, "m", _AadO365GroupUserSetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_2.default.O365GROUP_USER_SET;
    }
    get description() {
        return 'Updates role of the specified user in the specified Microsoft 365 Group or Microsoft Teams team';
    }
    alias() {
        return [commands_1.default.USER_SET];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const groupId = (typeof args.options.groupId !== 'undefined') ? args.options.groupId : args.options.teamId;
                let users = yield this.getOwners(logger, groupId);
                const membersAndGuests = yield this.getMembersAndGuests(logger, groupId);
                users = users.concat(membersAndGuests);
                // Filter out duplicate added values for owners (as they are returned as members as well)
                users = users.filter((groupUser, index, self) => index === self.findIndex((t) => (t.id === groupUser.id && t.displayName === groupUser.displayName)));
                if (this.debug) {
                    logger.logToStderr((typeof args.options.groupId !== 'undefined') ? 'Group owners and members:' : 'Team owners and members:');
                    logger.logToStderr(users);
                    logger.logToStderr('');
                }
                if (users.filter(i => args.options.userName.toUpperCase() === i.userPrincipalName.toUpperCase()).length <= 0) {
                    const userNotInGroup = (typeof args.options.groupId !== 'undefined') ?
                        'The specified user does not belong to the given Microsoft 365 Group. Please use the \'o365group user add\' command to add new users.' :
                        'The specified user does not belong to the given Microsoft Teams team. Please use the \'graph teams user add\' command to add new users.';
                    throw new Error(userNotInGroup);
                }
                if (args.options.role === "Owner") {
                    const foundMember = users.find(e => args.options.userName.toUpperCase() === e.userPrincipalName.toUpperCase() && e.userType === 'Member');
                    if (foundMember !== undefined) {
                        const endpoint = `${this.resource}/v1.0/groups/${groupId}/owners/$ref`;
                        const requestOptions = {
                            url: endpoint,
                            headers: {
                                'accept': 'application/json;odata.metadata=none'
                            },
                            responseType: 'json',
                            data: { "@odata.id": "https://graph.microsoft.com/v1.0/directoryObjects/" + foundMember.id }
                        };
                        yield request_1.default.post(requestOptions);
                    }
                    else {
                        const userAlreadyOwner = (typeof args.options.groupId !== 'undefined') ?
                            'The specified user is already an owner in the specified Microsoft 365 group, and thus cannot be promoted.' :
                            'The specified user is already an owner in the specified Microsoft Teams team, and thus cannot be promoted.';
                        throw new Error(userAlreadyOwner);
                    }
                }
                else {
                    const foundOwner = users.find(e => args.options.userName.toUpperCase() === e.userPrincipalName.toUpperCase() && e.userType === 'Owner');
                    if (foundOwner !== undefined) {
                        const endpoint = `${this.resource}/v1.0/groups/${groupId}/owners/${foundOwner.id}/$ref`;
                        const requestOptions = {
                            url: endpoint,
                            headers: {
                                'accept': 'application/json;odata.metadata=none'
                            }
                        };
                        yield request_1.default.delete(requestOptions);
                    }
                    else {
                        const userAlreadyMember = (typeof args.options.groupId !== 'undefined') ?
                            'The specified user is already a member in the specified Microsoft 365 group, and thus cannot be demoted.' :
                            'The specified user is already a member in the specified Microsoft Teams team, and thus cannot be demoted.';
                        throw new Error(userAlreadyMember);
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getOwners(logger, groupId) {
        const endpoint = `${this.resource}/v1.0/groups/${groupId}/owners?$select=id,displayName,userPrincipalName,userType`;
        return odata_1.odata
            .getAllItems(endpoint)
            .then(users => {
            // Currently there is a bug in the Microsoft Graph that returns Owners as
            // userType 'member'. We therefore update all returned user as owner
            users.forEach(user => {
                user.userType = 'Owner';
            });
            return users;
        });
    }
    getMembersAndGuests(logger, groupId) {
        const endpoint = `${this.resource}/v1.0/groups/${groupId}/members?$select=id,displayName,userPrincipalName,userType`;
        return odata_1.odata.getAllItems(endpoint);
    }
}
_AadO365GroupUserSetCommand_instances = new WeakSet(), _AadO365GroupUserSetCommand_initTelemetry = function _AadO365GroupUserSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            teamId: typeof args.options.teamId !== 'undefined',
            groupId: typeof args.options.groupId !== 'undefined',
            role: args.options.role
        });
    });
}, _AadO365GroupUserSetCommand_initOptions = function _AadO365GroupUserSetCommand_initOptions() {
    this.options.unshift({
        option: "-i, --groupId [groupId]"
    }, {
        option: "--teamId [teamId]"
    }, {
        option: '-n, --userName <userName>'
    }, {
        option: '-r, --role <role>',
        autocomplete: ['Owner', 'Member']
    });
}, _AadO365GroupUserSetCommand_initValidators = function _AadO365GroupUserSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.groupId && !validation_1.validation.isValidGuid(args.options.groupId)) {
            return `${args.options.groupId} is not a valid GUID`;
        }
        if (['Owner', 'Member'].indexOf(args.options.role) === -1) {
            return `${args.options.role} is not a valid role value. Allowed values Owner|Member`;
        }
        return true;
    }));
}, _AadO365GroupUserSetCommand_initOptionSets = function _AadO365GroupUserSetCommand_initOptionSets() {
    this.optionSets.push(['groupId', 'teamId']);
};
module.exports = new AadO365GroupUserSetCommand();
//# sourceMappingURL=o365group-user-set.js.map