"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadO365GroupConversationPostListCommand_instances, _AadO365GroupConversationPostListCommand_initTelemetry, _AadO365GroupConversationPostListCommand_initOptions, _AadO365GroupConversationPostListCommand_initValidators, _AadO365GroupConversationPostListCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadO365GroupConversationPostListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadO365GroupConversationPostListCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadO365GroupConversationPostListCommand_instances, "m", _AadO365GroupConversationPostListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadO365GroupConversationPostListCommand_instances, "m", _AadO365GroupConversationPostListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadO365GroupConversationPostListCommand_instances, "m", _AadO365GroupConversationPostListCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadO365GroupConversationPostListCommand_instances, "m", _AadO365GroupConversationPostListCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.O365GROUP_CONVERSATION_POST_LIST;
    }
    get description() {
        return 'Lists conversation posts of a Microsoft 365 group';
    }
    defaultProperties() {
        return ['receivedDateTime', 'id'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const retrievedgroupId = yield this.getGroupId(args);
                const posts = yield odata_1.odata.getAllItems(`${this.resource}/v1.0/groups/${retrievedgroupId}/threads/${args.options.threadId}/posts`);
                logger.log(posts);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getGroupId(args) {
        if (args.options.groupId) {
            return Promise.resolve(encodeURIComponent(args.options.groupId));
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.groupDisplayName)
            .then(group => group.id);
    }
}
_AadO365GroupConversationPostListCommand_instances = new WeakSet(), _AadO365GroupConversationPostListCommand_initTelemetry = function _AadO365GroupConversationPostListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            groupId: typeof args.options.groupId !== 'undefined',
            groupDisplayName: typeof args.options.groupDisplayName !== 'undefined'
        });
    });
}, _AadO365GroupConversationPostListCommand_initOptions = function _AadO365GroupConversationPostListCommand_initOptions() {
    this.options.unshift({
        option: '-i, --groupId [groupId]'
    }, {
        option: '-d, --groupDisplayName [groupDisplayName]'
    }, {
        option: '-t, --threadId <threadId>'
    });
}, _AadO365GroupConversationPostListCommand_initValidators = function _AadO365GroupConversationPostListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.groupId && !validation_1.validation.isValidGuid(args.options.groupId)) {
            return `${args.options.groupId} is not a valid GUID`;
        }
        return true;
    }));
}, _AadO365GroupConversationPostListCommand_initOptionSets = function _AadO365GroupConversationPostListCommand_initOptionSets() {
    this.optionSets.push(['groupId', 'groupDisplayName']);
};
module.exports = new AadO365GroupConversationPostListCommand();
//# sourceMappingURL=o365group-conversation-post-list.js.map