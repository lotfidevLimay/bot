"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadO365GroupSetCommand_instances, _AadO365GroupSetCommand_initTelemetry, _AadO365GroupSetCommand_initOptions, _AadO365GroupSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadO365GroupSetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadO365GroupSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadO365GroupSetCommand_instances, "m", _AadO365GroupSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadO365GroupSetCommand_instances, "m", _AadO365GroupSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadO365GroupSetCommand_instances, "m", _AadO365GroupSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.O365GROUP_SET;
    }
    get description() {
        return 'Updates Microsoft 365 Group properties';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (args.options.displayName || args.options.description || typeof args.options.isPrivate !== 'undefined') {
                    if (this.verbose) {
                        logger.logToStderr(`Updating Microsoft 365 Group ${args.options.id}...`);
                    }
                    const update = {};
                    if (args.options.displayName) {
                        update.displayName = args.options.displayName;
                    }
                    if (args.options.description) {
                        update.description = args.options.description;
                    }
                    if (typeof args.options.isPrivate !== 'undefined') {
                        update.visibility = args.options.isPrivate === 'true' ? 'Private' : 'Public';
                    }
                    const requestOptions = {
                        url: `${this.resource}/v1.0/groups/${args.options.id}`,
                        headers: {
                            'accept': 'application/json;odata.metadata=none'
                        },
                        responseType: 'json',
                        data: update
                    };
                    yield request_1.default.patch(requestOptions);
                }
                if (args.options.logoPath) {
                    const fullPath = path.resolve(args.options.logoPath);
                    if (this.verbose) {
                        logger.logToStderr(`Setting group logo ${fullPath}...`);
                    }
                    const requestOptions = {
                        url: `${this.resource}/v1.0/groups/${args.options.id}/photo/$value`,
                        headers: {
                            'content-type': this.getImageContentType(fullPath)
                        },
                        data: fs.readFileSync(fullPath)
                    };
                    yield new Promise((resolve, reject) => {
                        this.setGroupLogo(requestOptions, AadO365GroupSetCommand.numRepeat, resolve, reject, logger);
                    });
                }
                else if (this.debug) {
                    logger.logToStderr('logoPath not set. Skipping');
                }
                if (args.options.owners) {
                    const owners = args.options.owners.split(',').map(o => o.trim());
                    if (this.verbose) {
                        logger.logToStderr('Retrieving user information to set group owners...');
                    }
                    const requestOptions = {
                        url: `${this.resource}/v1.0/users?$filter=${owners.map(o => `userPrincipalName eq '${o}'`).join(' or ')}&$select=id`,
                        headers: {
                            'content-type': 'application/json'
                        },
                        responseType: 'json'
                    };
                    const res = yield request_1.default.get(requestOptions);
                    yield Promise.all(res.value.map(u => request_1.default.post({
                        url: `${this.resource}/v1.0/groups/${args.options.id}/owners/$ref`,
                        headers: {
                            'content-type': 'application/json'
                        },
                        responseType: 'json',
                        data: {
                            "@odata.id": `https://graph.microsoft.com/v1.0/users/${u.id}`
                        }
                    })));
                }
                else if (this.debug) {
                    logger.logToStderr('Owners not set. Skipping');
                }
                if (args.options.members) {
                    const members = args.options.members.split(',').map(o => o.trim());
                    if (this.verbose) {
                        logger.logToStderr('Retrieving user information to set group members...');
                    }
                    const requestOptions = {
                        url: `${this.resource}/v1.0/users?$filter=${members.map(o => `userPrincipalName eq '${o}'`).join(' or ')}&$select=id`,
                        headers: {
                            'content-type': 'application/json'
                        },
                        responseType: 'json'
                    };
                    const res = yield request_1.default.get(requestOptions);
                    yield Promise.all(res.value.map(u => request_1.default.post({
                        url: `${this.resource}/v1.0/groups/${args.options.id}/members/$ref`,
                        headers: {
                            'content-type': 'application/json'
                        },
                        responseType: 'json',
                        data: {
                            "@odata.id": `https://graph.microsoft.com/v1.0/users/${u.id}`
                        }
                    })));
                }
                else if (this.debug) {
                    logger.logToStderr('Members not set. Skipping');
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    setGroupLogo(requestOptions, retryLeft, resolve, reject, logger) {
        request_1.default
            .put(requestOptions)
            .then((res) => {
            if (this.debug) {
                logger.logToStderr('Response:');
                logger.logToStderr(res);
                logger.logToStderr('');
            }
            resolve();
        }, (err) => {
            if (--retryLeft > 0) {
                setTimeout(() => {
                    this.setGroupLogo(requestOptions, retryLeft, resolve, reject, logger);
                }, 500 * (AadO365GroupSetCommand.numRepeat - retryLeft));
            }
            else {
                reject(err);
            }
        });
    }
    getImageContentType(imagePath) {
        const extension = imagePath.substr(imagePath.lastIndexOf('.')).toLowerCase();
        switch (extension) {
            case '.png':
                return 'image/png';
            case '.gif':
                return 'image/gif';
            default:
                return 'image/jpeg';
        }
    }
}
_AadO365GroupSetCommand_instances = new WeakSet(), _AadO365GroupSetCommand_initTelemetry = function _AadO365GroupSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            displayName: typeof args.options.displayName !== 'undefined',
            description: typeof args.options.description !== 'undefined',
            owners: typeof args.options.owners !== 'undefined',
            members: typeof args.options.members !== 'undefined',
            isPrivate: typeof args.options.isPrivate !== 'undefined',
            logoPath: typeof args.options.logoPath !== 'undefined'
        });
    });
}, _AadO365GroupSetCommand_initOptions = function _AadO365GroupSetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '-n, --displayName [displayName]'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '--owners [owners]'
    }, {
        option: '--members [members]'
    }, {
        option: '--isPrivate [isPrivate]'
    }, {
        option: '-l, --logoPath [logoPath]'
    });
}, _AadO365GroupSetCommand_initValidators = function _AadO365GroupSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!args.options.displayName &&
            !args.options.description &&
            !args.options.members &&
            !args.options.owners &&
            typeof args.options.isPrivate === 'undefined' &&
            !args.options.logoPath) {
            return 'Specify at least one property to update';
        }
        if (!validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        if (args.options.owners) {
            const owners = args.options.owners.split(',').map(o => o.trim());
            for (let i = 0; i < owners.length; i++) {
                if (owners[i].indexOf('@') < 0) {
                    return `${owners[i]} is not a valid userPrincipalName`;
                }
            }
        }
        if (args.options.members) {
            const members = args.options.members.split(',').map(m => m.trim());
            for (let i = 0; i < members.length; i++) {
                if (members[i].indexOf('@') < 0) {
                    return `${members[i]} is not a valid userPrincipalName`;
                }
            }
        }
        if (typeof args.options.isPrivate !== 'undefined' &&
            args.options.isPrivate !== 'true' &&
            args.options.isPrivate !== 'false') {
            return `${args.options.isPrivate} is not a valid boolean value`;
        }
        if (args.options.logoPath) {
            const fullPath = path.resolve(args.options.logoPath);
            if (!fs.existsSync(fullPath)) {
                return `File '${fullPath}' not found`;
            }
            if (fs.lstatSync(fullPath).isDirectory()) {
                return `Path '${fullPath}' points to a directory`;
            }
        }
        return true;
    }));
};
AadO365GroupSetCommand.numRepeat = 15;
module.exports = new AadO365GroupSetCommand();
//# sourceMappingURL=o365group-set.js.map