"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadO365GroupUserAddCommand_instances, _AadO365GroupUserAddCommand_initTelemetry, _AadO365GroupUserAddCommand_initOptions, _AadO365GroupUserAddCommand_initValidators, _AadO365GroupUserAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../../teams/commands");
const commands_2 = require("../../commands");
class AadO365GroupUserAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadO365GroupUserAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadO365GroupUserAddCommand_instances, "m", _AadO365GroupUserAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserAddCommand_instances, "m", _AadO365GroupUserAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserAddCommand_instances, "m", _AadO365GroupUserAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserAddCommand_instances, "m", _AadO365GroupUserAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_2.default.O365GROUP_USER_ADD;
    }
    get description() {
        return 'Adds user to specified Microsoft 365 Group or Microsoft Teams team';
    }
    alias() {
        return [commands_1.default.USER_ADD];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const providedGroupId = (typeof args.options.groupId !== 'undefined') ? args.options.groupId : args.options.teamId;
                let requestOptions = {
                    url: `${this.resource}/v1.0/users/${encodeURIComponent(args.options.userName)}/id`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.get(requestOptions);
                const endpoint = `${this.resource}/v1.0/groups/${providedGroupId}/${((typeof args.options.role !== 'undefined') ? args.options.role : '').toLowerCase() === 'owner' ? 'owners' : 'members'}/$ref`;
                requestOptions = {
                    url: endpoint,
                    headers: {
                        'accept': 'application/json;odata.metadata=none'
                    },
                    responseType: 'json',
                    data: { "@odata.id": "https://graph.microsoft.com/v1.0/directoryObjects/" + res.value }
                };
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_AadO365GroupUserAddCommand_instances = new WeakSet(), _AadO365GroupUserAddCommand_initTelemetry = function _AadO365GroupUserAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            role: args.options.role,
            teamId: typeof args.options.teamId !== 'undefined',
            groupId: typeof args.options.groupId !== 'undefined'
        });
    });
}, _AadO365GroupUserAddCommand_initOptions = function _AadO365GroupUserAddCommand_initOptions() {
    this.options.unshift({
        option: '-n, --userName <userName>'
    }, {
        option: "-i, --groupId [groupId]"
    }, {
        option: "--teamId [teamId]"
    }, {
        option: '-r, --role [role]',
        autocomplete: ['Owner', 'Member']
    });
}, _AadO365GroupUserAddCommand_initValidators = function _AadO365GroupUserAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.groupId && !validation_1.validation.isValidGuid(args.options.groupId)) {
            return `${args.options.groupId} is not a valid GUID`;
        }
        if (args.options.role) {
            if (['owner', 'member'].indexOf(args.options.role.toLowerCase()) === -1) {
                return `${args.options.role} is not a valid role value. Allowed values Owner|Member`;
            }
        }
        return true;
    }));
}, _AadO365GroupUserAddCommand_initOptionSets = function _AadO365GroupUserAddCommand_initOptionSets() {
    this.optionSets.push(['groupId', 'teamId']);
};
module.exports = new AadO365GroupUserAddCommand();
//# sourceMappingURL=o365group-user-add.js.map