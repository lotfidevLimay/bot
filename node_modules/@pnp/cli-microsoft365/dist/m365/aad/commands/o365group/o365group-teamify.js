"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadO365GroupTeamifyCommand_instances, _AadO365GroupTeamifyCommand_initTelemetry, _AadO365GroupTeamifyCommand_initOptions, _AadO365GroupTeamifyCommand_initValidators, _AadO365GroupTeamifyCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadO365GroupTeamifyCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadO365GroupTeamifyCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadO365GroupTeamifyCommand_instances, "m", _AadO365GroupTeamifyCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadO365GroupTeamifyCommand_instances, "m", _AadO365GroupTeamifyCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadO365GroupTeamifyCommand_instances, "m", _AadO365GroupTeamifyCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadO365GroupTeamifyCommand_instances, "m", _AadO365GroupTeamifyCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.O365GROUP_TEAMIFY;
    }
    get description() {
        return 'Creates a new Microsoft Teams team under existing Microsoft 365 group';
    }
    getGroupId(args) {
        if (args.options.groupId) {
            return Promise.resolve(args.options.groupId);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/groups?$filter=mailNickname eq '${encodeURIComponent(args.options.mailNickname)}'`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then(response => {
            const groupItem = response.value[0];
            if (!groupItem) {
                return Promise.reject(`The specified Microsoft 365 Group does not exist`);
            }
            if (response.value.length > 1) {
                return Promise.reject(`Multiple Microsoft 365 Groups with name ${args.options.mailNickname} found: ${response.value.map(x => x.id)}`);
            }
            return Promise.resolve(groupItem.id);
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = {
                    "memberSettings": {
                        "allowCreatePrivateChannels": true,
                        "allowCreateUpdateChannels": true
                    },
                    "messagingSettings": {
                        "allowUserEditMessages": true,
                        "allowUserDeleteMessages": true
                    },
                    "funSettings": {
                        "allowGiphy": true,
                        "giphyContentRating": "strict"
                    }
                };
                const groupId = yield this.getGroupId(args);
                const requestOptions = {
                    url: `${this.resource}/v1.0/groups/${encodeURIComponent(groupId)}/team`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    data: data,
                    responseType: 'json'
                };
                yield request_1.default.put(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_AadO365GroupTeamifyCommand_instances = new WeakSet(), _AadO365GroupTeamifyCommand_initTelemetry = function _AadO365GroupTeamifyCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            groupId: typeof args.options.groupId !== 'undefined',
            mailNickname: typeof args.options.mailNickname !== 'undefined'
        });
    });
}, _AadO365GroupTeamifyCommand_initOptions = function _AadO365GroupTeamifyCommand_initOptions() {
    this.options.unshift({
        option: '-i, --groupId [groupId]'
    }, {
        option: '--mailNickname [mailNickname]'
    });
}, _AadO365GroupTeamifyCommand_initValidators = function _AadO365GroupTeamifyCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.groupId && !validation_1.validation.isValidGuid(args.options.groupId)) {
            return `${args.options.groupId} is not a valid GUID`;
        }
        return true;
    }));
}, _AadO365GroupTeamifyCommand_initOptionSets = function _AadO365GroupTeamifyCommand_initOptionSets() {
    this.optionSets.push(['groupId', 'mailNickname']);
};
module.exports = new AadO365GroupTeamifyCommand();
//# sourceMappingURL=o365group-teamify.js.map