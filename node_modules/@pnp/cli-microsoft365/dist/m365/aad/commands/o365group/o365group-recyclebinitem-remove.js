"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadO365GroupRecycleBinItemRemoveCommand_instances, _AadO365GroupRecycleBinItemRemoveCommand_initTelemetry, _AadO365GroupRecycleBinItemRemoveCommand_initOptions, _AadO365GroupRecycleBinItemRemoveCommand_initValidators, _AadO365GroupRecycleBinItemRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadO365GroupRecycleBinItemRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadO365GroupRecycleBinItemRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadO365GroupRecycleBinItemRemoveCommand_instances, "m", _AadO365GroupRecycleBinItemRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadO365GroupRecycleBinItemRemoveCommand_instances, "m", _AadO365GroupRecycleBinItemRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadO365GroupRecycleBinItemRemoveCommand_instances, "m", _AadO365GroupRecycleBinItemRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadO365GroupRecycleBinItemRemoveCommand_instances, "m", _AadO365GroupRecycleBinItemRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.O365GROUP_RECYCLEBINITEM_REMOVE;
    }
    get description() {
        return 'Permanently deletes a Microsoft 365 Group from the recycle bin in the current tenant';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeGroup = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const groupId = yield this.getGroupId(args.options);
                    const requestOptions = {
                        url: `${this.resource}/v1.0/directory/deletedItems/${groupId}`,
                        headers: {
                            accept: 'application/json;odata.metadata=none'
                        },
                        responseType: 'json'
                    };
                    yield request_1.default.delete(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeGroup();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the group '${args.options.id || args.options.displayName || args.options.mailNickname}'?`
                });
                if (result.continue) {
                    yield removeGroup();
                }
            }
        });
    }
    getGroupId(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id, displayName, mailNickname } = options;
            if (id) {
                return id;
            }
            let filterValue = '';
            if (displayName) {
                filterValue = `displayName eq '${formatting_1.formatting.encodeQueryParameter(displayName)}'`;
            }
            if (mailNickname) {
                filterValue = `mailNickname eq '${formatting_1.formatting.encodeQueryParameter(mailNickname)}'`;
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/directory/deletedItems/Microsoft.Graph.Group?$filter=${filterValue}`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            const response = yield request_1.default.get(requestOptions);
            const groups = response.value;
            if (groups.length === 0) {
                throw Error(`The specified group '${displayName || mailNickname}' does not exist.`);
            }
            if (groups.length > 1) {
                throw Error(`Multiple groups with name '${displayName || mailNickname}' found: ${groups.map(x => x.id).join(',')}.`);
            }
            return groups[0].id;
        });
    }
}
_AadO365GroupRecycleBinItemRemoveCommand_instances = new WeakSet(), _AadO365GroupRecycleBinItemRemoveCommand_initTelemetry = function _AadO365GroupRecycleBinItemRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            displayName: typeof args.options.displayName !== 'undefined',
            mailNickname: typeof args.options.mailNickname !== 'undefined',
            confirm: !!args.options.confirm
        });
    });
}, _AadO365GroupRecycleBinItemRemoveCommand_initOptions = function _AadO365GroupRecycleBinItemRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-d, --displayName [displayName]'
    }, {
        option: '-m, --mailNickname [mailNickname]'
    }, {
        option: '--confirm'
    });
}, _AadO365GroupRecycleBinItemRemoveCommand_initValidators = function _AadO365GroupRecycleBinItemRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id && !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        return true;
    }));
}, _AadO365GroupRecycleBinItemRemoveCommand_initOptionSets = function _AadO365GroupRecycleBinItemRemoveCommand_initOptionSets() {
    this.optionSets.push(['id', 'displayName', 'mailNickname']);
};
module.exports = new AadO365GroupRecycleBinItemRemoveCommand();
//# sourceMappingURL=o365group-recyclebinitem-remove.js.map