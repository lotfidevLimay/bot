"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadO365GroupUserListCommand_instances, _AadO365GroupUserListCommand_initTelemetry, _AadO365GroupUserListCommand_initOptions, _AadO365GroupUserListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadO365GroupUserListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadO365GroupUserListCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadO365GroupUserListCommand_instances, "m", _AadO365GroupUserListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserListCommand_instances, "m", _AadO365GroupUserListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadO365GroupUserListCommand_instances, "m", _AadO365GroupUserListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.O365GROUP_USER_LIST;
    }
    get description() {
        return "Lists users for the specified Microsoft 365 group";
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let users = yield this.getOwners(logger, args.options.groupId);
                if (args.options.role !== 'Owner') {
                    const membersAndGuests = yield this.getMembersAndGuests(logger, args.options.groupId);
                    users = users.concat(membersAndGuests);
                }
                if (args.options.role) {
                    users = users.filter(i => i.userType === args.options.role);
                }
                logger.log(users);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getOwners(logger, groupId) {
        const endpoint = `${this.resource}/v1.0/groups/${groupId}/owners?$select=id,displayName,userPrincipalName,userType`;
        return odata_1.odata
            .getAllItems(endpoint)
            .then(users => {
            // Currently there is a bug in the Microsoft Graph that returns Owners as
            // userType 'member'. We therefore update all returned user as owner
            users.forEach(user => {
                user.userType = 'Owner';
            });
            return users;
        });
    }
    getMembersAndGuests(logger, groupId) {
        const endpoint = `${this.resource}/v1.0/groups/${groupId}/members?$select=id,displayName,userPrincipalName,userType`;
        return odata_1.odata.getAllItems(endpoint);
    }
}
_AadO365GroupUserListCommand_instances = new WeakSet(), _AadO365GroupUserListCommand_initTelemetry = function _AadO365GroupUserListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            role: args.options.role
        });
    });
}, _AadO365GroupUserListCommand_initOptions = function _AadO365GroupUserListCommand_initOptions() {
    this.options.unshift({
        option: "-i, --groupId <groupId>"
    }, {
        option: "-r, --role [type]",
        autocomplete: ["Owner", "Member", "Guest"]
    });
}, _AadO365GroupUserListCommand_initValidators = function _AadO365GroupUserListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.groupId)) {
            return `${args.options.groupId} is not a valid GUID`;
        }
        if (args.options.role) {
            if (['Owner', 'Member', 'Guest'].indexOf(args.options.role) === -1) {
                return `${args.options.role} is not a valid role value. Allowed values Owner|Member|Guest`;
            }
        }
        return true;
    }));
};
module.exports = new AadO365GroupUserListCommand();
//# sourceMappingURL=o365group-user-list.js.map