"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
const SiteClassificationSettings_1 = require("./SiteClassificationSettings");
class AadSiteClassificationGetCommand extends GraphCommand_1.default {
    get name() {
        return commands_1.default.SITECLASSIFICATION_GET;
    }
    get description() {
        return 'Gets site classification configuration';
    }
    commandAction(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const requestOptions = {
                    url: `${this.resource}/v1.0/groupSettings`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.get(requestOptions);
                if (res.value.length === 0) {
                    throw 'Site classification is not enabled.';
                }
                const unifiedGroupSetting = res.value.filter((directorySetting) => {
                    return directorySetting.displayName === 'Group.Unified';
                });
                if (unifiedGroupSetting === null || unifiedGroupSetting.length === 0) {
                    throw "Missing DirectorySettingTemplate for \"Group.Unified\"";
                }
                const siteClassificationsSettings = new SiteClassificationSettings_1.SiteClassificationSettings();
                // Get the classification list
                const classificationList = unifiedGroupSetting[0].values.filter((directorySetting) => {
                    return directorySetting.name === 'ClassificationList';
                });
                siteClassificationsSettings.Classifications = [];
                if (classificationList !== null && classificationList.length > 0) {
                    siteClassificationsSettings.Classifications = classificationList[0].value.split(',');
                }
                // Get the UsageGuidelinesUrl
                const guidanceUrl = unifiedGroupSetting[0].values.filter((directorySetting) => {
                    return directorySetting.name === 'UsageGuidelinesUrl';
                });
                siteClassificationsSettings.UsageGuidelinesUrl = "";
                if (guidanceUrl !== null && guidanceUrl.length > 0) {
                    siteClassificationsSettings.UsageGuidelinesUrl = guidanceUrl[0].value;
                }
                // Get the GuestUsageGuidelinesUrl
                const guestGuidanceUrl = unifiedGroupSetting[0].values.filter((directorySetting) => {
                    return directorySetting.name === 'GuestUsageGuidelinesUrl';
                });
                siteClassificationsSettings.GuestUsageGuidelinesUrl = "";
                if (guestGuidanceUrl !== null && guestGuidanceUrl.length > 0) {
                    siteClassificationsSettings.GuestUsageGuidelinesUrl = guestGuidanceUrl[0].value;
                }
                // Get the DefaultClassification
                const defaultClassification = unifiedGroupSetting[0].values.filter((directorySetting) => {
                    return directorySetting.name === 'DefaultClassification';
                });
                siteClassificationsSettings.DefaultClassification = "";
                if (defaultClassification !== null && defaultClassification.length > 0) {
                    siteClassificationsSettings.DefaultClassification = defaultClassification[0].value;
                }
                logger.log(JSON.parse(JSON.stringify(siteClassificationsSettings)));
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
module.exports = new AadSiteClassificationGetCommand();
//# sourceMappingURL=siteclassification-get.js.map