"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadSiteClassificationEnableCommand_instances, _AadSiteClassificationEnableCommand_initTelemetry, _AadSiteClassificationEnableCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
const DirectorySetting_1 = require("./DirectorySetting");
class AadSiteClassificationEnableCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadSiteClassificationEnableCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadSiteClassificationEnableCommand_instances, "m", _AadSiteClassificationEnableCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadSiteClassificationEnableCommand_instances, "m", _AadSiteClassificationEnableCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.SITECLASSIFICATION_ENABLE;
    }
    get description() {
        return 'Enables site classification configuration';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let requestOptions = {
                    url: `${this.resource}/v1.0/groupSettingTemplates`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.get(requestOptions);
                const unifiedGroupSetting = res.value.filter((directorySetting) => {
                    return directorySetting.displayName === 'Group.Unified';
                });
                if (!unifiedGroupSetting ||
                    unifiedGroupSetting.length === 0) {
                    throw "Missing DirectorySettingTemplate for \"Group.Unified\"";
                }
                const updatedDirSettings = new DirectorySetting_1.UpdateDirectorySetting();
                updatedDirSettings.templateId = unifiedGroupSetting[0].id;
                unifiedGroupSetting[0].values.forEach((directorySetting) => {
                    switch (directorySetting.name) {
                        case "ClassificationList":
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": args.options.classifications
                            });
                            break;
                        case "DefaultClassification":
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": args.options.defaultClassification
                            });
                            break;
                        case "UsageGuidelinesUrl":
                            if (args.options.usageGuidelinesUrl) {
                                updatedDirSettings.values.push({
                                    "name": directorySetting.name,
                                    "value": args.options.usageGuidelinesUrl
                                });
                            }
                            else {
                                updatedDirSettings.values.push({
                                    "name": directorySetting.name,
                                    "value": directorySetting.defaultValue
                                });
                            }
                            break;
                        case "GuestUsageGuidelinesUrl":
                            if (args.options.guestUsageGuidelinesUrl) {
                                updatedDirSettings.values.push({
                                    "name": directorySetting.name,
                                    "value": args.options.guestUsageGuidelinesUrl
                                });
                            }
                            else {
                                updatedDirSettings.values.push({
                                    "name": directorySetting.name,
                                    "value": directorySetting.defaultValue
                                });
                            }
                            break;
                        default:
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": directorySetting.defaultValue
                            });
                            break;
                    }
                });
                requestOptions = {
                    url: `${this.resource}/v1.0/groupSettings`,
                    headers: {
                        accept: 'application/json;odata.metadata=none',
                        'content-type': 'application/json'
                    },
                    responseType: 'json',
                    data: updatedDirSettings
                };
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_AadSiteClassificationEnableCommand_instances = new WeakSet(), _AadSiteClassificationEnableCommand_initTelemetry = function _AadSiteClassificationEnableCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            usageGuidelinesUrl: typeof args.options.usageGuidelinesUrl !== 'undefined',
            guestUsageGuidelinesUrl: typeof args.options.guestUsageGuidelinesUrl !== 'undefined'
        });
    });
}, _AadSiteClassificationEnableCommand_initOptions = function _AadSiteClassificationEnableCommand_initOptions() {
    this.options.unshift({
        option: '-c, --classifications <classifications>'
    }, {
        option: '-d, --defaultClassification <defaultClassification>'
    }, {
        option: '-u, --usageGuidelinesUrl [usageGuidelinesUrl]'
    }, {
        option: '-g, --guestUsageGuidelinesUrl [guestUsageGuidelinesUrl]'
    });
};
module.exports = new AadSiteClassificationEnableCommand();
//# sourceMappingURL=siteclassification-enable.js.map