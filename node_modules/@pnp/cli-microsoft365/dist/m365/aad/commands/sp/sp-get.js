"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadSpGetCommand_instances, _AadSpGetCommand_initTelemetry, _AadSpGetCommand_initOptions, _AadSpGetCommand_initValidators, _AadSpGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadSpGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadSpGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadSpGetCommand_instances, "m", _AadSpGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadSpGetCommand_instances, "m", _AadSpGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadSpGetCommand_instances, "m", _AadSpGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadSpGetCommand_instances, "m", _AadSpGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.SP_GET;
    }
    get description() {
        return 'Gets information about the specific service principal';
    }
    getSpId(args) {
        if (args.options.objectId) {
            return Promise.resolve(args.options.objectId);
        }
        let spMatchQuery = '';
        if (args.options.displayName) {
            spMatchQuery = `displayName eq '${encodeURIComponent(args.options.displayName)}'`;
        }
        else if (args.options.appId) {
            spMatchQuery = `appId eq '${encodeURIComponent(args.options.appId)}'`;
        }
        const idRequestOptions = {
            url: `${this.resource}/v1.0/servicePrincipals?$filter=${spMatchQuery}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(idRequestOptions)
            .then(response => {
            const spItem = response.value[0];
            if (!spItem) {
                return Promise.reject(`The specified Azure AD app does not exist`);
            }
            if (response.value.length > 1) {
                return Promise.reject(`Multiple Azure AD apps with name ${args.options.displayName} found: ${response.value.map(x => x.id)}`);
            }
            return Promise.resolve(spItem.id);
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving service principal information...`);
            }
            try {
                const id = yield this.getSpId(args);
                const requestOptions = {
                    url: `${this.resource}/v1.0/servicePrincipals/${id}`,
                    headers: {
                        accept: 'application/json;odata.metadata=none',
                        'content-type': 'application/json;odata.metadata=none'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.get(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_AadSpGetCommand_instances = new WeakSet(), _AadSpGetCommand_initTelemetry = function _AadSpGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: (!(!args.options.appId)).toString(),
            displayName: (!(!args.options.displayName)).toString(),
            objectId: (!(!args.options.objectId)).toString()
        });
    });
}, _AadSpGetCommand_initOptions = function _AadSpGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --appId [appId]'
    }, {
        option: '-n, --displayName [displayName]'
    }, {
        option: '--objectId [objectId]'
    });
}, _AadSpGetCommand_initValidators = function _AadSpGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid appId GUID`;
        }
        if (args.options.objectId && !validation_1.validation.isValidGuid(args.options.objectId)) {
            return `${args.options.objectId} is not a valid objectId GUID`;
        }
        return true;
    }));
}, _AadSpGetCommand_initOptionSets = function _AadSpGetCommand_initOptionSets() {
    this.optionSets.push(['appId', 'displayName', 'objectId']);
};
module.exports = new AadSpGetCommand();
//# sourceMappingURL=sp-get.js.map