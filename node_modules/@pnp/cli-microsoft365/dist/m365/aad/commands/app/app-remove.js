"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadAppRemoveCommand_instances, _AadAppRemoveCommand_initTelemetry, _AadAppRemoveCommand_initOptions, _AadAppRemoveCommand_initValidators, _AadAppRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadAppRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadAppRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadAppRemoveCommand_instances, "m", _AadAppRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadAppRemoveCommand_instances, "m", _AadAppRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadAppRemoveCommand_instances, "m", _AadAppRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadAppRemoveCommand_instances, "m", _AadAppRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APP_REMOVE;
    }
    alias() {
        return [commands_1.default.APP_DELETE];
    }
    get description() {
        return 'Removes an Azure AD app registration';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.showDeprecationWarning(logger, commands_1.default.APP_DELETE, commands_1.default.APP_REMOVE);
            const deleteApp = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const objectId = yield this.getObjectId(args, logger);
                    if (this.verbose) {
                        logger.logToStderr(`Deleting Azure AD app ${objectId}...`);
                    }
                    const requestOptions = {
                        url: `${this.resource}/v1.0/myorganization/applications/${objectId}`,
                        headers: {
                            accept: 'application/json;odata.metadata=none'
                        },
                        responseType: 'json'
                    };
                    yield request_1.default.delete(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield deleteApp();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the app?`
                });
                if (result.continue) {
                    yield deleteApp();
                }
            }
        });
    }
    getObjectId(args, logger) {
        if (args.options.objectId) {
            return Promise.resolve(args.options.objectId);
        }
        const { appId, name } = args.options;
        if (this.verbose) {
            logger.logToStderr(`Retrieving information about Azure AD app ${appId ? appId : name}...`);
        }
        const filter = appId ?
            `appId eq '${encodeURIComponent(appId)}'` :
            `displayName eq '${encodeURIComponent(name)}'`;
        const requestOptions = {
            url: `${this.resource}/v1.0/myorganization/applications?$filter=${filter}&$select=id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value.length === 1) {
                return Promise.resolve(res.value[0].id);
            }
            if (res.value.length === 0) {
                const applicationIdentifier = appId ? `ID ${appId}` : `name ${name}`;
                return Promise.reject(`No Azure AD application registration with ${applicationIdentifier} found`);
            }
            return Promise.reject(`Multiple Azure AD application registration with name ${name} found. Please choose one of the object IDs: ${res.value.map(a => a.id).join(', ')}`);
        });
    }
}
_AadAppRemoveCommand_instances = new WeakSet(), _AadAppRemoveCommand_initTelemetry = function _AadAppRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            objectId: typeof args.options.objectId !== 'undefined',
            name: typeof args.options.name !== 'undefined',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _AadAppRemoveCommand_initOptions = function _AadAppRemoveCommand_initOptions() {
    this.options.unshift({ option: '--appId [appId]' }, { option: '--objectId [objectId]' }, { option: '--name [name]' }, { option: '--confirm' });
}, _AadAppRemoveCommand_initValidators = function _AadAppRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        if (args.options.objectId && !validation_1.validation.isValidGuid(args.options.objectId)) {
            return `${args.options.objectId} is not a valid GUID`;
        }
        return true;
    }));
}, _AadAppRemoveCommand_initOptionSets = function _AadAppRemoveCommand_initOptionSets() {
    this.optionSets.push(['appId', 'objectId', 'name']);
};
module.exports = new AadAppRemoveCommand();
//# sourceMappingURL=app-remove.js.map