"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadAppRoleRemoveCommand_instances, _AadAppRoleRemoveCommand_initTelemetry, _AadAppRoleRemoveCommand_initOptions, _AadAppRoleRemoveCommand_initValidators, _AadAppRoleRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadAppRoleRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadAppRoleRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadAppRoleRemoveCommand_instances, "m", _AadAppRoleRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadAppRoleRemoveCommand_instances, "m", _AadAppRoleRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadAppRoleRemoveCommand_instances, "m", _AadAppRoleRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadAppRoleRemoveCommand_instances, "m", _AadAppRoleRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APP_ROLE_REMOVE;
    }
    get description() {
        return 'Removes role from the specified Azure AD app registration';
    }
    alias() {
        return [commands_1.default.APP_ROLE_DELETE];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.showDeprecationWarning(logger, commands_1.default.APP_ROLE_DELETE, commands_1.default.APP_ROLE_REMOVE);
            const deleteAppRole = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    yield this.processAppRoleDelete(logger, args);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield deleteAppRole();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the app role ?`
                });
                if (result.continue) {
                    yield deleteAppRole();
                }
            }
        });
    }
    processAppRoleDelete(logger, args) {
        return this
            .getAppObjectId(args, logger)
            .then((appObjectId) => this.getAadApp(appObjectId, logger))
            .then((aadApp) => {
            const appRoleDeleteIdentifierNameValue = args.options.name ? `name '${args.options.name}'` : (args.options.claim ? `claim '${args.options.claim}'` : `id '${args.options.id}'`);
            if (this.verbose) {
                logger.logToStderr(`Deleting role with ${appRoleDeleteIdentifierNameValue} from Azure AD app ${aadApp.id}...`);
            }
            // Find the role search criteria provided by the user.
            const appRoleDeleteIdentifierProperty = args.options.name ? `displayName` : (args.options.claim ? `value` : `id`);
            const appRoleDeleteIdentifierValue = args.options.name ? args.options.name : (args.options.claim ? args.options.claim : args.options.id);
            const appRoleToDelete = aadApp.appRoles.filter((role) => role[appRoleDeleteIdentifierProperty] === appRoleDeleteIdentifierValue);
            if (args.options.name &&
                appRoleToDelete !== undefined &&
                appRoleToDelete.length > 1) {
                return Promise.reject(`Multiple roles with the provided 'name' were found. Please disambiguate using the claims : ${appRoleToDelete.map(role => `${role.value}`).join(', ')}`);
            }
            if (appRoleToDelete.length === 0) {
                return Promise.reject(`No app role with ${appRoleDeleteIdentifierNameValue} found.`);
            }
            const roleToDelete = appRoleToDelete[0];
            if (roleToDelete.isEnabled) {
                return this
                    .disableAppRole(logger, aadApp, roleToDelete.id)
                    .then(_ => this.deleteAppRole(logger, aadApp, roleToDelete.id));
            }
            else {
                return this.deleteAppRole(logger, aadApp, roleToDelete.id);
            }
        });
    }
    disableAppRole(logger, aadApp, roleId) {
        const roleIndex = aadApp.appRoles.findIndex((role) => role.id === roleId);
        if (this.verbose) {
            logger.logToStderr(`Disabling the app role`);
        }
        aadApp.appRoles[roleIndex].isEnabled = false;
        const requestOptions = {
            url: `${this.resource}/v1.0/myorganization/applications/${aadApp.id}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json',
            data: {
                appRoles: aadApp.appRoles
            }
        };
        return request_1.default.patch(requestOptions);
    }
    deleteAppRole(logger, aadApp, roleId) {
        if (this.verbose) {
            logger.logToStderr(`Deleting the app role.`);
        }
        const updatedAppRoles = aadApp.appRoles.filter((role) => role.id !== roleId);
        const requestOptions = {
            url: `${this.resource}/v1.0/myorganization/applications/${aadApp.id}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json',
            data: {
                appRoles: updatedAppRoles
            }
        };
        return request_1.default.patch(requestOptions);
    }
    getAadApp(appId, logger) {
        if (this.verbose) {
            logger.logToStderr(`Retrieving app roles information for the Azure AD app ${appId}...`);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/myorganization/applications/${appId}?$select=id,appRoles`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    getAppObjectId(args, logger) {
        if (args.options.appObjectId) {
            return Promise.resolve(args.options.appObjectId);
        }
        const { appId, appName } = args.options;
        if (this.verbose) {
            logger.logToStderr(`Retrieving information about Azure AD app ${appId ? appId : appName}...`);
        }
        const filter = appId ?
            `appId eq '${encodeURIComponent(appId)}'` :
            `displayName eq '${encodeURIComponent(appName)}'`;
        const requestOptions = {
            url: `${this.resource}/v1.0/myorganization/applications?$filter=${filter}&$select=id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value.length === 1) {
                return Promise.resolve(res.value[0].id);
            }
            if (res.value.length === 0) {
                const applicationIdentifier = appId ? `ID ${appId}` : `name ${appName}`;
                return Promise.reject(`No Azure AD application registration with ${applicationIdentifier} found`);
            }
            return Promise.reject(`Multiple Azure AD application registration with name ${appName} found. Please disambiguate using app object IDs: ${res.value.map(a => a.id).join(', ')}`);
        });
    }
}
_AadAppRoleRemoveCommand_instances = new WeakSet(), _AadAppRoleRemoveCommand_initTelemetry = function _AadAppRoleRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            appObjectId: typeof args.options.appObjectId !== 'undefined',
            appName: typeof args.options.appName !== 'undefined',
            claim: typeof args.options.claim !== 'undefined',
            name: typeof args.options.name !== 'undefined',
            id: typeof args.options.id !== 'undefined'
        });
    });
}, _AadAppRoleRemoveCommand_initOptions = function _AadAppRoleRemoveCommand_initOptions() {
    this.options.unshift({ option: '--appId [appId]' }, { option: '--appObjectId [appObjectId]' }, { option: '--appName [appName]' }, { option: '-n, --name [name]' }, { option: '-i, --id [id]' }, { option: '-c, --claim [claim]' }, { option: '--confirm' });
}, _AadAppRoleRemoveCommand_initValidators = function _AadAppRoleRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id) {
            if (!validation_1.validation.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
        }
        return true;
    }));
}, _AadAppRoleRemoveCommand_initOptionSets = function _AadAppRoleRemoveCommand_initOptionSets() {
    this.optionSets.push(['appId', 'appObjectId', 'appName'], ['name', 'claim', 'id']);
};
module.exports = new AadAppRoleRemoveCommand();
//# sourceMappingURL=app-role-remove.js.map