"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadAppRoleAddCommand_instances, _AadAppRoleAddCommand_initTelemetry, _AadAppRoleAddCommand_initOptions, _AadAppRoleAddCommand_initValidators, _AadAppRoleAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadAppRoleAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadAppRoleAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadAppRoleAddCommand_instances, "m", _AadAppRoleAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAddCommand_instances, "m", _AadAppRoleAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAddCommand_instances, "m", _AadAppRoleAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadAppRoleAddCommand_instances, "m", _AadAppRoleAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APP_ROLE_ADD;
    }
    get description() {
        return 'Adds role to the specified Azure AD app registration';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const appId = yield this.getAppObjectId(args, logger);
                const appInfo = yield this.getAppInfo(appId, logger);
                if (this.verbose) {
                    logger.logToStderr(`Adding role ${args.options.name} to Azure AD app ${appInfo.id}...`);
                }
                const requestOptions = {
                    url: `${this.resource}/v1.0/myorganization/applications/${appInfo.id}`,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json',
                    data: {
                        appRoles: appInfo.appRoles.concat({
                            displayName: args.options.name,
                            description: args.options.description,
                            id: (0, uuid_1.v4)(),
                            value: args.options.claim,
                            allowedMemberTypes: this.getAllowedMemberTypes(args)
                        })
                    }
                };
                yield request_1.default.patch(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getAppInfo(appId, logger) {
        if (this.verbose) {
            logger.logToStderr(`Retrieving information about roles for Azure AD app ${appId}...`);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/myorganization/applications/${appId}?$select=id,appRoles`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    getAllowedMemberTypes(args) {
        switch (args.options.allowedMembers) {
            case 'usersGroups':
                return ['User'];
            case 'applications':
                return ['Application'];
            case 'both':
                return ['User', 'Application'];
            default:
                return [];
        }
    }
    getAppObjectId(args, logger) {
        if (args.options.appObjectId) {
            return Promise.resolve(args.options.appObjectId);
        }
        const { appId, appName } = args.options;
        if (this.verbose) {
            logger.logToStderr(`Retrieving information about Azure AD app ${appId ? appId : appName}...`);
        }
        const filter = appId ?
            `appId eq '${encodeURIComponent(appId)}'` :
            `displayName eq '${encodeURIComponent(appName)}'`;
        const requestOptions = {
            url: `${this.resource}/v1.0/myorganization/applications?$filter=${filter}&$select=id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value.length === 1) {
                return Promise.resolve(res.value[0].id);
            }
            if (res.value.length === 0) {
                const applicationIdentifier = appId ? `ID ${appId}` : `name ${appName}`;
                return Promise.reject(`No Azure AD application registration with ${applicationIdentifier} found`);
            }
            return Promise.reject(`Multiple Azure AD application registration with name ${appName} found. Please disambiguate (app object IDs): ${res.value.map(a => a.id).join(', ')}`);
        });
    }
}
_AadAppRoleAddCommand_instances = new WeakSet(), _AadAppRoleAddCommand_initTelemetry = function _AadAppRoleAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            appObjectId: typeof args.options.appObjectId !== 'undefined',
            appName: typeof args.options.appName !== 'undefined'
        });
    });
}, _AadAppRoleAddCommand_initOptions = function _AadAppRoleAddCommand_initOptions() {
    this.options.unshift({ option: '--appId [appId]' }, { option: '--appObjectId [appObjectId]' }, { option: '--appName [appName]' }, { option: '-n, --name <name>' }, { option: '-d, --description <description>' }, {
        option: '-m, --allowedMembers <allowedMembers>', autocomplete: AadAppRoleAddCommand.allowedMembers
    }, { option: '-c, --claim <claim>' });
}, _AadAppRoleAddCommand_initValidators = function _AadAppRoleAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const { allowedMembers, claim } = args.options;
        if (AadAppRoleAddCommand.allowedMembers.indexOf(allowedMembers) < 0) {
            return `${allowedMembers} is not a valid value for allowedMembers. Valid values are ${AadAppRoleAddCommand.allowedMembers.join(', ')}`;
        }
        if (claim.length > 120) {
            return `Claim must not be longer than 120 characters`;
        }
        if (claim.startsWith('.')) {
            return 'Claim must not begin with .';
        }
        if (!/^[\w:!#$%&'()*+,-.\/:;<=>?@\[\]^+_`{|}~]+$/.test(claim)) {
            return `Claim can contain only the following characters a-z, A-Z, 0-9, :!#$%&'()*+,-./:;<=>?@[]^+_\`{|}~]+`;
        }
        return true;
    }));
}, _AadAppRoleAddCommand_initOptionSets = function _AadAppRoleAddCommand_initOptionSets() {
    this.optionSets.push(['appId', 'appObjectId', 'appName']);
};
AadAppRoleAddCommand.allowedMembers = ['usersGroups', 'applications', 'both'];
module.exports = new AadAppRoleAddCommand();
//# sourceMappingURL=app-role-add.js.map