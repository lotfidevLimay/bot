"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadAppRoleListCommand_instances, _AadAppRoleListCommand_initTelemetry, _AadAppRoleListCommand_initOptions, _AadAppRoleListCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const odata_1 = require("../../../../utils/odata");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadAppRoleListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadAppRoleListCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadAppRoleListCommand_instances, "m", _AadAppRoleListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadAppRoleListCommand_instances, "m", _AadAppRoleListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadAppRoleListCommand_instances, "m", _AadAppRoleListCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APP_ROLE_LIST;
    }
    get description() {
        return 'Gets Azure AD app registration roles';
    }
    defaultProperties() {
        return ['displayName', 'description', 'id'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const objectId = yield this.getAppObjectId(args, logger);
                const appRoles = yield odata_1.odata.getAllItems(`${this.resource}/v1.0/myorganization/applications/${objectId}/appRoles`);
                logger.log(appRoles);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getAppObjectId(args, logger) {
        if (args.options.appObjectId) {
            return Promise.resolve(args.options.appObjectId);
        }
        const { appId, appName } = args.options;
        if (this.verbose) {
            logger.logToStderr(`Retrieving information about Azure AD app ${appId ? appId : appName}...`);
        }
        const filter = appId ?
            `appId eq '${encodeURIComponent(appId)}'` :
            `displayName eq '${encodeURIComponent(appName)}'`;
        const requestOptions = {
            url: `${this.resource}/v1.0/myorganization/applications?$filter=${filter}&$select=id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value.length === 1) {
                return Promise.resolve(res.value[0].id);
            }
            if (res.value.length === 0) {
                const applicationIdentifier = appId ? `ID ${appId}` : `name ${appName}`;
                return Promise.reject(`No Azure AD application registration with ${applicationIdentifier} found`);
            }
            return Promise.reject(`Multiple Azure AD application registration with name ${appName} found. Please disambiguate (app object IDs): ${res.value.map(a => a.id).join(', ')}`);
        });
    }
}
_AadAppRoleListCommand_instances = new WeakSet(), _AadAppRoleListCommand_initTelemetry = function _AadAppRoleListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            appObjectId: typeof args.options.appObjectId !== 'undefined',
            appName: typeof args.options.appName !== 'undefined'
        });
    });
}, _AadAppRoleListCommand_initOptions = function _AadAppRoleListCommand_initOptions() {
    this.options.unshift({ option: '--appId [appId]' }, { option: '--appObjectId [appObjectId]' }, { option: '--appName [appName]' });
}, _AadAppRoleListCommand_initOptionSets = function _AadAppRoleListCommand_initOptionSets() {
    this.optionSets.push(['appId', 'appObjectId', 'appName']);
};
module.exports = new AadAppRoleListCommand();
//# sourceMappingURL=app-role-list.js.map