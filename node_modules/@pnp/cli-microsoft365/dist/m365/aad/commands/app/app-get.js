"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadAppGetCommand_instances, _AadAppGetCommand_initTelemetry, _AadAppGetCommand_initOptions, _AadAppGetCommand_initValidators, _AadAppGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadAppGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadAppGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadAppGetCommand_instances, "m", _AadAppGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadAppGetCommand_instances, "m", _AadAppGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AadAppGetCommand_instances, "m", _AadAppGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _AadAppGetCommand_instances, "m", _AadAppGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APP_GET;
    }
    get description() {
        return 'Gets an Azure AD app registration';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const appObjectId = yield this.getAppObjectId(args);
                const appInfo = yield this.getAppInfo(appObjectId);
                const res = yield this.saveAppInfo(args, appInfo, logger);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getAppObjectId(args) {
        if (args.options.objectId) {
            return Promise.resolve(args.options.objectId);
        }
        const { appId, name } = args.options;
        const filter = appId ?
            `appId eq '${encodeURIComponent(appId)}'` :
            `displayName eq '${encodeURIComponent(name)}'`;
        const requestOptions = {
            url: `${this.resource}/v1.0/myorganization/applications?$filter=${filter}&$select=id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value.length === 1) {
                return Promise.resolve(res.value[0].id);
            }
            if (res.value.length === 0) {
                const applicationIdentifier = appId ? `ID ${appId}` : `name ${name}`;
                return Promise.reject(`No Azure AD application registration with ${applicationIdentifier} found`);
            }
            return Promise.reject(`Multiple Azure AD application registration with name ${name} found. Please disambiguate (app object IDs): ${res.value.map(a => a.id).join(', ')}`);
        });
    }
    getAppInfo(appObjectId) {
        const requestOptions = {
            url: `${this.resource}/v1.0/myorganization/applications/${appObjectId}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    saveAppInfo(args, appInfo, logger) {
        if (!args.options.save) {
            return Promise.resolve(appInfo);
        }
        const filePath = '.m365rc.json';
        if (this.verbose) {
            logger.logToStderr(`Saving Azure AD app registration information to the ${filePath} file...`);
        }
        let m365rc = {};
        if (fs.existsSync(filePath)) {
            if (this.debug) {
                logger.logToStderr(`Reading existing ${filePath}...`);
            }
            try {
                const fileContents = fs.readFileSync(filePath, 'utf8');
                if (fileContents) {
                    m365rc = JSON.parse(fileContents);
                }
            }
            catch (e) {
                logger.logToStderr(`Error reading ${filePath}: ${e}. Please add app info to ${filePath} manually.`);
                return Promise.resolve(appInfo);
            }
        }
        if (!m365rc.apps) {
            m365rc.apps = [];
        }
        if (!m365rc.apps.some(a => a.appId === appInfo.appId)) {
            m365rc.apps.push({
                appId: appInfo.appId,
                name: appInfo.displayName
            });
            try {
                fs.writeFileSync(filePath, JSON.stringify(m365rc, null, 2));
            }
            catch (e) {
                logger.logToStderr(`Error writing ${filePath}: ${e}. Please add app info to ${filePath} manually.`);
            }
        }
        return Promise.resolve(appInfo);
    }
}
_AadAppGetCommand_instances = new WeakSet(), _AadAppGetCommand_initTelemetry = function _AadAppGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            objectId: typeof args.options.objectId !== 'undefined',
            name: typeof args.options.name !== 'undefined'
        });
    });
}, _AadAppGetCommand_initOptions = function _AadAppGetCommand_initOptions() {
    this.options.unshift({ option: '--appId [appId]' }, { option: '--objectId [objectId]' }, { option: '--name [name]' }, { option: '--save' });
}, _AadAppGetCommand_initValidators = function _AadAppGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        if (args.options.objectId && !validation_1.validation.isValidGuid(args.options.objectId)) {
            return `${args.options.objectId} is not a valid GUID`;
        }
        return true;
    }));
}, _AadAppGetCommand_initOptionSets = function _AadAppGetCommand_initOptionSets() {
    this.optionSets.push(['appId', 'objectId', 'name']);
};
module.exports = new AadAppGetCommand();
//# sourceMappingURL=app-get.js.map