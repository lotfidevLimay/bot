"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AadGroupListCommand_instances, _AadGroupListCommand_initTelemetry, _AadGroupListCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class AadGroupListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _AadGroupListCommand_instances.add(this);
        __classPrivateFieldGet(this, _AadGroupListCommand_instances, "m", _AadGroupListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AadGroupListCommand_instances, "m", _AadGroupListCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.GROUP_LIST;
    }
    get description() {
        return 'Lists all groups defined in Azure Active Directory.';
    }
    defaultProperties() {
        return ['id', 'displayName', 'groupType'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = args.options.deleted ? 'directory/deletedItems/microsoft.graph.group' : 'groups';
            try {
                const groups = yield odata_1.odata.getAllItems(`${this.resource}/v1.0/${endpoint}`);
                if (args.options.output === 'text') {
                    groups.forEach((group) => {
                        if (group.groupTypes && group.groupTypes.length > 0 && group.groupTypes[0] === 'Unified') {
                            group.groupType = 'Microsoft 365';
                        }
                        else if (group.mailEnabled && group.securityEnabled) {
                            group.groupType = 'Mail enabled security';
                        }
                        else if (group.securityEnabled) {
                            group.groupType = 'Security';
                        }
                        else if (group.mailEnabled) {
                            group.groupType = 'Distribution';
                        }
                    });
                }
                logger.log(groups);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_AadGroupListCommand_instances = new WeakSet(), _AadGroupListCommand_initTelemetry = function _AadGroupListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            deleted: args.options.deleted
        });
    });
}, _AadGroupListCommand_initOptions = function _AadGroupListCommand_initOptions() {
    this.options.unshift({ option: '-d, --deleted' });
};
module.exports = new AadGroupListCommand();
//# sourceMappingURL=group-list.js.map