"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _YammerUserGetCommand_instances, _YammerUserGetCommand_initTelemetry, _YammerUserGetCommand_initOptions, _YammerUserGetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const YammerCommand_1 = require("../../../base/YammerCommand");
const commands_1 = require("../../commands");
class YammerUserGetCommand extends YammerCommand_1.default {
    constructor() {
        super();
        _YammerUserGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _YammerUserGetCommand_instances, "m", _YammerUserGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _YammerUserGetCommand_instances, "m", _YammerUserGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _YammerUserGetCommand_instances, "m", _YammerUserGetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.USER_GET;
    }
    get description() {
        return 'Retrieves the current user or searches for a user by ID or e-mail';
    }
    defaultProperties() {
        return ['id', 'full_name', 'email', 'job_title', 'state', 'url'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let endPoint = `${this.resource}/v1/users/current.json`;
            if (args.options.userId) {
                endPoint = `${this.resource}/v1/users/${encodeURIComponent(args.options.userId)}.json`;
            }
            else if (args.options.email) {
                endPoint = `${this.resource}/v1/users/by_email.json?email=${encodeURIComponent(args.options.email)}`;
            }
            const requestOptions = {
                url: endPoint,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                const res = yield request_1.default.get(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_YammerUserGetCommand_instances = new WeakSet(), _YammerUserGetCommand_initTelemetry = function _YammerUserGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            userId: args.options.userId !== undefined,
            email: args.options.email !== undefined
        });
    });
}, _YammerUserGetCommand_initOptions = function _YammerUserGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --userId [userId]'
    }, {
        option: '--email [email]'
    });
}, _YammerUserGetCommand_initValidators = function _YammerUserGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.userId !== undefined && args.options.email !== undefined) {
            return `You are only allowed to search by ID or e-mail but not both`;
        }
        return true;
    }));
};
module.exports = new YammerUserGetCommand();
//# sourceMappingURL=user-get.js.map