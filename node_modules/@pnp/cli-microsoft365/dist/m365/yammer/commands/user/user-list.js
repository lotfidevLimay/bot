"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _YammerUserListCommand_instances, _YammerUserListCommand_initTelemetry, _YammerUserListCommand_initOptions, _YammerUserListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const YammerCommand_1 = require("../../../base/YammerCommand");
const commands_1 = require("../../commands");
class YammerUserListCommand extends YammerCommand_1.default {
    constructor() {
        super();
        _YammerUserListCommand_instances.add(this);
        this.items = [];
        __classPrivateFieldGet(this, _YammerUserListCommand_instances, "m", _YammerUserListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _YammerUserListCommand_instances, "m", _YammerUserListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _YammerUserListCommand_instances, "m", _YammerUserListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.USER_LIST;
    }
    get description() {
        return 'Returns users from the current network';
    }
    defaultProperties() {
        return ['id', 'full_name', 'email'];
    }
    getAllItems(logger, args, page) {
        return new Promise((resolve, reject) => {
            if (page === 1) {
                this.items = [];
            }
            let endPoint = `${this.resource}/v1/users.json`;
            if (args.options.groupId !== undefined) {
                endPoint = `${this.resource}/v1/users/in_group/${args.options.groupId}.json`;
            }
            endPoint += `?page=${page}`;
            if (args.options.reverse !== undefined) {
                endPoint += `&reverse=true`;
            }
            if (args.options.sortBy !== undefined) {
                endPoint += `&sort_by=${args.options.sortBy}`;
            }
            if (args.options.letter !== undefined) {
                endPoint += `&letter=${args.options.letter}`;
            }
            const requestOptions = {
                url: endPoint,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            request_1.default
                .get(requestOptions)
                .then((res) => {
                let userOutput = res;
                // groups user retrieval returns a user array containing the user objects
                if (res.users) {
                    userOutput = res.users;
                }
                this.items = this.items.concat(userOutput);
                // this is executed once at the end if the limit operation has been executed
                // we need to return the array of the desired size. The API does not provide such a feature
                if (args.options.limit !== undefined && this.items.length > args.options.limit) {
                    this.items = this.items.slice(0, args.options.limit);
                    resolve();
                }
                else {
                    // if the groups endpoint is used, the more_available will tell if a new retrieval is required
                    // if the user endpoint is used, we need to page by 50 items (hardcoded)
                    if (res.more_available === true || this.items.length % 50 === 0) {
                        this.getAllItems(logger, args, ++page)
                            .then(() => {
                            resolve();
                        }, (err) => {
                            reject(err);
                        });
                    }
                    else {
                        resolve();
                    }
                }
            }, (err) => {
                reject(err);
            });
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.items = []; // this will reset the items array in interactive mode
            try {
                yield this.getAllItems(logger, args, 1);
                logger.log(this.items);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_YammerUserListCommand_instances = new WeakSet(), _YammerUserListCommand_initTelemetry = function _YammerUserListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            letter: args.options.letter !== undefined,
            sortBy: args.options.sortBy !== undefined,
            reverse: args.options.reverse !== undefined,
            limit: args.options.limit !== undefined,
            groupId: args.options.groupId !== undefined
        });
    });
}, _YammerUserListCommand_initOptions = function _YammerUserListCommand_initOptions() {
    this.options.unshift({
        option: '-g, --groupId [groupId]'
    }, {
        option: '-l, --letter [letter]'
    }, {
        option: '--reverse'
    }, {
        option: '--limit [limit]'
    }, {
        option: '--sortBy [sortBy]',
        autocomplete: ['messages', 'followers']
    });
}, _YammerUserListCommand_initValidators = function _YammerUserListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.groupId && typeof args.options.groupId !== 'number') {
            return `${args.options.groupId} is not a number`;
        }
        if (args.options.limit && typeof args.options.limit !== 'number') {
            return `${args.options.limit} is not a number`;
        }
        if (args.options.sortBy && args.options.sortBy !== 'messages' && args.options.sortBy !== 'followers') {
            return `sortBy accepts only the values "messages" or "followers"`;
        }
        if (args.options.letter && !/^(?!\d)[a-zA-Z]+$/i.test(args.options.letter)) {
            return `Value of 'letter' is invalid. Only characters within the ranges [A - Z], [a - z] are allowed.`;
        }
        if (args.options.letter && args.options.letter.length !== 1) {
            return `Only one char as value of 'letter' accepted.`;
        }
        return true;
    }));
};
module.exports = new YammerUserListCommand();
//# sourceMappingURL=user-list.js.map