"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _YammerSearchCommand_instances, _YammerSearchCommand_initTelemetry, _YammerSearchCommand_initOptions, _YammerSearchCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../request");
const YammerCommand_1 = require("../../base/YammerCommand");
const commands_1 = require("../commands");
class YammerSearchCommand extends YammerCommand_1.default {
    constructor() {
        super();
        _YammerSearchCommand_instances.add(this);
        this.summary = {
            messages: 0,
            groups: 0,
            topics: 0,
            users: 0
        };
        this.messages = [];
        this.groups = [];
        this.topics = [];
        this.users = [];
        __classPrivateFieldGet(this, _YammerSearchCommand_instances, "m", _YammerSearchCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _YammerSearchCommand_instances, "m", _YammerSearchCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _YammerSearchCommand_instances, "m", _YammerSearchCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SEARCH;
    }
    get description() {
        return 'Returns a list of messages, users, topics and groups that match the specified query.';
    }
    getAllItems(logger, args, page) {
        return new Promise((resolve, reject) => {
            const endpoint = `${this.resource}/v1/search.json?search=${encodeURIComponent(args.options.queryText)}&page=${page}`;
            const requestOptions = {
                url: endpoint,
                responseType: 'json'
            };
            request_1.default
                .get(requestOptions)
                .then((results) => {
                // results count should only read once
                if (page === 1) {
                    this.summary = {
                        messages: results.count.messages,
                        topics: results.count.topics,
                        users: results.count.users,
                        groups: results.count.groups
                    };
                }
                const resultMessages = results.messages.messages;
                const resultTopics = results.topics;
                const resultGroups = results.groups;
                const resultUsers = results.users;
                if (resultMessages.length > 0) {
                    this.messages = this.messages.concat(resultMessages);
                    if (args.options.limit && this.messages.length > args.options.limit) {
                        this.messages = this.messages.slice(0, args.options.limit);
                    }
                }
                if (resultTopics.length > 0) {
                    this.topics = this.topics.concat(resultTopics);
                    if (args.options.limit && this.topics.length > args.options.limit) {
                        this.topics = this.topics.slice(0, args.options.limit);
                    }
                }
                if (resultGroups.length > 0) {
                    this.groups = this.groups.concat(resultGroups);
                    if (args.options.limit && this.groups.length > args.options.limit) {
                        this.groups = this.groups.slice(0, args.options.limit);
                    }
                }
                if (resultUsers.length > 0) {
                    this.users = this.users.concat(resultUsers);
                    if (args.options.limit && this.users.length > args.options.limit) {
                        this.users = this.users.slice(0, args.options.limit);
                    }
                }
                const continueProcessing = resultMessages.length === 20 ||
                    resultUsers.length === 20 ||
                    resultGroups.length === 20 ||
                    resultTopics.length === 20;
                if (continueProcessing) {
                    this
                        .getAllItems(logger, args, ++page)
                        .then(() => {
                        resolve();
                    }, (err) => {
                        reject(err);
                    });
                }
                else {
                    resolve();
                }
            }, (err) => {
                reject(err);
            });
        });
    }
    commandAction(logger, args) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.summary = {
                messages: 0,
                groups: 0,
                topics: 0,
                users: 0
            };
            this.messages = [];
            this.groups = [];
            this.topics = [];
            this.users = [];
            try {
                yield this.getAllItems(logger, args, 1);
                if (args.options.output === 'json') {
                    logger.log({
                        summary: this.summary,
                        messages: this.messages,
                        users: this.users,
                        topics: this.topics,
                        groups: this.groups
                    });
                }
                else {
                    const show = (_a = args.options.show) === null || _a === void 0 ? void 0 : _a.toLowerCase();
                    if (show === "summary") {
                        logger.log(this.summary);
                    }
                    else {
                        let results = [];
                        if (show === undefined || show === "messages") {
                            results = [...results, ...this.messages.map((msg) => {
                                    let trimmedMessage = msg.content_excerpt;
                                    trimmedMessage = (trimmedMessage === null || trimmedMessage === void 0 ? void 0 : trimmedMessage.length) >= 80 ? (trimmedMessage.substring(0, 80) + "...") : trimmedMessage;
                                    trimmedMessage = trimmedMessage === null || trimmedMessage === void 0 ? void 0 : trimmedMessage.replace(/\n/g, " ");
                                    return {
                                        id: msg.id,
                                        description: trimmedMessage,
                                        type: "message",
                                        web_url: msg.web_url
                                    };
                                })];
                        }
                        if (show === undefined || show === "topics") {
                            results = [...results, ...this.topics.map((topic) => {
                                    return {
                                        id: topic.id,
                                        description: topic.name,
                                        type: "topic",
                                        web_url: topic.web_url
                                    };
                                })];
                        }
                        if (show === undefined || show === "users") {
                            results = [...results, ...this.users.map((user) => {
                                    return {
                                        id: user.id,
                                        description: user.name,
                                        type: "user",
                                        web_url: user.web_url
                                    };
                                })];
                        }
                        if (show === undefined || show === "groups") {
                            results = [...results, ...this.groups.map((group) => {
                                    return {
                                        id: group.id,
                                        description: group.name,
                                        type: "group",
                                        web_url: group.web_url
                                    };
                                })];
                        }
                        logger.log(results);
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_YammerSearchCommand_instances = new WeakSet(), _YammerSearchCommand_initTelemetry = function _YammerSearchCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            show: typeof args.options.show !== 'undefined',
            limit: typeof args.options.limit !== 'undefined'
        });
    });
}, _YammerSearchCommand_initOptions = function _YammerSearchCommand_initOptions() {
    this.options.unshift({
        option: '--queryText <queryText>'
    }, {
        option: '--show [show]',
        autocomplete: YammerSearchCommand.showOptions
    }, {
        option: '--limit [limit]'
    });
}, _YammerSearchCommand_initValidators = function _YammerSearchCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.queryText && typeof args.options.queryText !== 'string') {
            return `${args.options.queryText} is not a string`;
        }
        if (args.options.limit && typeof args.options.limit !== 'number') {
            return `${args.options.limit} is not a number`;
        }
        if (args.options.output !== 'json') {
            if (typeof args.options.show !== 'undefined') {
                const scope = args.options.show.toString().toLowerCase();
                if (YammerSearchCommand.showOptions.indexOf(scope) < 0) {
                    return `${scope} is not a valid value for show. Allowed values are ${YammerSearchCommand.showOptions.join(', ')}`;
                }
            }
        }
        else {
            if (typeof args.options.show !== 'undefined') {
                return `${args.options.show} can't be used when --output set to json`;
            }
        }
        return true;
    }));
};
YammerSearchCommand.showOptions = [
    'summary', 'messages', 'users', 'topics', 'groups'
];
module.exports = new YammerSearchCommand();
//# sourceMappingURL=yammer-search.js.map