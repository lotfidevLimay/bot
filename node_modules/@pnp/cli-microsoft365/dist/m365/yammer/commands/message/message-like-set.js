"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _YammerMessageLikeSetCommand_instances, _YammerMessageLikeSetCommand_initTelemetry, _YammerMessageLikeSetCommand_initOptions, _YammerMessageLikeSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const YammerCommand_1 = require("../../../base/YammerCommand");
const commands_1 = require("../../commands");
class YammerMessageLikeSetCommand extends YammerCommand_1.default {
    constructor() {
        super();
        _YammerMessageLikeSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _YammerMessageLikeSetCommand_instances, "m", _YammerMessageLikeSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _YammerMessageLikeSetCommand_instances, "m", _YammerMessageLikeSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _YammerMessageLikeSetCommand_instances, "m", _YammerMessageLikeSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.MESSAGE_LIKE_SET;
    }
    get description() {
        return 'Likes or unlikes a Yammer message';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const executeLikeAction = () => __awaiter(this, void 0, void 0, function* () {
                const endpoint = `${this.resource}/v1/messages/liked_by/current.json`;
                const requestOptions = {
                    url: endpoint,
                    headers: {
                        accept: 'application/json;odata.metadata=none',
                        'content-type': 'application/json;odata=nometadata'
                    },
                    responseType: 'json',
                    data: {
                        message_id: args.options.id
                    }
                };
                try {
                    if (args.options.enable !== 'false') {
                        yield request_1.default.post(requestOptions);
                    }
                    else {
                        yield request_1.default.delete(requestOptions);
                    }
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.enable === 'false') {
                if (args.options.confirm) {
                    yield executeLikeAction();
                }
                else {
                    const messagePrompt = `Are you sure you want to unlike message ${args.options.id}?`;
                    const result = yield Cli_1.Cli.prompt({
                        type: 'confirm',
                        name: 'continue',
                        default: false,
                        message: messagePrompt
                    });
                    if (result.continue) {
                        yield executeLikeAction();
                    }
                }
            }
            else {
                yield executeLikeAction();
            }
        });
    }
}
_YammerMessageLikeSetCommand_instances = new WeakSet(), _YammerMessageLikeSetCommand_initTelemetry = function _YammerMessageLikeSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            enable: args.options.enable !== undefined,
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _YammerMessageLikeSetCommand_initOptions = function _YammerMessageLikeSetCommand_initOptions() {
    this.options.unshift({
        option: '--id <id>'
    }, {
        option: '--enable [enable]'
    }, {
        option: '--confirm'
    });
}, _YammerMessageLikeSetCommand_initValidators = function _YammerMessageLikeSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id && typeof args.options.id !== 'number') {
            return `${args.options.id} is not a number`;
        }
        if (args.options.enable &&
            args.options.enable !== 'true' &&
            args.options.enable !== 'false') {
            return `${args.options.enable} is not a valid value for the enable option. Allowed values are true|false`;
        }
        return true;
    }));
};
module.exports = new YammerMessageLikeSetCommand();
//# sourceMappingURL=message-like-set.js.map