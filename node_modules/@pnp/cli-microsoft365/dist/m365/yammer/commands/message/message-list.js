"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _YammerMessageListCommand_instances, _YammerMessageListCommand_initTelemetry, _YammerMessageListCommand_initOptions, _YammerMessageListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const YammerCommand_1 = require("../../../base/YammerCommand");
const commands_1 = require("../../commands");
class YammerMessageListCommand extends YammerCommand_1.default {
    constructor() {
        super();
        _YammerMessageListCommand_instances.add(this);
        this.items = [];
        __classPrivateFieldGet(this, _YammerMessageListCommand_instances, "m", _YammerMessageListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _YammerMessageListCommand_instances, "m", _YammerMessageListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _YammerMessageListCommand_instances, "m", _YammerMessageListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.MESSAGE_LIST;
    }
    get description() {
        return 'Returns all accessible messages from the user\'s Yammer network';
    }
    defaultProperties() {
        return ['id', 'replied_to_id', 'thread_id', 'group_id', 'shortBody'];
    }
    getAllItems(logger, args, messageId) {
        return new Promise((resolve, reject) => {
            let endpoint = `${this.resource}/v1`;
            if (args.options.threadId) {
                endpoint += `/messages/in_thread/${args.options.threadId}.json`;
            }
            else if (args.options.groupId) {
                endpoint += `/messages/in_group/${args.options.groupId}.json`;
            }
            else {
                if (!args.options.feedType) {
                    args.options.feedType = "All";
                }
                switch (args.options.feedType) {
                    case 'Top':
                        endpoint += `/messages/algo.json`;
                        break;
                    case 'My':
                        endpoint += `/messages/my_feed.json`;
                        break;
                    case 'Following':
                        endpoint += `/messages/following.json`;
                        break;
                    case 'Sent':
                        endpoint += `/messages/sent.json`;
                        break;
                    case 'Private':
                        endpoint += `/messages/private.json`;
                        break;
                    case 'Received':
                        endpoint += `/messages/received.json`;
                        break;
                    default:
                        endpoint += `/messages.json`;
                }
            }
            if (messageId !== -1) {
                endpoint += `?older_than=${messageId}`;
            }
            else if (args.options.olderThanId) {
                endpoint += `?older_than=${args.options.olderThanId}`;
            }
            if (args.options.threaded) {
                if (endpoint.indexOf("?") > -1) {
                    endpoint += "&";
                }
                else {
                    endpoint += "?";
                }
                endpoint += `threaded=true`;
            }
            const requestOptions = {
                url: endpoint,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            request_1.default
                .get(requestOptions)
                .then((res) => {
                this.items = this.items.concat(res.messages);
                if (args.options.limit && this.items.length > args.options.limit) {
                    this.items = this.items.slice(0, args.options.limit);
                    resolve();
                }
                else {
                    if (res.meta.older_available === true) {
                        this
                            .getAllItems(logger, args, this.items[this.items.length - 1].id)
                            .then(() => {
                            resolve();
                        }, (err) => {
                            reject(err);
                        });
                    }
                    else {
                        resolve();
                    }
                }
            }, (err) => {
                reject(err);
            });
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.items = []; // this will reset the items array in interactive mode
            try {
                yield this.getAllItems(logger, args, -1);
                this.items.forEach(m => {
                    let shortBody;
                    const bodyToProcess = m.body.plain;
                    if (bodyToProcess) {
                        let maxLength = 35;
                        let addedDots = "...";
                        if (bodyToProcess.length < maxLength) {
                            maxLength = bodyToProcess.length;
                            addedDots = "";
                        }
                        shortBody = bodyToProcess.replace(/\n/g, ' ').substring(0, maxLength) + addedDots;
                    }
                    m.shortBody = shortBody;
                });
                logger.log(this.items);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_YammerMessageListCommand_instances = new WeakSet(), _YammerMessageListCommand_initTelemetry = function _YammerMessageListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            olderThanId: args.options.olderThanId !== undefined,
            threaded: args.options.threaded,
            limit: args.options.limit !== undefined,
            feedType: args.options.feedType !== undefined,
            threadId: args.options.threadId !== undefined,
            groupId: args.options.groupId !== undefined
        });
    });
}, _YammerMessageListCommand_initOptions = function _YammerMessageListCommand_initOptions() {
    this.options.unshift({
        option: '--olderThanId [olderThanId]'
    }, {
        option: '-f, --feedType [feedType]',
        autocomplete: YammerMessageListCommand.feedTypes
    }, {
        option: '--groupId [groupId]'
    }, {
        option: '--threadId [threadId]'
    }, {
        option: '--threaded'
    }, {
        option: '--limit [limit]'
    });
}, _YammerMessageListCommand_initValidators = function _YammerMessageListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.groupId && args.options.threadId) {
            return `You cannot specify groupId and threadId at the same time`;
        }
        if (args.options.feedType && (args.options.groupId || args.options.threadId)) {
            return `You cannot specify the feedType with groupId or threadId at the same time`;
        }
        if (args.options.feedType && YammerMessageListCommand.feedTypes.indexOf(args.options.feedType) < 0) {
            return `${args.options.feedType} is not a valid value for the feedType option. Allowed values are ${YammerMessageListCommand.feedTypes.join('|')}`;
        }
        if (args.options.olderThanId && typeof args.options.olderThanId !== 'number') {
            return `${args.options.olderThanId} is not a number`;
        }
        if (args.options.groupId && typeof args.options.groupId !== 'number') {
            return `${args.options.groupId} is not a number`;
        }
        if (args.options.threadId && typeof args.options.threadId !== 'number') {
            return `${args.options.threadId} is not a number`;
        }
        if (args.options.limit && typeof args.options.limit !== 'number') {
            return `${args.options.limit} is not a number`;
        }
        return true;
    }));
};
YammerMessageListCommand.feedTypes = ['All', 'Top', 'My', 'Following', 'Sent', 'Private', 'Received'];
module.exports = new YammerMessageListCommand();
//# sourceMappingURL=message-list.js.map