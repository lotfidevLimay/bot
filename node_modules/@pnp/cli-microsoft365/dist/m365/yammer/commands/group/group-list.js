"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _YammerGroupListCommand_instances, _YammerGroupListCommand_initTelemetry, _YammerGroupListCommand_initOptions, _YammerGroupListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const YammerCommand_1 = require("../../../base/YammerCommand");
const commands_1 = require("../../commands");
class YammerGroupListCommand extends YammerCommand_1.default {
    constructor() {
        super();
        _YammerGroupListCommand_instances.add(this);
        this.items = [];
        __classPrivateFieldGet(this, _YammerGroupListCommand_instances, "m", _YammerGroupListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _YammerGroupListCommand_instances, "m", _YammerGroupListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _YammerGroupListCommand_instances, "m", _YammerGroupListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.GROUP_LIST;
    }
    get description() {
        return 'Returns the list of groups in a Yammer network or the groups for a specific user';
    }
    defaultProperties() {
        return ['id', 'name', 'email', 'privacy', 'external', 'moderated'];
    }
    getAllItems(logger, args, page) {
        return new Promise((resolve, reject) => {
            let endpoint = `${this.resource}/v1`;
            if (args.options.userId) {
                endpoint += `/groups/for_user/${args.options.userId}.json`;
            }
            else {
                endpoint += `/groups.json`;
            }
            endpoint += `?page=${page}`;
            const requestOptions = {
                url: endpoint,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            request_1.default
                .get(requestOptions)
                .then((res) => {
                this.items = this.items.concat(res);
                if (args.options.limit && this.items.length > args.options.limit) {
                    this.items = this.items.slice(0, args.options.limit);
                    resolve();
                }
                else {
                    // we need to page by 50 items (hardcoded)
                    if (this.items.length % 50 === 0) {
                        this
                            .getAllItems(logger, args, ++page)
                            .then(() => {
                            resolve();
                        }, (err) => {
                            reject(err);
                        });
                    }
                    else {
                        resolve();
                    }
                }
            }, (err) => {
                reject(err);
            });
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.items = []; // this will reset the items array in interactive mode
            try {
                yield this.getAllItems(logger, args, 1);
                logger.log(this.items);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_YammerGroupListCommand_instances = new WeakSet(), _YammerGroupListCommand_initTelemetry = function _YammerGroupListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            userId: args.options.userId !== undefined,
            limit: args.options.limit !== undefined
        });
    });
}, _YammerGroupListCommand_initOptions = function _YammerGroupListCommand_initOptions() {
    this.options.unshift({
        option: '--userId [userId]'
    }, {
        option: '--limit [limit]'
    });
}, _YammerGroupListCommand_initValidators = function _YammerGroupListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.userId && typeof args.options.userId !== 'number') {
            return `${args.options.userId} is not a number`;
        }
        if (args.options.limit && typeof args.options.limit !== 'number') {
            return `${args.options.limit} is not a number`;
        }
        return true;
    }));
};
module.exports = new YammerGroupListCommand();
//# sourceMappingURL=group-list.js.map