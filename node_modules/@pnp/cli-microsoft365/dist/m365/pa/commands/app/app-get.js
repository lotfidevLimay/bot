"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PaAppGetCommand_instances, _PaAppGetCommand_initTelemetry, _PaAppGetCommand_initOptions, _PaAppGetCommand_initValidators, _PaAppGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const PowerAppsCommand_1 = require("../../../base/PowerAppsCommand");
const commands_1 = require("../../commands");
const paAppListCommand = require("../app/app-list");
class PaAppGetCommand extends PowerAppsCommand_1.default {
    constructor() {
        super();
        _PaAppGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _PaAppGetCommand_instances, "m", _PaAppGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PaAppGetCommand_instances, "m", _PaAppGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PaAppGetCommand_instances, "m", _PaAppGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _PaAppGetCommand_instances, "m", _PaAppGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APP_GET;
    }
    get description() {
        return 'Gets information about the specified Microsoft Power App';
    }
    defaultProperties() {
        return ['name', 'displayName', 'description', 'appVersion', 'owner'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (args.options.name) {
                    const requestOptions = {
                        url: `${this.resource}/providers/Microsoft.PowerApps/apps/${encodeURIComponent(args.options.name)}?api-version=2016-11-01`,
                        headers: {
                            accept: 'application/json'
                        },
                        responseType: 'json'
                    };
                    if (this.verbose) {
                        logger.logToStderr(`Retrieving information about Microsoft Power App with name '${args.options.name}'...`);
                    }
                    const res = yield request_1.default.get(requestOptions);
                    logger.log(this.setProperties(res));
                }
                else {
                    if (this.verbose) {
                        logger.logToStderr(`Retrieving information about Microsoft Power App with displayName '${args.options.displayName}'...`);
                    }
                    const getAppsOutput = yield this.getApps(args, logger);
                    const allApps = JSON.parse(getAppsOutput.stdout);
                    if (allApps.length > 0) {
                        const app = allApps.find((a) => {
                            return a.properties.displayName.toLowerCase() === `${args.options.displayName}`.toLowerCase();
                        });
                        if (!!app) {
                            logger.log(this.setProperties(app));
                        }
                        else {
                            if (this.verbose) {
                                logger.logToStderr(`No app found with displayName '${args.options.displayName}'`);
                            }
                        }
                    }
                    else {
                        if (this.verbose) {
                            logger.logToStderr('No apps found');
                        }
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getApps(args, logger) {
        if (this.verbose) {
            logger.logToStderr(`Retrieving all apps...`);
        }
        const options = {
            output: 'json',
            debug: this.debug,
            verbose: this.verbose
        };
        return Cli_1.Cli.executeCommandWithOutput(paAppListCommand, { options: Object.assign(Object.assign({}, options), { _: [] }) });
    }
    setProperties(app) {
        app.displayName = app.properties.displayName;
        app.description = app.properties.description || '';
        app.appVersion = app.properties.appVersion;
        app.owner = app.properties.owner.email || '';
        return app;
    }
}
_PaAppGetCommand_instances = new WeakSet(), _PaAppGetCommand_initTelemetry = function _PaAppGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            name: typeof args.options.name !== 'undefined',
            displayName: typeof args.options.displayName !== 'undefined'
        });
    });
}, _PaAppGetCommand_initOptions = function _PaAppGetCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name [name]'
    }, {
        option: '-d, --displayName [displayName]'
    });
}, _PaAppGetCommand_initValidators = function _PaAppGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.name && !validation_1.validation.isValidGuid(args.options.name)) {
            return `${args.options.name} is not a valid GUID`;
        }
        return true;
    }));
}, _PaAppGetCommand_initOptionSets = function _PaAppGetCommand_initOptionSets() {
    this.optionSets.push(['name', 'displayName']);
};
module.exports = new PaAppGetCommand();
//# sourceMappingURL=app-get.js.map