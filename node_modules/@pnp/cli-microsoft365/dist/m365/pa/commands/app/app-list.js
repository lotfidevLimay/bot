"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PaAppListCommand_instances, _PaAppListCommand_initTelemetry, _PaAppListCommand_initOptions, _PaAppListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const PowerAppsCommand_1 = require("../../../base/PowerAppsCommand");
const commands_1 = require("../../commands");
class PaAppListCommand extends PowerAppsCommand_1.default {
    constructor() {
        super();
        _PaAppListCommand_instances.add(this);
        __classPrivateFieldGet(this, _PaAppListCommand_instances, "m", _PaAppListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PaAppListCommand_instances, "m", _PaAppListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PaAppListCommand_instances, "m", _PaAppListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.APP_LIST;
    }
    get description() {
        return 'Lists all Power Apps apps';
    }
    defaultProperties() {
        return ['name', 'displayName'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.resource}/providers/Microsoft.PowerApps${args.options.asAdmin ? '/scopes/admin' : ''}${args.options.environment ? '/environments/' + encodeURIComponent(args.options.environment) : ''}/apps?api-version=2017-08-01`;
            try {
                const apps = yield odata_1.odata.getAllItems(url);
                if (apps.length > 0) {
                    apps.forEach(a => {
                        a.displayName = a.properties.displayName;
                    });
                    logger.log(apps);
                }
                else {
                    if (this.verbose) {
                        logger.logToStderr('No apps found');
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_PaAppListCommand_instances = new WeakSet(), _PaAppListCommand_initTelemetry = function _PaAppListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            asAdmin: args.options.asAdmin === true,
            environment: typeof args.options.environment !== 'undefined'
        });
    });
}, _PaAppListCommand_initOptions = function _PaAppListCommand_initOptions() {
    this.options.unshift({
        option: '-e, --environment [environment]'
    }, {
        option: '--asAdmin'
    });
}, _PaAppListCommand_initValidators = function _PaAppListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.asAdmin && !args.options.environment) {
            return 'When specifying the asAdmin option the environment option is required as well';
        }
        if (args.options.environment && !args.options.asAdmin) {
            return 'When specifying the environment option the asAdmin option is required as well';
        }
        return true;
    }));
};
module.exports = new PaAppListCommand();
//# sourceMappingURL=app-list.js.map