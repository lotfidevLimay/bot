"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PaSolutionInitCommand_instances, _PaSolutionInitCommand_initOptions, _PaSolutionInitCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const fs = require("fs");
const path = require("path");
const uuid_1 = require("uuid");
const Command_1 = require("../../../../Command");
const validation_1 = require("../../../../utils/validation");
const AnonymousCommand_1 = require("../../../base/AnonymousCommand");
const commands_1 = require("../../commands");
const template_instantiator_1 = require("../../template-instantiator");
/*
 * Logic extracted from bolt.module.solution.dll
 * Version: 1.0.6
 * Class: bolt.module.solution.SolutionInitVerb
 */
class PaSolutionInitCommand extends AnonymousCommand_1.default {
    constructor() {
        super();
        _PaSolutionInitCommand_instances.add(this);
        __classPrivateFieldGet(this, _PaSolutionInitCommand_instances, "m", _PaSolutionInitCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PaSolutionInitCommand_instances, "m", _PaSolutionInitCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SOLUTION_INIT;
    }
    get description() {
        return 'Initializes a directory with a new CDS solution project';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const solutionInitTemplatePath = path.join(__dirname, 'solution-init', 'assets');
                const cdsAssetsTemplatePath = path.join(solutionInitTemplatePath, 'Other');
                const workingDirectory = process.cwd();
                const workingDirectoryName = path.basename(workingDirectory);
                const cdsAssetsDirectory = path.join(workingDirectory, 'Other');
                const cdsAssetsDirectorySolutionsFile = path.join(workingDirectory, 'Other', 'Solution.xml');
                const publisherName = args.options.publisherName;
                const publisherPrefix = args.options.publisherPrefix.toLocaleLowerCase();
                const customizationOptionValuePrefix = this.generateOptionValuePrefixForPublisher(publisherPrefix);
                const variables = {
                    "$publisherName$": publisherName,
                    "$customizationPrefix$": publisherPrefix,
                    "$customizationOptionValuePrefix$": customizationOptionValuePrefix,
                    "$cdsProjectGuid$": (0, uuid_1.v4)(),
                    "solutionprojecttype": workingDirectoryName,
                    "$solutionName$": workingDirectoryName
                };
                if (this.verbose) {
                    logger.logToStderr(`publisherName: ${publisherName}`);
                    logger.logToStderr(`publisherPrefix: ${publisherPrefix}`);
                    logger.logToStderr(`customizationOptionValuePrefix: ${customizationOptionValuePrefix}`);
                    logger.logToStderr(`solutionInitTemplatePath: ${solutionInitTemplatePath}`);
                    logger.logToStderr(`cdsAssetsTemplatePath: ${cdsAssetsTemplatePath}`);
                    logger.logToStderr(`workingDirectory: ${workingDirectory}`);
                    logger.logToStderr(`workingDirectoryName: ${workingDirectoryName}`);
                    logger.logToStderr(`cdsAssetsDirectory: ${cdsAssetsDirectory}`);
                    logger.logToStderr(`cdsAssetsDirectorySolutionsFile: ${cdsAssetsDirectorySolutionsFile}`);
                }
                template_instantiator_1.default.instantiate(logger, solutionInitTemplatePath, workingDirectory, false, variables, this.verbose);
                if (this.verbose) {
                    logger.logToStderr(` `);
                }
                logger.log(chalk.green(`CDS solution project with name '${workingDirectoryName}' created successfully in current directory.`));
                const cdsAssetsExist = fs.existsSync(cdsAssetsDirectory) && fs.existsSync(cdsAssetsDirectorySolutionsFile);
                if (cdsAssetsExist) {
                    logger.log(chalk.yellow(`CDS solution files already exist in the current directory. Skipping CDS solution files creation.`));
                }
                else {
                    template_instantiator_1.default.instantiate(logger, cdsAssetsTemplatePath, cdsAssetsDirectory, false, variables, this.verbose);
                    logger.log(chalk.green(`CDS solution files were successfully created for this project in the sub-directory 'Other', using solution name '${workingDirectory}', publisher name '${publisherName}', and customization prefix '${publisherPrefix}'.`));
                    logger.log(`Please verify the publisher information and solution name found in the '${chalk.grey('Solution.xml')}' file.`);
                }
            }
            catch (err) {
                throw new Command_1.CommandError(err);
            }
        });
    }
    generateOptionValuePrefixForPublisher(customizationPrefix) {
        if (customizationPrefix.toLocaleLowerCase() !== "new") {
            return this.generateOptionValuePrefixForPublisherInternal(this.getHashCode(customizationPrefix));
        }
        return "10000";
    }
    generateOptionValuePrefixForPublisherInternal(customizationPrefixHashCode) {
        return Math.abs(customizationPrefixHashCode % 90000) + 10000 + "";
    }
    getHashCode(s) {
        let h = 0;
        for (let i = 0; i < s.length; i++) {
            h = Math.imul(31, h) + s.charCodeAt(i) | 0;
        }
        return h;
    }
}
_PaSolutionInitCommand_instances = new WeakSet(), _PaSolutionInitCommand_initOptions = function _PaSolutionInitCommand_initOptions() {
    this.options.unshift({
        option: '--publisherName <publisherName>'
    }, {
        option: '--publisherPrefix <publisherPrefix>'
    });
}, _PaSolutionInitCommand_initValidators = function _PaSolutionInitCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (fs.readdirSync(process.cwd()).some(fn => path.extname(fn).toLowerCase() === '.cdsproj')) {
            return 'CDS project creation failed. The current directory already contains a project. Please create a new directory and retry the operation.';
        }
        const workingDirectoryName = path.basename(process.cwd());
        if (!validation_1.validation.isValidFileName(workingDirectoryName)) {
            return `Empty or invalid project name '${workingDirectoryName}'`;
        }
        if (args.options.publisherPrefix.length < 2 || args.options.publisherPrefix.length > 8 || !/^(?!mscrm)^([a-zA-Z])\w*$/i.test(args.options.publisherPrefix)) {
            return `Value of 'publisherPrefix' is invalid. The prefix must be 2 to 8 characters long, can only consist of alpha-numerics, must start with a letter, and cannot start with 'mscrm'.`;
        }
        if (!/^([a-zA-Z_])\w*$/i.test(args.options.publisherName)) {
            return `Value of 'publisherName' is invalid. Only characters within the ranges [A-Z], [a-z], [0-9], or _ are allowed. The first character may only be in the ranges [A-Z], [a-z], or _.`;
        }
        return true;
    }));
};
module.exports = new PaSolutionInitCommand();
//# sourceMappingURL=solution-init.js.map