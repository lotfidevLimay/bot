"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PaConnectorListCommand_instances, _PaConnectorListCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const PowerAppsCommand_1 = require("../../../base/PowerAppsCommand");
const commands_1 = require("../../../flow/commands");
const commands_2 = require("../../commands");
class PaConnectorListCommand extends PowerAppsCommand_1.default {
    constructor() {
        super();
        _PaConnectorListCommand_instances.add(this);
        __classPrivateFieldGet(this, _PaConnectorListCommand_instances, "m", _PaConnectorListCommand_initOptions).call(this);
    }
    get name() {
        return commands_2.default.CONNECTOR_LIST;
    }
    get description() {
        return 'Lists custom connectors in the given environment';
    }
    alias() {
        return [commands_1.default.CONNECTOR_LIST];
    }
    defaultProperties() {
        return ['name', 'displayName'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.resource}/providers/Microsoft.PowerApps/apis?api-version=2016-11-01&$filter=environment%20eq%20%27${encodeURIComponent(args.options.environment)}%27%20and%20IsCustomApi%20eq%20%27True%27`;
            try {
                const connectors = yield odata_1.odata.getAllItems(url);
                if (connectors.length > 0) {
                    connectors.forEach(c => {
                        c.displayName = c.properties.displayName;
                    });
                    logger.log(connectors);
                }
                else {
                    if (this.verbose) {
                        logger.logToStderr('No custom connectors found');
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_PaConnectorListCommand_instances = new WeakSet(), _PaConnectorListCommand_initOptions = function _PaConnectorListCommand_initOptions() {
    this.options.unshift({
        option: '-e, --environment <environment>'
    });
};
module.exports = new PaConnectorListCommand();
//# sourceMappingURL=connector-list.js.map