"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PaConnectorExportCommand_instances, _PaConnectorExportCommand_initTelemetry, _PaConnectorExportCommand_initOptions, _PaConnectorExportCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const request_1 = require("../../../../request");
const PowerAppsCommand_1 = require("../../../base/PowerAppsCommand");
const commands_1 = require("../../../flow/commands");
const commands_2 = require("../../commands");
class PaConnectorExportCommand extends PowerAppsCommand_1.default {
    constructor() {
        super();
        _PaConnectorExportCommand_instances.add(this);
        __classPrivateFieldGet(this, _PaConnectorExportCommand_instances, "m", _PaConnectorExportCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PaConnectorExportCommand_instances, "m", _PaConnectorExportCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PaConnectorExportCommand_instances, "m", _PaConnectorExportCommand_initValidators).call(this);
    }
    get name() {
        return commands_2.default.CONNECTOR_EXPORT;
    }
    get description() {
        return 'Exports the specified power automate or power apps custom connector';
    }
    alias() {
        return [commands_1.default.CONNECTOR_EXPORT];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const outputFolder = path.resolve(args.options.outputFolder || '.', args.options.connector);
            const requestOptions = {
                url: `${this.resource}/providers/Microsoft.PowerApps/apis/${encodeURIComponent(args.options.connector)}?api-version=2016-11-01&$filter=environment%20eq%20%27${encodeURIComponent(args.options.environment)}%27%20and%20IsCustomApi%20eq%20%27True%27`,
                headers: {
                    accept: 'application/json'
                },
                responseType: 'json'
            };
            let connector;
            if (this.verbose) {
                logger.logToStderr('Downloading connector...');
            }
            try {
                connector = yield request_1.default.get(requestOptions);
                if (!connector.properties) {
                    throw 'Properties not present in the api registration information.';
                }
                if (this.verbose) {
                    logger.logToStderr(`Creating output folder ${outputFolder}...`);
                }
                fs.mkdirSync(outputFolder);
                const settings = {
                    apiDefinition: "apiDefinition.swagger.json",
                    apiProperties: "apiProperties.json",
                    connectorId: args.options.connector,
                    environment: args.options.environment,
                    icon: "icon.png",
                    powerAppsApiVersion: "2016-11-01",
                    powerAppsUrl: "https://api.powerapps.com"
                };
                if (this.verbose) {
                    logger.logToStderr('Exporting settings...');
                }
                fs.writeFileSync(path.join(outputFolder, 'settings.json'), JSON.stringify(settings, null, 2), 'utf8');
                const propertiesWhitelist = [
                    "connectionParameters",
                    "iconBrandColor",
                    "capabilities",
                    "policyTemplateInstances"
                ];
                const apiProperties = {
                    properties: JSON.parse(JSON.stringify(connector.properties))
                };
                Object.keys(apiProperties.properties).forEach(k => {
                    if (propertiesWhitelist.indexOf(k) < 0) {
                        delete apiProperties.properties[k];
                    }
                });
                if (this.verbose) {
                    logger.logToStderr('Exporting API properties...');
                }
                fs.writeFileSync(path.join(outputFolder, 'apiProperties.json'), JSON.stringify(apiProperties, null, 2), 'utf8');
                let swagger = '';
                if (connector.properties.apiDefinitions &&
                    connector.properties.apiDefinitions.originalSwaggerUrl) {
                    if (this.verbose) {
                        logger.logToStderr(`Downloading swagger from ${connector.properties.apiDefinitions.originalSwaggerUrl}...`);
                    }
                    swagger = yield request_1.default
                        .get({
                        url: connector.properties.apiDefinitions.originalSwaggerUrl,
                        headers: {
                            'x-anonymous': 'true'
                        }
                    });
                }
                else {
                    if (this.debug) {
                        logger.logToStderr('originalSwaggerUrl not set. Skipping');
                    }
                }
                if (swagger && swagger.length > 0) {
                    if (this.debug) {
                        logger.logToStderr('Downloaded swagger');
                        logger.logToStderr(swagger);
                    }
                    if (this.verbose) {
                        logger.logToStderr('Exporting swagger...');
                    }
                    fs.writeFileSync(path.join(outputFolder, 'apiDefinition.swagger.json'), swagger, 'utf8');
                }
                let icon = '';
                if (connector.properties.iconUri) {
                    if (this.verbose) {
                        logger.logToStderr(`Downloading icon from ${connector.properties.iconUri}...`);
                    }
                    icon = yield request_1.default
                        .get({
                        url: connector.properties.iconUri,
                        responseType: 'arraybuffer',
                        headers: {
                            'x-anonymous': 'true'
                        }
                    });
                }
                else {
                    if (this.debug) {
                        logger.logToStderr('iconUri not set. Skipping');
                    }
                }
                if (icon) {
                    if (this.verbose) {
                        logger.logToStderr('Exporting icon...');
                    }
                    const iconBuffer = Buffer.from(icon, 'utf8');
                    fs.writeFileSync(path.join(outputFolder, 'icon.png'), iconBuffer);
                }
                else {
                    if (this.debug) {
                        logger.logToStderr('No icon retrieved');
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_PaConnectorExportCommand_instances = new WeakSet(), _PaConnectorExportCommand_initTelemetry = function _PaConnectorExportCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            outputFolder: typeof args.options.outputFolder !== 'undefined'
        });
    });
}, _PaConnectorExportCommand_initOptions = function _PaConnectorExportCommand_initOptions() {
    this.options.unshift({
        option: '-e, --environment <environment>'
    }, {
        option: '-c, --connector <connector>'
    }, {
        option: '--outputFolder [outputFolder]'
    });
}, _PaConnectorExportCommand_initValidators = function _PaConnectorExportCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.outputFolder &&
            !fs.existsSync(path.resolve(args.options.outputFolder))) {
            return `Specified output folder ${args.options.outputFolder} doesn't exist`;
        }
        const outputFolder = path.resolve(args.options.outputFolder || '.', args.options.connector);
        if (fs.existsSync(outputFolder)) {
            return `Connector output folder ${outputFolder} already exists`;
        }
        return true;
    }));
};
module.exports = new PaConnectorExportCommand();
//# sourceMappingURL=connector-export.js.map