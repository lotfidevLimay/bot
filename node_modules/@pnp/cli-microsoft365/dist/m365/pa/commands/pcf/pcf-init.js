"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PaPcfInitCommand_instances, _PaPcfInitCommand_initTelemetry, _PaPcfInitCommand_initOptions, _PaPcfInitCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const fs = require("fs");
const path = require("path");
const uuid_1 = require("uuid");
const Command_1 = require("../../../../Command");
const validation_1 = require("../../../../utils/validation");
const AnonymousCommand_1 = require("../../../base/AnonymousCommand");
const commands_1 = require("../../commands");
const template_instantiator_1 = require("../../template-instantiator");
/*
 * Logic extracted from bolt.module.pcf.dll
 * Version: 1.0.6
 * Class: bolt.module.pcf.PcfInitVerb
 */
class PaPcfInitCommand extends AnonymousCommand_1.default {
    constructor() {
        super();
        _PaPcfInitCommand_instances.add(this);
        __classPrivateFieldGet(this, _PaPcfInitCommand_instances, "m", _PaPcfInitCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _PaPcfInitCommand_instances, "m", _PaPcfInitCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _PaPcfInitCommand_instances, "m", _PaPcfInitCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PCF_INIT;
    }
    get description() {
        return 'Creates new PowerApps component framework project';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const pcfTemplatePath = path.join(__dirname, 'pcf-init', 'assets');
                const pcfComponentTemplatePath = path.join(pcfTemplatePath, 'control', `${args.options.template.toLowerCase()}-template`);
                const workingDirectory = process.cwd();
                const workingDirectoryName = path.basename(workingDirectory);
                const componentDirectory = path.join(workingDirectory, args.options.name);
                const variables = {
                    "$namespaceplaceholder$": args.options.namespace,
                    "$controlnameplaceholder$": args.options.name,
                    "$pcfProjectName$": workingDirectoryName,
                    "pcfprojecttype": workingDirectoryName,
                    "$pcfProjectGuid$": (0, uuid_1.v4)()
                };
                if (this.verbose) {
                    logger.logToStderr(`name: ${args.options.name}`);
                    logger.logToStderr(`namespace: ${args.options.namespace}`);
                    logger.logToStderr(`template: ${args.options.template}`);
                    logger.logToStderr(`pcfTemplatePath: ${pcfTemplatePath}`);
                    logger.logToStderr(`pcfComponentTemplatePath: ${pcfComponentTemplatePath}`);
                    logger.logToStderr(`workingDirectory: ${workingDirectory}`);
                    logger.logToStderr(`workingDirectoryName: ${workingDirectoryName}`);
                    logger.logToStderr(`componentDirectory: ${componentDirectory}`);
                }
                template_instantiator_1.default.instantiate(logger, pcfTemplatePath, workingDirectory, false, variables, this.verbose);
                template_instantiator_1.default.instantiate(logger, pcfComponentTemplatePath, componentDirectory, true, variables, this.verbose);
                if (this.verbose) {
                    logger.logToStderr(` `);
                }
                logger.log(chalk.green(`The PowerApps component framework project was successfully created in '${workingDirectory}'.`));
                logger.log(`Be sure to run '${chalk.grey('npm install')}' in this directory to install project dependencies.`);
            }
            catch (err) {
                throw new Command_1.CommandError(err);
            }
        });
    }
}
_PaPcfInitCommand_instances = new WeakSet(), _PaPcfInitCommand_initTelemetry = function _PaPcfInitCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            template: args.options.template
        });
    });
}, _PaPcfInitCommand_initOptions = function _PaPcfInitCommand_initOptions() {
    this.options.unshift({
        option: '--namespace <namespace>'
    }, {
        option: '--name <name>'
    }, {
        option: '--template <template>',
        autocomplete: ['Field', 'Dataset']
    });
}, _PaPcfInitCommand_initValidators = function _PaPcfInitCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (fs.readdirSync(process.cwd()).some(fn => path.extname(fn).toLowerCase().endsWith('proj'))) {
            return 'PowerApps component framework project creation failed. The current directory already contains a project. Please create a new directory and retry the operation.';
        }
        const workingDirectoryName = path.basename(process.cwd());
        if (!validation_1.validation.isValidFileName(workingDirectoryName)) {
            return `Empty or invalid project name '${workingDirectoryName}'`;
        }
        if (!/^(?!\d)[a-zA-Z0-9]+$/i.test(args.options.name)) {
            return `Value of 'name' is invalid. Only characters within the ranges [A - Z], [a - z] or [0 - 9] are allowed. The first character may not be a number.`;
        }
        if (validation_1.validation.isJavaScriptReservedWord(args.options.name)) {
            return `The value '${args.options.name}' passed for 'name' is a reserved word.`;
        }
        if (!/^(?!\.|\d)(?!.*\.$)(?!.*?\.\d)(?!.*?\.\.)[a-zA-Z0-9.]+$/i.test(args.options.namespace)) {
            return `Value of 'namespace' is invalid. Only characters within the ranges [A - Z], [a - z], [0 - 9], or '.' are allowed. The first and last character may not be the '.' character. Consecutive '.' characters are not allowed. Numbers are not allowed as the first character or immediately after a period.`;
        }
        if (validation_1.validation.isJavaScriptReservedWord(args.options.namespace)) {
            return `The value '${args.options.namespace}' passed for 'namespace' is or includes a reserved word.`;
        }
        if (args.options.namespace && args.options.name && (args.options.namespace + args.options.name).length > 75) {
            return `The total length of values for 'name' and 'namespace' cannot exceed 75. Length of 'name' is ${args.options.name.length}, length of 'namespace' is ${args.options.namespace.length}.`;
        }
        const testTemplate = args.options.template.toLowerCase();
        if (!(testTemplate === 'field' || testTemplate === 'dataset')) {
            return `Template must be either 'Field' or 'Dataset', but '${args.options.template}' was provided.`;
        }
        return true;
    }));
};
module.exports = new PaPcfInitCommand();
//# sourceMappingURL=pcf-init.js.map