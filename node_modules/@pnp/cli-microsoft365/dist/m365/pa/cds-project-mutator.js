"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const xmldom_1 = require("@xmldom/xmldom");
/*
 * Logic extracted from bolt.module.solution.dll
 * Version: 0.4.3
 * Class: bolt.module.solution.CdsProjectMutator
 */
class CdsProjectMutator {
    constructor(document) {
        this._cdsProjectDocument = new xmldom_1.DOMParser().parseFromString(document, 'text/xml');
        this._cdsProject = this._cdsProjectDocument.documentElement;
        this._cdsNamespace = this._cdsProject.lookupNamespaceURI('') || '';
    }
    get cdsProjectDocument() {
        return this._cdsProjectDocument;
    }
    addProjectReference(referencedProjectPath) {
        if (!this.doesProjectReferenceExists(referencedProjectPath)) {
            const projectReferenceElement = this.createProjectReferenceElement(referencedProjectPath);
            let projectReferenceItemGroup = this.getProjectReferenceItemGroup();
            if (projectReferenceItemGroup) {
                this.addProjectReferenceElement(projectReferenceItemGroup, projectReferenceElement);
            }
            else {
                projectReferenceItemGroup = this.createProjectReferenceItemGroup(projectReferenceElement);
                this.addProjectReferenceItemGroupElement(projectReferenceItemGroup);
            }
        }
    }
    doesProjectReferenceExists(referencedProjectPath) {
        return this.getNamedGroups('ItemGroup').some(itemGroup => {
            return this.getProjectReferencesFromItemGroup(itemGroup).some(projectReference => {
                const projectReferencePath = projectReference.getAttributeNode('Include');
                return (projectReferencePath && path.normalize(projectReferencePath.value).toLowerCase() === referencedProjectPath.toLowerCase());
            });
        });
    }
    getNamedGroups(name) {
        return Array.from(this._cdsProject.getElementsByTagNameNS(this._cdsNamespace, name));
    }
    getProjectReferencesFromItemGroup(itemGroup) {
        return Array.from(itemGroup.getElementsByTagNameNS(this._cdsNamespace, 'ProjectReference'));
    }
    getProjectReferenceItemGroup() {
        const itemGroups = this.getNamedGroups('ItemGroup').filter(itemGroup => this.getProjectReferencesFromItemGroup(itemGroup).length > 0);
        return itemGroups.length > 0 ? itemGroups[0] : null;
    }
    createProjectReferenceElement(referencedProjectPath) {
        const projectReferenceElement = this._cdsProjectDocument.createElementNS(this._cdsNamespace, 'ProjectReference');
        projectReferenceElement.setAttributeNS(this._cdsNamespace, 'Include', referencedProjectPath);
        return projectReferenceElement;
    }
    createProjectReferenceItemGroup(projectReferenceElement) {
        const projectReferenceItemGroup = this._cdsProjectDocument.createElementNS(this._cdsNamespace, 'ItemGroup');
        projectReferenceItemGroup.appendChild(this._cdsProjectDocument.createTextNode('\n  '));
        this.addProjectReferenceElement(projectReferenceItemGroup, projectReferenceElement);
        return projectReferenceItemGroup;
    }
    addProjectReferenceElement(projectReferenceItemGroup, projectReferenceElement) {
        projectReferenceItemGroup.appendChild(this._cdsProjectDocument.createTextNode('  '));
        projectReferenceItemGroup.appendChild(projectReferenceElement);
        projectReferenceItemGroup.appendChild(this._cdsProjectDocument.createTextNode('\n  '));
    }
    addProjectReferenceItemGroupElement(projectReferenceItemGroup) {
        const itemGroups = this.getNamedGroups('ItemGroup');
        if (itemGroups.length > 0) {
            this._cdsProject.insertBefore(projectReferenceItemGroup, itemGroups[itemGroups.length - 1].nextSibling);
            this._cdsProject.insertBefore(this._cdsProjectDocument.createTextNode('\n\n  '), projectReferenceItemGroup);
        }
        else {
            const propertyGroups = this.getNamedGroups('PropertyGroup');
            if (propertyGroups.length > 0) {
                this._cdsProject.insertBefore(projectReferenceItemGroup, propertyGroups[propertyGroups.length - 1].nextSibling);
                this._cdsProject.insertBefore(this._cdsProjectDocument.createTextNode('\n\n  '), projectReferenceItemGroup);
            }
            else {
                const importGroups = this.getNamedGroups('Import');
                if (importGroups.length > 0) {
                    this._cdsProject.insertBefore(projectReferenceItemGroup, importGroups[0].nextSibling);
                    this._cdsProject.insertBefore(this._cdsProjectDocument.createTextNode('\n\n  '), projectReferenceItemGroup);
                }
                else {
                    this._cdsProject.appendChild(this._cdsProjectDocument.createTextNode('\n  '));
                    this._cdsProject.appendChild(projectReferenceItemGroup);
                    this._cdsProject.appendChild(this._cdsProjectDocument.createTextNode('\n'));
                }
            }
        }
    }
}
exports.default = CdsProjectMutator;
//# sourceMappingURL=cds-project-mutator.js.map