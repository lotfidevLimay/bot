"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TenantIdGetCommand_instances, _TenantIdGetCommand_initTelemetry, _TenantIdGetCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const Command_1 = require("../../../../Command");
const request_1 = require("../../../../request");
const accessToken_1 = require("../../../../utils/accessToken");
const commands_1 = require("../../commands");
class TenantIdGetCommand extends Command_1.default {
    constructor() {
        super();
        _TenantIdGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _TenantIdGetCommand_instances, "m", _TenantIdGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TenantIdGetCommand_instances, "m", _TenantIdGetCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.ID_GET;
    }
    get description() {
        return 'Gets Microsoft 365 tenant ID for the specified domain';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let domainName = args.options.domainName;
            if (!domainName) {
                const userName = accessToken_1.accessToken.getUserNameFromAccessToken(Auth_1.default.service.accessTokens[Auth_1.default.defaultResource].accessToken);
                domainName = userName.split('@')[1];
            }
            const requestOptions = {
                url: `https://login.windows.net/${domainName}/.well-known/openid-configuration`,
                headers: {
                    'content-type': 'application/json',
                    accept: 'application/json',
                    'x-anonymous': true
                },
                responseType: 'json'
            };
            try {
                const res = yield request_1.default.get(requestOptions);
                if (res.error) {
                    throw res.error_description;
                }
                if (res.token_endpoint) {
                    logger.log(res.token_endpoint.split('/')[3]);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TenantIdGetCommand_instances = new WeakSet(), _TenantIdGetCommand_initTelemetry = function _TenantIdGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            domainName: typeof args.options.domainName !== 'undefined'
        });
    });
}, _TenantIdGetCommand_initOptions = function _TenantIdGetCommand_initOptions() {
    this.options.unshift({
        option: '-d, --domainName [domainName]'
    });
};
module.exports = new TenantIdGetCommand();
//# sourceMappingURL=id-get.js.map