"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TenantSecurityAlertsListCommand_instances, _TenantSecurityAlertsListCommand_initTelemetry, _TenantSecurityAlertsListCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TenantSecurityAlertsListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TenantSecurityAlertsListCommand_instances.add(this);
        __classPrivateFieldGet(this, _TenantSecurityAlertsListCommand_instances, "m", _TenantSecurityAlertsListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TenantSecurityAlertsListCommand_instances, "m", _TenantSecurityAlertsListCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.SECURITY_ALERTS_LIST;
    }
    get description() {
        return 'Gets the security alerts for a tenant';
    }
    defaultProperties() {
        return ['id', 'title', 'severity'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.listAlert(args.options);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    listAlert(options) {
        let queryFilter = '';
        if (options.vendor) {
            let vendorName = options.vendor;
            switch (options.vendor.toLowerCase()) {
                case 'azure security center':
                    vendorName = 'ASC';
                    break;
                case 'microsoft cloud app security':
                    vendorName = 'MCAS';
                    break;
                case 'azure active directory identity protection':
                    vendorName = 'IPC';
            }
            queryFilter = `?$filter=vendorInformation/provider eq '${encodeURIComponent(vendorName)}'`;
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/security/alerts${queryFilter}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then(response => {
            const alertList = response.value;
            if (!alertList) {
                return Promise.reject(`Error fetching security alerts`);
            }
            return Promise.resolve(alertList);
        });
    }
}
_TenantSecurityAlertsListCommand_instances = new WeakSet(), _TenantSecurityAlertsListCommand_initTelemetry = function _TenantSecurityAlertsListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            vendor: typeof args.options.vendor !== 'undefined'
        });
    });
}, _TenantSecurityAlertsListCommand_initOptions = function _TenantSecurityAlertsListCommand_initOptions() {
    this.options.unshift({ option: '--vendor [vendor]' });
};
module.exports = new TenantSecurityAlertsListCommand();
//# sourceMappingURL=security-alerts-list.js.map