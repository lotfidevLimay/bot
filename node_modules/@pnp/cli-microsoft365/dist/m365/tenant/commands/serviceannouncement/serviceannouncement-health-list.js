"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TenantServiceAnnouncementHealthListCommand_instances, _TenantServiceAnnouncementHealthListCommand_initTelemetry, _TenantServiceAnnouncementHealthListCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TenantServiceAnnouncementHealthListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TenantServiceAnnouncementHealthListCommand_instances.add(this);
        __classPrivateFieldGet(this, _TenantServiceAnnouncementHealthListCommand_instances, "m", _TenantServiceAnnouncementHealthListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TenantServiceAnnouncementHealthListCommand_instances, "m", _TenantServiceAnnouncementHealthListCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.SERVICEANNOUNCEMENT_HEALTH_LIST;
    }
    get description() {
        return 'This operation provides the health report of all subscribed services for a tenant';
    }
    defaultProperties() {
        return ['id', 'status', 'service'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.listServiceHealth(args.options);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    listServiceHealth(options) {
        const requestOptions = {
            url: `${this.resource}/v1.0/admin/serviceAnnouncement/healthOverviews${options.issues && (!options.output || options.output.toLocaleLowerCase() === 'json') ? '?$expand=issues' : ''}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then(response => {
            const serviceHealthList = response.value;
            if (!serviceHealthList) {
                return Promise.reject(`Error fetching service health`);
            }
            return Promise.resolve(serviceHealthList);
        });
    }
}
_TenantServiceAnnouncementHealthListCommand_instances = new WeakSet(), _TenantServiceAnnouncementHealthListCommand_initTelemetry = function _TenantServiceAnnouncementHealthListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            issues: typeof args.options.issues !== 'undefined'
        });
    });
}, _TenantServiceAnnouncementHealthListCommand_initOptions = function _TenantServiceAnnouncementHealthListCommand_initOptions() {
    this.options.unshift({ option: '-i, --issues' });
};
module.exports = new TenantServiceAnnouncementHealthListCommand();
//# sourceMappingURL=serviceannouncement-health-list.js.map