"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TenantServiceAnnouncementHealthIssueListCommand_instances, _TenantServiceAnnouncementHealthIssueListCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TenantServiceAnnouncementHealthIssueListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TenantServiceAnnouncementHealthIssueListCommand_instances.add(this);
        __classPrivateFieldGet(this, _TenantServiceAnnouncementHealthIssueListCommand_instances, "m", _TenantServiceAnnouncementHealthIssueListCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.SERVICEANNOUNCEMENT_HEALTHISSUE_LIST;
    }
    get description() {
        return 'Gets all service health issues for the tenant';
    }
    defaultProperties() {
        return ['id', 'title'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let endpoint = `${this.resource}/v1.0/admin/serviceAnnouncement/issues`;
            if (args.options.service) {
                endpoint += `?$filter=service eq '${encodeURIComponent(args.options.service)}'`;
            }
            try {
                const items = yield odata_1.odata.getAllItems(endpoint);
                logger.log(items);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TenantServiceAnnouncementHealthIssueListCommand_instances = new WeakSet(), _TenantServiceAnnouncementHealthIssueListCommand_initOptions = function _TenantServiceAnnouncementHealthIssueListCommand_initOptions() {
    this.options.unshift({
        option: '-s, --service [service]'
    });
};
module.exports = new TenantServiceAnnouncementHealthIssueListCommand();
//# sourceMappingURL=serviceannouncement-healthissue-list.js.map