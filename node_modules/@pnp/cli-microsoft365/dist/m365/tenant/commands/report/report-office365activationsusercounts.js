"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TenantReportOffice365ActivationsUserCountsCommand extends GraphCommand_1.default {
    get name() {
        return commands_1.default.REPORT_OFFICE365ACTIVATIONSUSERCOUNTS;
    }
    get description() {
        return 'Get the count of enabled users with activated Office subscriptions.';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = `${this.resource}/v1.0/reports/getOffice365ActivationsUserCounts`;
            yield this.loadReport(endpoint, logger, args.options.output);
        });
    }
    loadReport(endPoint, logger, output) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: endPoint,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            try {
                const res = yield request_1.default.get(requestOptions);
                let content = '';
                const cleanResponse = this.removeEmptyLines(res);
                if (output && output.toLowerCase() === 'json') {
                    content = formatting_1.formatting.parseCsvToJson(cleanResponse);
                }
                else {
                    content = cleanResponse;
                }
                logger.log(content);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    removeEmptyLines(input) {
        const rows = input.split('\n');
        const cleanRows = rows.filter(Boolean);
        return cleanRows.join('\n');
    }
}
module.exports = new TenantReportOffice365ActivationsUserCountsCommand();
//# sourceMappingURL=report-office365activationsusercounts.js.map