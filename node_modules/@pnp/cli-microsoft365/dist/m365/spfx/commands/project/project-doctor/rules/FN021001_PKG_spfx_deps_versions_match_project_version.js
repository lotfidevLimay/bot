"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FN021001_PKG_spfx_deps_versions_match_project_version = void 0;
const semver_1 = require("semver");
const JsonRule_1 = require("../../JsonRule");
const spfxDeps = require("../spfx-deps");
class FN021001_PKG_spfx_deps_versions_match_project_version extends JsonRule_1.JsonRule {
    constructor() {
        super();
    }
    get id() {
        return 'FN021001';
    }
    get title() {
        return '';
    }
    get description() {
        return '';
    }
    get severity() {
        return 'Required';
    }
    get file() {
        return './package.json';
    }
    get resolutionType() {
        return 'cmd';
    }
    visit(project, findings) {
        if (!project.version || !project.packageJson) {
            return;
        }
        const allSpfxDeps = spfxDeps.deps.concat(spfxDeps.devDeps);
        if (project.packageJson.dependencies) {
            const projectDeps = Object.keys(project.packageJson.dependencies);
            this.validateDependencies({
                dependencies: projectDeps,
                isDevDep: false,
                allSpfxDeps,
                project,
                findings
            });
        }
        if (project.packageJson.devDependencies) {
            const projectDevDeps = Object.keys(project.packageJson.devDependencies);
            this.validateDependencies({
                dependencies: projectDevDeps,
                isDevDep: true,
                allSpfxDeps,
                project,
                findings
            });
        }
    }
    validateDependencies({ dependencies, isDevDep, allSpfxDeps, project, findings }) {
        dependencies.forEach(dep => {
            const depVersion = isDevDep ?
                project.packageJson.devDependencies[dep] :
                project.packageJson.dependencies[dep];
            if (!allSpfxDeps.includes(dep) ||
                (0, semver_1.satisfies)(project.version, depVersion)) {
                return;
            }
            const node = this.getAstNodeFromFile(project.packageJson, `${isDevDep ? 'devDependencies' : 'dependencies'}.${dep}`);
            this.addFindingWithCustomInfo(`${dep} doesn't match project version`, `${dep}@${depVersion} doesn't match the project version ${project.version}`, [{
                    file: this.file,
                    resolution: `${isDevDep ? 'installDev' : 'install'} ${dep}@${project.version}`,
                    position: this.getPositionFromNode(node)
                }], findings);
        });
    }
}
exports.FN021001_PKG_spfx_deps_versions_match_project_version = FN021001_PKG_spfx_deps_versions_match_project_version;
//# sourceMappingURL=FN021001_PKG_spfx_deps_versions_match_project_version.js.map