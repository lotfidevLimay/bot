"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpfxDoctorCommand_instances, _SpfxDoctorCommand_initTelemetry, _SpfxDoctorCommand_initOptions, _SpfxDoctorCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const child_process = require("child_process");
const semver_1 = require("semver");
const AnonymousCommand_1 = require("../../base/AnonymousCommand");
const commands_1 = require("../commands");
/**
 * Has the particular check passed or failed
 */
var CheckStatus;
(function (CheckStatus) {
    CheckStatus[CheckStatus["Success"] = 0] = "Success";
    CheckStatus[CheckStatus["Failure"] = 1] = "Failure";
})(CheckStatus || (CheckStatus = {}));
/**
 * Where to search for the particular npm package: only in the current project,
 * in global packages or both
 */
var PackageSearchMode;
(function (PackageSearchMode) {
    PackageSearchMode[PackageSearchMode["LocalOnly"] = 0] = "LocalOnly";
    PackageSearchMode[PackageSearchMode["GlobalOnly"] = 1] = "GlobalOnly";
    PackageSearchMode[PackageSearchMode["LocalAndGlobal"] = 2] = "LocalAndGlobal";
})(PackageSearchMode || (PackageSearchMode = {}));
/**
 * Is the particular check optional or required
 */
var OptionalOrRequired;
(function (OptionalOrRequired) {
    OptionalOrRequired[OptionalOrRequired["Optional"] = 0] = "Optional";
    OptionalOrRequired[OptionalOrRequired["Required"] = 1] = "Required";
})(OptionalOrRequired || (OptionalOrRequired = {}));
/**
 * Should the method continue or fail on a rejected Promise
 */
var HandlePromise;
(function (HandlePromise) {
    HandlePromise[HandlePromise["Fail"] = 0] = "Fail";
    HandlePromise[HandlePromise["Continue"] = 1] = "Continue";
})(HandlePromise || (HandlePromise = {}));
/**
 * Versions of SharePoint that support SharePoint Framework
 */
var SharePointVersion;
(function (SharePointVersion) {
    SharePointVersion[SharePointVersion["SP2016"] = 1] = "SP2016";
    SharePointVersion[SharePointVersion["SP2019"] = 2] = "SP2019";
    SharePointVersion[SharePointVersion["SPO"] = 4] = "SPO";
    SharePointVersion[SharePointVersion["All"] = 7] = "All";
})(SharePointVersion || (SharePointVersion = {}));
class SpfxDoctorCommand extends AnonymousCommand_1.default {
    constructor() {
        super();
        _SpfxDoctorCommand_instances.add(this);
        this.versions = {
            '1.0.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^6',
                    fix: 'Install Node.js v6'
                },
                sp: SharePointVersion.All,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.1.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^6',
                    fix: 'Install Node.js v6'
                },
                sp: SharePointVersion.All,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.2.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^6',
                    fix: 'Install Node.js v6'
                },
                sp: SharePointVersion.SP2019 | SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.4.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^6',
                    fix: 'Install Node.js v6'
                },
                sp: SharePointVersion.SP2019 | SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.4.1': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^6 || ^8',
                    fix: 'Install Node.js v8'
                },
                sp: SharePointVersion.SP2019 | SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.5.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^6 || ^8',
                    fix: 'Install Node.js v8'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.5.1': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^6 || ^8',
                    fix: 'Install Node.js v8'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.6.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^6 || ^8',
                    fix: 'Install Node.js v8'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.7.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^8',
                    fix: 'Install Node.js v8'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.7.1': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^8',
                    fix: 'Install Node.js v8'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.8.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^8',
                    fix: 'Install Node.js v8'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.8.1': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^8',
                    fix: 'Install Node.js v8'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.8.2': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^8 || ^10',
                    fix: 'Install Node.js v10'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.9.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^8 || ^10',
                    fix: 'Install Node.js v10'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.9.1': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^10',
                    fix: 'Install Node.js v10'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.10.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^10',
                    fix: 'Install Node.js v10'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.11.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^10',
                    fix: 'Install Node.js v10'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.12.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^12',
                    fix: 'Install Node.js v12'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.12.1': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^12 || ^14',
                    fix: 'Install Node.js v12 or v14'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^3',
                    fix: 'npm i -g yo@3'
                }
            },
            '1.13.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^12 || ^14',
                    fix: 'Install Node.js v12 or v14'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^4',
                    fix: 'npm i -g yo@4'
                }
            },
            '1.13.1': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^12 || ^14',
                    fix: 'Install Node.js v12 or v14'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^4',
                    fix: 'npm i -g yo@4'
                }
            },
            '1.14.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^12 || ^14',
                    fix: 'Install Node.js v12 or v14'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^4',
                    fix: 'npm i -g yo@4'
                }
            },
            '1.15.0': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^12.13 || ^14.15 || ^16.13',
                    fix: 'Install Node.js v12.13, v14.15, v16.13 or higher'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^4',
                    fix: 'npm i -g yo@4'
                }
            },
            '1.15.2': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^12.13 || ^14.15 || ^16.13',
                    fix: 'Install Node.js v12.13, v14.15, v16.13 or higher'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^4',
                    fix: 'npm i -g yo@4'
                }
            },
            '1.16.0-beta.1': {
                gulpCli: {
                    range: '^1 || ^2',
                    fix: 'npm i -g gulp-cli@2'
                },
                node: {
                    range: '^16.13',
                    fix: 'Install Node.js v16.13 or higher'
                },
                sp: SharePointVersion.SPO,
                yo: {
                    range: '^4',
                    fix: 'npm i -g yo@4'
                }
            }
        };
        __classPrivateFieldGet(this, _SpfxDoctorCommand_instances, "m", _SpfxDoctorCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpfxDoctorCommand_instances, "m", _SpfxDoctorCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpfxDoctorCommand_instances, "m", _SpfxDoctorCommand_initValidators).call(this);
    }
    get allowedOutputs() {
        return ['text'];
    }
    get name() {
        return commands_1.default.DOCTOR;
    }
    get description() {
        return 'Verifies environment configuration for using the specific version of the SharePoint Framework';
    }
    commandAction(logger, args) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!args.options.output) {
                args.options.output = 'text';
            }
            logger.log(' ');
            logger.log('CLI for Microsoft 365 SharePoint Framework doctor');
            logger.log('Verifying configuration of your system for working with the SharePoint Framework');
            logger.log(' ');
            let spfxVersion = '';
            let prerequisites;
            const fixes = [];
            try {
                spfxVersion = (_a = args.options.spfxVersion) !== null && _a !== void 0 ? _a : yield this.getSharePointFrameworkVersion(logger);
                if (!spfxVersion) {
                    logger.log(this.getStatus(CheckStatus.Failure, `SharePoint Framework`));
                    throw `SharePoint Framework not found`;
                }
                prerequisites = this.versions[spfxVersion];
                if (!prerequisites) {
                    logger.log(this.getStatus(CheckStatus.Failure, `SharePoint Framework v${spfxVersion}`));
                    throw `spfx doctor doesn't support SPFx v${spfxVersion} at this moment`;
                }
                if (args.options.spfxVersion) {
                    yield this.checkSharePointFrameworkVersion(args.options.spfxVersion, fixes, logger);
                }
                else {
                    // spfx was detected and if we are here, it means that we support it
                    logger.log(this.getStatus(CheckStatus.Success, `SharePoint Framework v${spfxVersion}`));
                }
                yield this.checkSharePointCompatibility(spfxVersion, prerequisites, args, fixes, logger);
                yield this.checkNodeVersion(prerequisites, fixes, logger);
                yield this.checkYo(prerequisites, fixes, logger);
                yield this.checkGulp(fixes, logger);
                yield this.checkGulpCli(prerequisites, fixes, logger);
                yield this.checkTypeScript(fixes, logger);
                if (fixes.length > 0) {
                    logger.log(' ');
                    logger.log('Recommended fixes:');
                    logger.log(' ');
                    fixes.forEach(f => logger.log(`- ${f}`));
                    logger.log(' ');
                }
            }
            catch (err) {
                logger.log(' ');
                if (fixes.length > 0) {
                    logger.log('Recommended fixes:');
                    logger.log(' ');
                    fixes.forEach(f => logger.log(`- ${f}`));
                    logger.log(' ');
                }
                this.handleRejectedPromise(err);
            }
        });
    }
    checkSharePointCompatibility(spfxVersion, prerequisites, args, fixes, logger) {
        return new Promise((resolve, reject) => {
            if (args.options.env) {
                const sp = this.spVersionStringToEnum(args.options.env);
                if ((prerequisites.sp & sp) === sp) {
                    logger.log(this.getStatus(CheckStatus.Success, `Supported in ${SharePointVersion[sp]}`));
                    resolve();
                }
                else {
                    logger.log(this.getStatus(CheckStatus.Failure, `Not supported in ${SharePointVersion[sp]}`));
                    fixes.push(`Use SharePoint Framework v${(sp === SharePointVersion.SP2016 ? '1.1' : '1.4.1')}`);
                    reject(`SharePoint Framework v${spfxVersion} is not supported in ${SharePointVersion[sp]}`);
                }
            }
            else {
                resolve();
            }
        });
    }
    checkNodeVersion(prerequisites, fixes, logger) {
        return Promise
            .resolve(this.getNodeVersion())
            .then((nodeVersion) => {
            this.checkStatus('Node', nodeVersion, prerequisites.node, OptionalOrRequired.Required, fixes, logger);
        });
    }
    checkSharePointFrameworkVersion(spfxVersionRequested, fixes, logger) {
        return this
            .getPackageVersion('@microsoft/generator-sharepoint', PackageSearchMode.GlobalOnly, HandlePromise.Continue, logger)
            .then((spfxVersionDetected) => {
            const versionCheck = {
                range: spfxVersionRequested,
                fix: `npm i -g @microsoft/generator-sharepoint@${spfxVersionRequested}`
            };
            if (spfxVersionDetected) {
                this.checkStatus(`SharePoint Framework`, spfxVersionDetected, versionCheck, OptionalOrRequired.Required, fixes, logger);
            }
            else {
                logger.log(this.getStatus(CheckStatus.Failure, `SharePoint Framework v${spfxVersionRequested} not found`));
                fixes.push(versionCheck.fix);
            }
        });
    }
    checkYo(prerequisites, fixes, logger) {
        return this
            .getPackageVersion('yo', PackageSearchMode.GlobalOnly, HandlePromise.Continue, logger)
            .then((yoVersion) => {
            if (yoVersion) {
                this.checkStatus('yo', yoVersion, prerequisites.yo, OptionalOrRequired.Required, fixes, logger);
            }
            else {
                logger.log(this.getStatus(CheckStatus.Failure, `yo not found`));
                fixes.push(prerequisites.yo.fix);
            }
        });
    }
    checkGulpCli(prerequisites, fixes, logger) {
        return this
            .getPackageVersion('gulp-cli', PackageSearchMode.GlobalOnly, HandlePromise.Continue, logger)
            .then((gulpCliVersion) => {
            if (gulpCliVersion) {
                this.checkStatus('gulp-cli', gulpCliVersion, prerequisites.gulpCli, OptionalOrRequired.Required, fixes, logger);
            }
            else {
                logger.log(this.getStatus(CheckStatus.Failure, `gulp-cli not found`));
                fixes.push(prerequisites.gulpCli.fix);
            }
        });
    }
    checkGulp(fixes, logger) {
        return this
            .getPackageVersion('gulp', PackageSearchMode.GlobalOnly, HandlePromise.Continue, logger)
            .then((gulpVersion) => {
            if (gulpVersion) {
                logger.log(this.getStatus(CheckStatus.Failure, `gulp should be removed`));
                fixes.push('npm un -g gulp');
            }
        });
    }
    checkTypeScript(fixes, logger) {
        return this
            .getPackageVersion('typescript', PackageSearchMode.LocalOnly, HandlePromise.Continue, logger)
            .then((typeScriptVersion) => {
            if (typeScriptVersion) {
                logger.log(this.getStatus(CheckStatus.Failure, `typescript v${typeScriptVersion} installed in the project`));
                fixes.push('npm un typescript');
            }
            else {
                logger.log(this.getStatus(CheckStatus.Success, `bundled typescript used`));
            }
        });
    }
    spVersionStringToEnum(sp) {
        return SharePointVersion[sp.toUpperCase()];
    }
    getSharePointFrameworkVersion(logger) {
        return new Promise((resolve, reject) => {
            if (this.debug) {
                logger.logToStderr('Detecting SharePoint Framework version based on @microsoft/sp-core-library local...');
            }
            this
                .getPackageVersion('@microsoft/sp-core-library', PackageSearchMode.LocalOnly, HandlePromise.Fail, logger)
                .then((version) => {
                if (this.debug) {
                    logger.logToStderr(`Found @microsoft/sp-core-library@${version}`);
                }
                return Promise.resolve(version);
            })
                .catch(() => {
                if (this.debug) {
                    logger.logToStderr(`@microsoft/sp-core-library not found. Search for @microsoft/generator-sharepoint local or global...`);
                }
                return this.getPackageVersion('@microsoft/generator-sharepoint', PackageSearchMode.LocalAndGlobal, HandlePromise.Fail, logger);
            })
                .then((version) => {
                resolve(version);
            })
                .catch((error) => {
                if (this.debug) {
                    logger.logToStderr('@microsoft/generator-sharepoint not found');
                }
                if (error && error.indexOf('ENOENT') > -1) {
                    reject('npm not found');
                }
                else {
                    resolve('');
                }
            });
        });
    }
    getPackageVersion(packageName, searchMode, handlePromise, logger) {
        return new Promise((resolve, reject) => {
            const args = ['ls', packageName, '--depth=0', '--json'];
            if (searchMode === PackageSearchMode.GlobalOnly) {
                args.push('-g');
            }
            this
                .getPackageVersionFromNpm(args, logger)
                .then((version) => {
                return Promise.resolve(version);
            })
                .catch(() => {
                if (searchMode === PackageSearchMode.LocalAndGlobal) {
                    args.push('-g');
                    return this.getPackageVersionFromNpm(args, logger);
                }
                else {
                    return Promise.resolve('');
                }
            })
                .then((version) => {
                if (version) {
                    resolve(version);
                }
                else {
                    if (handlePromise === HandlePromise.Continue) {
                        resolve('');
                    }
                    else {
                        reject();
                    }
                }
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    getPackageVersionFromNpm(args, logger) {
        return new Promise((resolve, reject) => {
            const packageName = args[1];
            if (this.debug) {
                logger.logToStderr(`Executing npm: ${args.join(' ')}...`);
            }
            child_process.exec(`npm ${args.join(' ')}`, (err, stdout) => {
                if (err) {
                    reject(err.message);
                }
                const responseString = stdout;
                try {
                    const packageInfo = JSON.parse(responseString);
                    if (packageInfo.dependencies &&
                        packageInfo.dependencies[packageName]) {
                        resolve(packageInfo.dependencies[packageName].version);
                    }
                    else {
                        reject('Package not found');
                    }
                }
                catch (ex) {
                    return reject(ex);
                }
            });
        });
    }
    getNodeVersion() {
        return process.version.substr(1);
    }
    checkStatus(what, versionFound, versionCheck, optionalOrRequired, fixes, logger) {
        if (versionFound) {
            if ((0, semver_1.satisfies)(versionFound, versionCheck.range)) {
                logger.log(this.getStatus(CheckStatus.Success, `${what} v${versionFound}`));
            }
            else {
                logger.log(this.getStatus(CheckStatus.Failure, `${what} v${versionFound} found, v${versionCheck.range} required`));
                fixes.push(versionCheck.fix);
            }
        }
    }
    getStatus(result, message) {
        const primarySupported = process.platform !== 'win32' ||
            process.env.CI === 'true' ||
            process.env.TERM === 'xterm-256color';
        const success = primarySupported ? '✔' : '√';
        const failure = primarySupported ? '✖' : '×';
        return `${result === CheckStatus.Success ? chalk.green(success) : chalk.red(failure)} ${message}`;
    }
}
_SpfxDoctorCommand_instances = new WeakSet(), _SpfxDoctorCommand_initTelemetry = function _SpfxDoctorCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            env: args.options.env,
            spfxVersion: args.options.spfxVersion
        });
    });
}, _SpfxDoctorCommand_initOptions = function _SpfxDoctorCommand_initOptions() {
    this.options.unshift({
        option: '-e, --env [env]',
        autocomplete: ['sp2016', 'sp2019', 'spo']
    }, {
        option: '-v, --spfxVersion [spfxVersion]',
        autocomplete: Object.keys(this.versions)
    });
}, _SpfxDoctorCommand_initValidators = function _SpfxDoctorCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.env) {
            const sp = this.spVersionStringToEnum(args.options.env);
            if (!sp) {
                return `${args.options.env} is not a valid SharePoint version. Valid versions are sp2016, sp2019 or spo`;
            }
        }
        if (args.options.spfxVersion) {
            if (!this.versions[args.options.spfxVersion]) {
                return `${args.options.spfxVersion} is not a supported SharePoint Framework version. Supported versions are ${Object.keys(this.versions).join(', ')}`;
            }
        }
        return true;
    }));
};
module.exports = new SpfxDoctorCommand();
//# sourceMappingURL=spfx-doctor.js.map