"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FileListCommand_instances, _FileListCommand_initTelemetry, _FileListCommand_initOptions, _FileListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../request");
const odata_1 = require("../../../utils/odata");
const validation_1 = require("../../../utils/validation");
const GraphCommand_1 = require("../../base/GraphCommand");
const commands_1 = require("../commands");
class FileListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _FileListCommand_instances.add(this);
        this.foldersToGetFilesFrom = [];
        __classPrivateFieldGet(this, _FileListCommand_instances, "m", _FileListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _FileListCommand_instances, "m", _FileListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _FileListCommand_instances, "m", _FileListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.LIST;
    }
    get description() {
        return 'Retrieves files from the specified folder and site';
    }
    defaultProperties() {
        return ['name', 'lastModifiedByUser'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let webUrl = args.options.webUrl;
            if (!webUrl.endsWith('/')) {
                webUrl += '/';
            }
            const folderUrl = new URL(args.options.folderUrl, webUrl);
            let driveId = '';
            try {
                const siteId = yield this.getSiteId(args.options.webUrl, logger);
                const drive = yield this.getDocumentLibrary(siteId, folderUrl, args.options.folderUrl, logger);
                driveId = drive.id;
                const folderId = yield this.getStartingFolderId(drive, folderUrl, logger);
                if (this.verbose) {
                    logger.logToStderr(`Loading folders to get files from...`);
                }
                // add the starting folder to the list of folders to get files from
                this.foldersToGetFilesFrom.push(folderId);
                yield this.loadFoldersToGetFilesFrom(folderId, driveId, args.options.recursive);
                if (this.debug) {
                    logger.logToStderr(`Folders to get files from: ${this.foldersToGetFilesFrom.join(', ')}`);
                }
                const files = yield this.loadFilesFromFolders(driveId, this.foldersToGetFilesFrom, logger);
                logger.log(files);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getSiteId(webUrl, logger) {
        if (this.verbose) {
            logger.logToStderr(`Getting site id...`);
        }
        const url = new URL(webUrl);
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${encodeURIComponent(url.host)}:${url.pathname}?$select=id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((site) => {
            if (this.verbose) {
                logger.logToStderr(`Site id: ${site.id}`);
            }
            return site.id;
        });
    }
    getDocumentLibrary(siteId, folderUrl, folderUrlFromUser, logger) {
        if (this.verbose) {
            logger.logToStderr(`Getting document library...`);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${siteId}/drives?$select=webUrl,id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((drives) => {
            const lowerCaseFolderUrl = folderUrl.href.toLowerCase();
            const drive = drives.value
                .sort((a, b) => b.webUrl.localeCompare(a.webUrl))
                .find((d) => {
                const driveUrl = d.webUrl.toLowerCase();
                // ensure that the drive url is a prefix of the folder url
                return lowerCaseFolderUrl.startsWith(driveUrl) &&
                    (driveUrl.length === lowerCaseFolderUrl.length ||
                        lowerCaseFolderUrl[driveUrl.length] === '/');
            });
            if (!drive) {
                return Promise.reject(`Document library '${folderUrlFromUser}' not found`);
            }
            if (this.verbose) {
                logger.logToStderr(`Document library: ${drive.webUrl}, ${drive.id}`);
            }
            return Promise.resolve(drive);
        });
    }
    getStartingFolderId(documentLibrary, folderUrl, logger) {
        if (this.verbose) {
            logger.logToStderr(`Getting starting folder id...`);
        }
        const documentLibraryRelativeFolderUrl = folderUrl.href.replace(new RegExp(documentLibrary.webUrl, 'i'), '');
        const requestOptions = {
            url: `${this.resource}/v1.0/drives/${documentLibrary.id}/root${documentLibraryRelativeFolderUrl.length > 0 ? `:${documentLibraryRelativeFolderUrl}` : ''}?$select=id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((folder) => {
            if (this.verbose) {
                logger.logToStderr(`Starting folder id: ${folder.id}`);
            }
            return folder.id;
        });
    }
    loadFoldersToGetFilesFrom(folderId, driveId, recursive) {
        if (!recursive) {
            return Promise.resolve();
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/drives/${driveId}/items('${folderId}')/children?$filter=folder ne null&$select=id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((subfolders) => {
            const subfolderIds = subfolders.value.map((subfolder) => subfolder.id);
            this.foldersToGetFilesFrom = this.foldersToGetFilesFrom.concat(subfolderIds);
            return Promise
                .all(subfolderIds.map((subfolderId) => this.loadFoldersToGetFilesFrom(subfolderId, driveId, recursive)))
                .then(_ => Promise.resolve());
        });
    }
    loadFilesFromFolders(driveId, folderIds, logger) {
        if (this.verbose) {
            logger.logToStderr(`Loading files from folders...`);
        }
        let files = [];
        return Promise
            .all(folderIds.map((folderId) => 
        // get items from folder. Because we can't filter out folders here
        // we need to get all items from the folder and filter them out later
        odata_1.odata.getAllItems(`${this.resource}/v1.0/drives/${driveId}/items/${folderId}/children`)))
            .then(res => {
            // flatten data from all promises
            files = files.concat(...res);
            // remove folders from the list of files
            files = files.filter((item) => item.file);
            files.forEach(file => { var _a, _b; return file.lastModifiedByUser = (_b = (_a = file.lastModifiedBy) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.displayName; });
            return files;
        });
    }
}
_FileListCommand_instances = new WeakSet(), _FileListCommand_initTelemetry = function _FileListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            recursive: !!args.options.recursive
        });
    });
}, _FileListCommand_initOptions = function _FileListCommand_initOptions() {
    this.options.unshift({ option: '-u, --webUrl <webUrl>' }, { option: '-f, --folderUrl <folderUrl>' }, { option: '--recursive' });
}, _FileListCommand_initValidators = function _FileListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new FileListCommand();
//# sourceMappingURL=file-list.js.map