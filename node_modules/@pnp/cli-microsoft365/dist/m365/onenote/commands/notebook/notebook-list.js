"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _OneNoteNotebookListCommand_instances, _OneNoteNotebookListCommand_initTelemetry, _OneNoteNotebookListCommand_initOptions, _OneNoteNotebookListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class OneNoteNotebookListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _OneNoteNotebookListCommand_instances.add(this);
        __classPrivateFieldGet(this, _OneNoteNotebookListCommand_instances, "m", _OneNoteNotebookListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _OneNoteNotebookListCommand_instances, "m", _OneNoteNotebookListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _OneNoteNotebookListCommand_instances, "m", _OneNoteNotebookListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.NOTEBOOK_LIST;
    }
    get description() {
        return 'Retrieve a list of notebooks';
    }
    getEndpointUrl(args) {
        return new Promise((resolve, reject) => {
            let endpoint = `${this.resource}/v1.0/me/onenote/notebooks`;
            if (args.options.userId) {
                endpoint = `${this.resource}/v1.0/users/${args.options.userId}/onenote/notebooks`;
                return resolve(endpoint);
            }
            else if (args.options.userName) {
                endpoint = `${this.resource}/v1.0/users/${args.options.userName}/onenote/notebooks`;
                return resolve(endpoint);
            }
            else if (args.options.groupId) {
                endpoint = `${this.resource}/v1.0/groups/${args.options.groupId}/onenote/notebooks`;
                return resolve(endpoint);
            }
            else if (args.options.groupName) {
                this
                    .getGroupId(args)
                    .then((retrievedgroupId) => {
                    endpoint = `${this.resource}/v1.0/groups/${retrievedgroupId}/onenote/notebooks`;
                    return resolve(endpoint);
                })
                    .catch((err) => {
                    reject(err);
                });
            }
            else if (args.options.webUrl) {
                this
                    .getSpoSiteId(args)
                    .then((siteId) => {
                    endpoint = `${this.resource}/v1.0/sites/${siteId}/onenote/notebooks`;
                    return resolve(endpoint);
                })
                    .catch((err) => {
                    reject(err);
                });
            }
            else {
                return resolve(endpoint);
            }
        });
    }
    defaultProperties() {
        return ['createdDateTime', 'displayName', 'id'];
    }
    getGroupId(args) {
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.groupName)
            .then(group => group.id);
    }
    getSpoSiteId(args) {
        const url = new URL(args.options.webUrl);
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${url.hostname}:${url.pathname}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((site) => site.id);
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const endpoint = yield this.getEndpointUrl(args);
                const items = yield odata_1.odata.getAllItems(endpoint);
                logger.log(items);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_OneNoteNotebookListCommand_instances = new WeakSet(), _OneNoteNotebookListCommand_initTelemetry = function _OneNoteNotebookListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            joined: args.options.joined
        });
    });
}, _OneNoteNotebookListCommand_initOptions = function _OneNoteNotebookListCommand_initOptions() {
    this.options.unshift({ option: '--userId [userId]' }, { option: '--userName [userName]' }, { option: '--groupId [groupId]' }, { option: '--groupName [groupName]' }, { option: '-u, --webUrl [webUrl]' });
}, _OneNoteNotebookListCommand_initValidators = function _OneNoteNotebookListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.userId && !validation_1.validation.isValidGuid(args.options.userId)) {
            return `${args.options.userId} is not a valid GUID`;
        }
        if (args.options.groupId && !validation_1.validation.isValidGuid(args.options.groupId)) {
            return `${args.options.groupId} is not a valid GUID`;
        }
        if (args.options.userId && args.options.userName) {
            return 'Specify either userId or userName, but not both';
        }
        if (args.options.groupId && args.options.groupName) {
            return 'Specify either groupId or groupName, but not both';
        }
        return true;
    }));
};
module.exports = new OneNoteNotebookListCommand();
//# sourceMappingURL=notebook-list.js.map