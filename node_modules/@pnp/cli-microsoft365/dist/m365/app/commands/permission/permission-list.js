"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const appGetCommand = require("../../../aad/commands/app/app-get");
const AppCommand_1 = require("../../../base/AppCommand");
const commands_1 = require("../../commands");
var GetServicePrincipal;
(function (GetServicePrincipal) {
    GetServicePrincipal[GetServicePrincipal["withPermissions"] = 0] = "withPermissions";
    GetServicePrincipal[GetServicePrincipal["withPermissionDefinitions"] = 1] = "withPermissionDefinitions";
})(GetServicePrincipal || (GetServicePrincipal = {}));
class AppPermissionListCommand extends AppCommand_1.default {
    get name() {
        return commands_1.default.PERMISSION_LIST;
    }
    get description() {
        return 'Lists API permissions for the current AAD app';
    }
    commandAction(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const servicePrincipal = yield this.getServicePrincipal({ appId: this.appId }, logger, GetServicePrincipal.withPermissions);
                let permissions;
                if (servicePrincipal) {
                    // service principal found, get permissions from the service principal
                    permissions = yield this.getServicePrincipalPermissions(servicePrincipal, logger);
                }
                else {
                    // service principal not found, get permissions from app registration
                    permissions = yield this.getAppRegPermissions(this.appId, logger);
                }
                logger.log(permissions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getServicePrincipal(servicePrincipalInfo, logger, mode) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving service principal ${(_a = servicePrincipalInfo.appId) !== null && _a !== void 0 ? _a : servicePrincipalInfo.id}`);
            }
            const lookupUrl = servicePrincipalInfo.appId ? `?$filter=appId eq '${servicePrincipalInfo.appId}'&` : `/${servicePrincipalInfo.id}?`;
            const requestOptions = {
                url: `${this.resource}/v1.0/servicePrincipals${lookupUrl}$select=appId,id,displayName`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            const response = yield request_1.default.get(requestOptions);
            if ((servicePrincipalInfo.id && !response) ||
                (servicePrincipalInfo.appId && response.value.length === 0)) {
                return undefined;
            }
            const servicePrincipal = servicePrincipalInfo.appId ?
                response.value[0] :
                response;
            if (this.verbose) {
                logger.logToStderr(`Retrieving permissions for service principal ${servicePrincipal.id}...`);
            }
            const permissionsPromises = [];
            switch (mode) {
                case GetServicePrincipal.withPermissions:
                    const appRoleAssignmentsRequestOptions = {
                        url: `${this.resource}/v1.0/servicePrincipals/${servicePrincipal.id}/appRoleAssignments`,
                        headers: {
                            accept: 'application/json;odata.metadata=none'
                        },
                        responseType: 'json'
                    };
                    const oauth2PermissionGrantsRequestOptions = {
                        url: `${this.resource}/v1.0/servicePrincipals/${servicePrincipal.id}/oauth2PermissionGrants`,
                        headers: {
                            accept: 'application/json;odata.metadata=none'
                        },
                        responseType: 'json'
                    };
                    permissionsPromises.push(...[
                        request_1.default.get(appRoleAssignmentsRequestOptions),
                        request_1.default.get(oauth2PermissionGrantsRequestOptions)
                    ]);
                    break;
                case GetServicePrincipal.withPermissionDefinitions:
                    const oauth2PermissionScopesRequestOptions = {
                        url: `${this.resource}/v1.0/servicePrincipals/${servicePrincipal.id}/oauth2PermissionScopes`,
                        headers: {
                            accept: 'application/json;odata.metadata=none'
                        },
                        responseType: 'json'
                    };
                    const appRolesRequestOptions = {
                        url: `${this.resource}/v1.0/servicePrincipals/${servicePrincipal.id}/appRoles`,
                        headers: {
                            accept: 'application/json;odata.metadata=none'
                        },
                        responseType: 'json'
                    };
                    permissionsPromises.push(...[
                        request_1.default.get(oauth2PermissionScopesRequestOptions),
                        request_1.default.get(appRolesRequestOptions)
                    ]);
                    break;
            }
            const permissions = yield Promise.all(permissionsPromises);
            switch (mode) {
                case GetServicePrincipal.withPermissions:
                    servicePrincipal.appRoleAssignments = permissions[0].value;
                    servicePrincipal.oauth2PermissionGrants = permissions[1].value;
                    break;
                case GetServicePrincipal.withPermissionDefinitions:
                    servicePrincipal.oauth2PermissionScopes = permissions[0].value;
                    servicePrincipal.appRoles = permissions[1].value;
                    break;
            }
            return servicePrincipal;
        });
    }
    getServicePrincipalPermissions(servicePrincipal, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Resolving permissions for the service principal...`);
            }
            const apiPermissions = [];
            // hash table for resolving resource IDs to names
            const resourceLookup = {};
            // list of service principals for which to load permissions
            const servicePrincipalsToResolve = [];
            const appRoleAssignments = servicePrincipal.appRoleAssignments;
            apiPermissions.push(...appRoleAssignments.map(appRoleAssignment => {
                // store resource name for resolving OAuth2 grants
                resourceLookup[appRoleAssignment.resourceId] = appRoleAssignment.resourceDisplayName;
                // add to the list of service principals to load to get the app role
                // display name
                if (!servicePrincipalsToResolve.find(r => r.id === appRoleAssignment.resourceId)) {
                    servicePrincipalsToResolve.push({ id: appRoleAssignment.resourceId });
                }
                return {
                    resource: appRoleAssignment.resourceDisplayName,
                    // we store the app role ID temporarily and will later resolve to display name
                    permission: appRoleAssignment.appRoleId,
                    type: 'Application'
                };
            }));
            const oauth2Grants = servicePrincipal.oauth2PermissionGrants;
            oauth2Grants.forEach(oauth2Grant => {
                var _a;
                // see if we can resolve the resource name from the resources
                // retrieved from app role assignments
                const resource = (_a = resourceLookup[oauth2Grant.resourceId]) !== null && _a !== void 0 ? _a : oauth2Grant.resourceId;
                if (resource === oauth2Grant.resourceId &&
                    !servicePrincipalsToResolve.find(r => r.id === oauth2Grant.resourceId)) {
                    // resource name not found in the resources
                    // add it to the list of resources to resolve
                    servicePrincipalsToResolve.push({ id: oauth2Grant.resourceId });
                }
                const scopes = oauth2Grant.scope.split(' ');
                scopes.forEach(scope => {
                    apiPermissions.push({
                        resource,
                        permission: scope,
                        type: 'Delegated'
                    });
                });
            });
            if (servicePrincipalsToResolve.length > 0) {
                const servicePrincipals = yield Promise
                    .all(servicePrincipalsToResolve
                    .map(servicePrincipalInfo => this.getServicePrincipal(servicePrincipalInfo, logger, GetServicePrincipal.withPermissionDefinitions)));
                servicePrincipals.forEach(servicePrincipal => {
                    apiPermissions.forEach(apiPermission => {
                        var _a, _b;
                        if (apiPermission.resource === servicePrincipal.id) {
                            apiPermission.resource = servicePrincipal.displayName;
                        }
                        if (apiPermission.resource === servicePrincipal.displayName &&
                            apiPermission.type === 'Application') {
                            apiPermission.permission = (_b = (_a = servicePrincipal.appRoles
                                .find(appRole => appRole.id === apiPermission.permission)) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : apiPermission.permission;
                        }
                    });
                });
            }
            return apiPermissions;
        });
    }
    getAppRegistration(appId, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving Azure AD application registration ${appId}`);
            }
            const options = {
                appId: appId,
                output: 'json',
                debug: this.debug,
                verbose: this.verbose
            };
            const output = yield Cli_1.Cli.executeCommandWithOutput(appGetCommand, { options: Object.assign(Object.assign({}, options), { _: [] }) });
            if (this.debug) {
                logger.logToStderr(output.stderr);
            }
            return JSON.parse(output.stdout);
        });
    }
    getAppRegPermissions(appId, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            const application = yield this.getAppRegistration(appId, logger);
            if (application.requiredResourceAccess.length === 0) {
                return [];
            }
            const servicePrincipalsToResolve = application.requiredResourceAccess
                .map(resourceAccess => {
                return {
                    appId: resourceAccess.resourceAppId
                };
            });
            const servicePrincipals = yield Promise
                .all(servicePrincipalsToResolve.map(servicePrincipalInfo => this.getServicePrincipal(servicePrincipalInfo, logger, GetServicePrincipal.withPermissionDefinitions)));
            const apiPermissions = [];
            application.requiredResourceAccess.forEach(requiredResourceAccess => {
                var _a;
                const servicePrincipal = servicePrincipals
                    .find(servicePrincipal => (servicePrincipal === null || servicePrincipal === void 0 ? void 0 : servicePrincipal.appId) === requiredResourceAccess.resourceAppId);
                const resourceName = (_a = servicePrincipal === null || servicePrincipal === void 0 ? void 0 : servicePrincipal.displayName) !== null && _a !== void 0 ? _a : requiredResourceAccess.resourceAppId;
                requiredResourceAccess.resourceAccess.forEach(permission => {
                    apiPermissions.push({
                        resource: resourceName,
                        permission: this.getPermissionName(permission.id, permission.type, servicePrincipal),
                        type: permission.type === 'Role' ? 'Application' : 'Delegated'
                    });
                });
            });
            return apiPermissions;
        });
    }
    getPermissionName(permissionId, permissionType, servicePrincipal) {
        var _a, _b, _c, _d;
        if (!servicePrincipal) {
            return permissionId;
        }
        switch (permissionType) {
            case 'Role':
                return (_b = (_a = servicePrincipal.appRoles
                    .find(appRole => appRole.id === permissionId)) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : permissionId;
            case 'Scope':
                return (_d = (_c = servicePrincipal.oauth2PermissionScopes
                    .find(permissionScope => permissionScope.id === permissionId)) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : permissionId;
        }
        /* c8 ignore next 4 */
        // permissionType is either 'Scope' or 'Role' but we need a safe default
        // to avoid building errors. This code will never be reached.
        return permissionId;
    }
}
module.exports = new AppPermissionListCommand();
//# sourceMappingURL=permission-list.js.map