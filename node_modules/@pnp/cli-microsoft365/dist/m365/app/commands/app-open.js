"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AppOpenCommand_instances, _AppOpenCommand_initTelemetry, _AppOpenCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../cli/Cli");
const settingsNames_1 = require("../../../settingsNames");
const AppCommand_1 = require("../../base/AppCommand");
const commands_1 = require("../commands");
class AppOpenCommand extends AppCommand_1.default {
    constructor() {
        super();
        _AppOpenCommand_instances.add(this);
        __classPrivateFieldGet(this, _AppOpenCommand_instances, "m", _AppOpenCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _AppOpenCommand_instances, "m", _AppOpenCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.OPEN;
    }
    get description() {
        return 'Opens Azure AD app in the Azure AD portal';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.logOrOpenUrl(args, logger);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    logOrOpenUrl(args, logger) {
        return new Promise((resolve, reject) => {
            const previewPrefix = args.options.preview === true ? "preview." : "";
            const url = `https://${previewPrefix}portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/${this.appId}/isMSAApp/`;
            if (Cli_1.Cli.getInstance().getSettingWithDefaultValue(settingsNames_1.settingsNames.autoOpenLinksInBrowser, false) === false) {
                logger.log(`Use a web browser to open the page ${url}`);
                return resolve();
            }
            logger.log(`Opening the following page in your browser: ${url}`);
            // 'open' is required here so we can lazy load the dependency.
            // _open is never set before hitting this line, but this check
            // is implemented so that we can stub it when testing.
            /* c8 ignore next 3 */
            if (!this._open) {
                this._open = require('open');
            }
            this._open(url).then(() => {
                resolve();
            }, (error) => {
                reject(error);
            });
        });
    }
}
_AppOpenCommand_instances = new WeakSet(), _AppOpenCommand_initTelemetry = function _AppOpenCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            preview: typeof args.options.preview !== 'undefined'
        });
    });
}, _AppOpenCommand_initOptions = function _AppOpenCommand_initOptions() {
    this.options.unshift({ option: '--appId [appId]' }, { option: '--preview' });
};
module.exports = new AppOpenCommand();
//# sourceMappingURL=app-open.js.map