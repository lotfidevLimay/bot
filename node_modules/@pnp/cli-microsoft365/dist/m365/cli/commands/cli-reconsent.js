"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../cli/Cli");
const config_1 = require("../../../config");
const settingsNames_1 = require("../../../settingsNames");
const AnonymousCommand_1 = require("../../base/AnonymousCommand");
const commands_1 = require("../commands");
class CliReconsentCommand extends AnonymousCommand_1.default {
    get name() {
        return commands_1.default.RECONSENT;
    }
    get description() {
        return 'Returns Azure AD URL to open in the browser to re-consent CLI for Microsoft 365 permissions';
    }
    commandAction(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `https://login.microsoftonline.com/${config_1.default.tenant}/oauth2/authorize?client_id=${config_1.default.cliAadAppId}&response_type=code&prompt=admin_consent`;
            if (Cli_1.Cli.getInstance().getSettingWithDefaultValue(settingsNames_1.settingsNames.autoOpenLinksInBrowser, false) === false) {
                logger.log(`To re-consent the PnP Microsoft 365 Management Shell Azure AD application navigate in your web browser to ${url}`);
                return;
            }
            logger.log(`Opening the following page in your browser: ${url}`);
            // _open is never set before hitting this line, but this check
            // is implemented so that we can support lazy loading
            // but also stub it for testing
            /* c8 ignore next 3 */
            if (!this._open) {
                this._open = require('open');
            }
            try {
                yield this._open(url);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
module.exports = new CliReconsentCommand();
//# sourceMappingURL=cli-reconsent.js.map