"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CliCompletionPwshSetupCommand_instances, _CliCompletionPwshSetupCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const autocomplete_1 = require("../../../../autocomplete");
const Command_1 = require("../../../../Command");
const AnonymousCommand_1 = require("../../../base/AnonymousCommand");
const commands_1 = require("../../commands");
class CliCompletionPwshSetupCommand extends AnonymousCommand_1.default {
    constructor() {
        super();
        _CliCompletionPwshSetupCommand_instances.add(this);
        __classPrivateFieldGet(this, _CliCompletionPwshSetupCommand_instances, "m", _CliCompletionPwshSetupCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.COMPLETION_PWSH_SETUP;
    }
    get description() {
        return 'Sets up command completion for PowerShell';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.debug) {
                logger.logToStderr('Generating command completion...');
            }
            autocomplete_1.autocomplete.generateShCompletion();
            if (this.debug) {
                logger.logToStderr(`Ensuring that the specified profile path ${args.options.profile} exists...`);
            }
            if (fs.existsSync(args.options.profile)) {
                if (this.debug) {
                    logger.logToStderr('Profile file already exists');
                }
            }
            else {
                // check if the path exists
                const dirname = path.dirname(args.options.profile);
                if (fs.existsSync(dirname)) {
                    if (this.debug) {
                        logger.logToStderr(`Profile path ${dirname} already exists`);
                    }
                }
                else {
                    try {
                        if (this.debug) {
                            logger.logToStderr(`Profile path ${dirname} doesn't exist. Creating...`);
                        }
                        fs.mkdirSync(dirname, { recursive: true });
                    }
                    catch (e) {
                        throw new Command_1.CommandError(e);
                    }
                }
                if (this.debug) {
                    logger.logToStderr(`Creating profile file ${args.options.profile}...`);
                }
                try {
                    fs.writeFileSync(args.options.profile, '', 'utf8');
                }
                catch (e) {
                    throw new Command_1.CommandError(e);
                }
            }
            if (this.verbose) {
                logger.logToStderr(`Adding CLI for Microsoft 365 command completion to PowerShell profile...`);
            }
            const completionScriptPath = path.resolve(__dirname, '..', '..', '..', '..', '..', 'scripts', 'Register-CLIM365Completion.ps1');
            try {
                fs.appendFileSync(args.options.profile, os.EOL + completionScriptPath, 'utf8');
                return;
            }
            catch (e) {
                throw new Command_1.CommandError(e);
            }
        });
    }
}
_CliCompletionPwshSetupCommand_instances = new WeakSet(), _CliCompletionPwshSetupCommand_initOptions = function _CliCompletionPwshSetupCommand_initOptions() {
    this.options.unshift({
        option: '-p, --profile <profile>'
    });
};
module.exports = new CliCompletionPwshSetupCommand();
//# sourceMappingURL=completion-pwsh-setup.js.map