"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CliConsentCommand_instances, _CliConsentCommand_initTelemetry, _CliConsentCommand_initOptions, _CliConsentCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../config");
const AnonymousCommand_1 = require("../../base/AnonymousCommand");
const commands_1 = require("../commands");
class CliConsentCommand extends AnonymousCommand_1.default {
    constructor() {
        super();
        _CliConsentCommand_instances.add(this);
        __classPrivateFieldGet(this, _CliConsentCommand_instances, "m", _CliConsentCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _CliConsentCommand_instances, "m", _CliConsentCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _CliConsentCommand_instances, "m", _CliConsentCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.CONSENT;
    }
    get description() {
        return 'Consent additional permissions for the Azure AD application used by the CLI for Microsoft 365';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let scope = '';
            switch (args.options.service) {
                case 'yammer':
                    scope = 'https://api.yammer.com/user_impersonation';
                    break;
            }
            logger.log(`To consent permissions for executing ${args.options.service} commands, navigate in your web browser to https://login.microsoftonline.com/${config_1.default.tenant}/oauth2/v2.0/authorize?client_id=${config_1.default.cliAadAppId}&response_type=code&scope=${encodeURIComponent(scope)}`);
        });
    }
    action(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.initAction(args, logger);
            yield this.commandAction(logger, args);
        });
    }
}
_CliConsentCommand_instances = new WeakSet(), _CliConsentCommand_initTelemetry = function _CliConsentCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            service: args.options.service
        });
    });
}, _CliConsentCommand_initOptions = function _CliConsentCommand_initOptions() {
    this.options.unshift({
        option: '-s, --service <service>',
        autocomplete: ['yammer']
    });
}, _CliConsentCommand_initValidators = function _CliConsentCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.service !== 'yammer') {
            return `${args.options.service} is not a valid value for the service option. Allowed values: yammer`;
        }
        return true;
    }));
};
module.exports = new CliConsentCommand();
//# sourceMappingURL=cli-consent.js.map