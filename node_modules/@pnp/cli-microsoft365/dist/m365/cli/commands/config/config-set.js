"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CliConfigSetCommand_instances, _CliConfigSetCommand_initTelemetry, _CliConfigSetCommand_initOptions, _CliConfigSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const settingsNames_1 = require("../../../../settingsNames");
const AnonymousCommand_1 = require("../../../base/AnonymousCommand");
const commands_1 = require("../../commands");
class CliConfigSetCommand extends AnonymousCommand_1.default {
    constructor() {
        super();
        _CliConfigSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _CliConfigSetCommand_instances, "m", _CliConfigSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _CliConfigSetCommand_instances, "m", _CliConfigSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _CliConfigSetCommand_instances, "m", _CliConfigSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.CONFIG_SET;
    }
    get description() {
        return 'Manage global configuration settings about the CLI for Microsoft 365';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let value = undefined;
            switch (args.options.key) {
                case settingsNames_1.settingsNames.autoOpenBrowserOnLogin:
                case settingsNames_1.settingsNames.autoOpenLinksInBrowser:
                case settingsNames_1.settingsNames.copyDeviceCodeToClipboard:
                case settingsNames_1.settingsNames.csvHeader:
                case settingsNames_1.settingsNames.csvQuoted:
                case settingsNames_1.settingsNames.csvQuotedEmpty:
                case settingsNames_1.settingsNames.printErrorsAsPlainText:
                case settingsNames_1.settingsNames.showHelpOnFailure:
                    value = args.options.value === 'true';
                    break;
                default:
                    value = args.options.value;
                    break;
            }
            Cli_1.Cli.getInstance().config.set(args.options.key, value);
        });
    }
}
_CliConfigSetCommand_instances = new WeakSet(), _CliConfigSetCommand_initTelemetry = function _CliConfigSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        this.telemetryProperties[args.options.key] = args.options.value;
    });
}, _CliConfigSetCommand_initOptions = function _CliConfigSetCommand_initOptions() {
    this.options.unshift({
        option: '-k, --key <key>',
        autocomplete: CliConfigSetCommand.optionNames
    }, {
        option: '-v, --value <value>'
    });
}, _CliConfigSetCommand_initValidators = function _CliConfigSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (CliConfigSetCommand.optionNames.indexOf(args.options.key) < 0) {
            return `${args.options.key} is not a valid setting. Allowed values: ${CliConfigSetCommand.optionNames.join(', ')}`;
        }
        const allowedOutputs = ['text', 'json', 'csv'];
        if (args.options.key === settingsNames_1.settingsNames.output &&
            allowedOutputs.indexOf(args.options.value) === -1) {
            return `${args.options.value} is not a valid value for the option ${args.options.key}. Allowed values: ${allowedOutputs.join(', ')}`;
        }
        const allowedErrorOutputs = ['stdout', 'stderr'];
        if (args.options.key === settingsNames_1.settingsNames.errorOutput &&
            allowedErrorOutputs.indexOf(args.options.value) === -1) {
            return `${args.options.value} is not a valid value for the option ${args.options.key}. Allowed values: ${allowedErrorOutputs.join(', ')}`;
        }
        return true;
    }));
};
CliConfigSetCommand.optionNames = Object.getOwnPropertyNames(settingsNames_1.settingsNames);
module.exports = new CliConfigSetCommand();
//# sourceMappingURL=config-set.js.map