"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CliIssueCommand_instances, _CliIssueCommand_initTelemetry, _CliIssueCommand_initOptions, _CliIssueCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const open = require("open");
const AnonymousCommand_1 = require("../../base/AnonymousCommand");
const commands_1 = require("../commands");
class CliIssueCommand extends AnonymousCommand_1.default {
    constructor(open) {
        super();
        this.open = open;
        _CliIssueCommand_instances.add(this);
        __classPrivateFieldGet(this, _CliIssueCommand_instances, "m", _CliIssueCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _CliIssueCommand_instances, "m", _CliIssueCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _CliIssueCommand_instances, "m", _CliIssueCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.ISSUE;
    }
    get description() {
        return 'Returns, or opens a URL that takes the user to the right place in the CLI GitHub repo to create a new issue reporting bug, feedback, ideas, etc.';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let issueLink = '';
            switch (encodeURIComponent(args.options.type)) {
                case 'bug':
                    issueLink = 'https://aka.ms/cli-m365/bug';
                    break;
                case 'command':
                    issueLink = 'https://aka.ms/cli-m365/new-command';
                    break;
                case 'sample':
                    issueLink = 'https://aka.ms/cli-m365/new-sample-script';
                    break;
            }
            yield this.openBrowser(issueLink);
            logger.log(issueLink);
        });
    }
    openBrowser(issueLink) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.open(issueLink, { wait: false });
        });
    }
}
_CliIssueCommand_instances = new WeakSet(), _CliIssueCommand_initTelemetry = function _CliIssueCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            type: args.options.type
        });
    });
}, _CliIssueCommand_initOptions = function _CliIssueCommand_initOptions() {
    this.options.unshift({
        option: '-t, --type <type>',
        autocomplete: CliIssueCommand.issueType
    });
}, _CliIssueCommand_initValidators = function _CliIssueCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (CliIssueCommand.issueType.indexOf(args.options.type) < 0) {
            return `${args.options.type} is not a valid Issue type. Allowed values are ${CliIssueCommand.issueType.join(', ')}`;
        }
        return true;
    }));
};
CliIssueCommand.issueType = [
    'bug',
    'command',
    'sample'
];
module.exports = new CliIssueCommand(open);
//# sourceMappingURL=cli-issue.js.map