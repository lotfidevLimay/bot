"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LoginCommand_instances, _LoginCommand_initTelemetry, _LoginCommand_initOptions, _LoginCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const Auth_1 = require("../../Auth");
const Command_1 = require("../../Command");
const config_1 = require("../../config");
const commands_1 = require("./commands");
class LoginCommand extends Command_1.default {
    constructor() {
        super();
        _LoginCommand_instances.add(this);
        __classPrivateFieldGet(this, _LoginCommand_instances, "m", _LoginCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _LoginCommand_instances, "m", _LoginCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _LoginCommand_instances, "m", _LoginCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.LOGIN;
    }
    get description() {
        return 'Log in to Microsoft 365';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            // disconnect before re-connecting
            if (this.debug) {
                logger.logToStderr(`Logging out from Microsoft 365...`);
            }
            const logout = () => Auth_1.default.service.logout();
            const login = () => __awaiter(this, void 0, void 0, function* () {
                if (this.verbose) {
                    logger.logToStderr(`Signing in to Microsoft 365...`);
                }
                Auth_1.default.service.appId = args.options.appId || config_1.default.cliAadAppId;
                Auth_1.default.service.tenant = args.options.tenant || config_1.default.tenant;
                switch (args.options.authType) {
                    case 'password':
                        Auth_1.default.service.authType = Auth_1.AuthType.Password;
                        Auth_1.default.service.userName = args.options.userName;
                        Auth_1.default.service.password = args.options.password;
                        break;
                    case 'certificate':
                        Auth_1.default.service.authType = Auth_1.AuthType.Certificate;
                        Auth_1.default.service.certificate = args.options.certificateBase64Encoded ? args.options.certificateBase64Encoded : fs.readFileSync(args.options.certificateFile, 'base64');
                        Auth_1.default.service.thumbprint = args.options.thumbprint;
                        Auth_1.default.service.password = args.options.password;
                        break;
                    case 'identity':
                        Auth_1.default.service.authType = Auth_1.AuthType.Identity;
                        Auth_1.default.service.userName = args.options.userName;
                        break;
                    case 'browser':
                        Auth_1.default.service.authType = Auth_1.AuthType.Browser;
                        break;
                    case 'secret':
                        Auth_1.default.service.authType = Auth_1.AuthType.Secret;
                        Auth_1.default.service.secret = args.options.secret;
                        break;
                }
                try {
                    yield Auth_1.default.ensureAccessToken(Auth_1.default.defaultResource, logger, this.debug);
                    Auth_1.default.service.connected = true;
                }
                catch (error) {
                    if (this.debug) {
                        logger.logToStderr('Error:');
                        logger.logToStderr(error);
                        logger.logToStderr('');
                    }
                    throw new Command_1.CommandError(error.message);
                }
            });
            try {
                yield Auth_1.default.clearConnectionInfo();
            }
            catch (error) {
                if (this.debug) {
                    logger.logToStderr(new Command_1.CommandError(error));
                }
            }
            finally {
                logout();
                yield login();
            }
        });
    }
    action(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield Auth_1.default.restoreAuth();
            }
            catch (error) {
                throw new Command_1.CommandError(error);
            }
            this.initAction(args, logger);
            yield this.commandAction(logger, args);
        });
    }
}
_LoginCommand_instances = new WeakSet(), _LoginCommand_initTelemetry = function _LoginCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            authType: args.options.authType || 'deviceCode'
        });
    });
}, _LoginCommand_initOptions = function _LoginCommand_initOptions() {
    this.options.unshift({
        option: '-t, --authType [authType]',
        autocomplete: ['certificate', 'deviceCode', 'password', 'identity', 'browser']
    }, {
        option: '-u, --userName [userName]'
    }, {
        option: '-p, --password [password]'
    }, {
        option: '-c, --certificateFile [certificateFile]'
    }, {
        option: '--certificateBase64Encoded [certificateBase64Encoded]'
    }, {
        option: '--thumbprint [thumbprint]'
    }, {
        option: '--appId [appId]'
    }, {
        option: '--tenant [tenant]'
    }, {
        option: '--secret [secret]'
    });
}, _LoginCommand_initValidators = function _LoginCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.authType === 'password') {
            if (!args.options.userName) {
                return 'Required option userName missing';
            }
            if (!args.options.password) {
                return 'Required option password missing';
            }
        }
        if (args.options.authType === 'certificate') {
            if (args.options.certificateFile && args.options.certificateBase64Encoded) {
                return 'Specify either certificateFile or certificateBase64Encoded, but not both.';
            }
            if (!args.options.certificateFile && !args.options.certificateBase64Encoded) {
                return 'Specify either certificateFile or certificateBase64Encoded';
            }
            if (args.options.certificateFile) {
                if (!fs.existsSync(args.options.certificateFile)) {
                    return `File '${args.options.certificateFile}' does not exist`;
                }
            }
        }
        if (args.options.authType === 'secret') {
            if (!args.options.secret) {
                return 'Required option secret missing';
            }
        }
        return true;
    }));
};
module.exports = new LoginCommand();
//# sourceMappingURL=login.js.map