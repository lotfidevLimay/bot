"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../Auth");
const Command_1 = require("../../Command");
const accessToken_1 = require("../../utils/accessToken");
const commands_1 = require("./commands");
class StatusCommand extends Command_1.default {
    get name() {
        return commands_1.default.STATUS;
    }
    get description() {
        return 'Shows Microsoft 365 login status';
    }
    commandAction(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (Auth_1.default.service.connected) {
                try {
                    yield Auth_1.default.ensureAccessToken(Auth_1.default.defaultResource, logger, this.debug);
                }
                catch (err) {
                    if (this.debug) {
                        logger.logToStderr(err);
                    }
                    Auth_1.default.service.logout();
                    throw new Command_1.CommandError(`Your login has expired. Sign in again to continue. ${err.message}`);
                }
                if (this.debug) {
                    logger.logToStderr({
                        connectedAs: accessToken_1.accessToken.getUserNameFromAccessToken(Auth_1.default.service.accessTokens[Auth_1.default.defaultResource].accessToken),
                        authType: Auth_1.AuthType[Auth_1.default.service.authType],
                        appId: Auth_1.default.service.appId,
                        appTenant: Auth_1.default.service.tenant,
                        accessTokens: JSON.stringify(Auth_1.default.service.accessTokens, null, 2)
                    });
                }
                else {
                    logger.log({
                        connectedAs: accessToken_1.accessToken.getUserNameFromAccessToken(Auth_1.default.service.accessTokens[Auth_1.default.defaultResource].accessToken),
                        authType: Auth_1.AuthType[Auth_1.default.service.authType],
                        appId: Auth_1.default.service.appId,
                        appTenant: Auth_1.default.service.tenant
                    });
                }
            }
            else {
                if (this.verbose) {
                    logger.logToStderr('Logged out from Microsoft 365');
                }
                else {
                    logger.log('Logged out');
                }
            }
        });
    }
    action(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield Auth_1.default.restoreAuth();
            }
            catch (error) {
                throw new Command_1.CommandError(error);
            }
            this.initAction(args, logger);
            yield this.commandAction(logger);
        });
    }
}
module.exports = new StatusCommand();
//# sourceMappingURL=status.js.map