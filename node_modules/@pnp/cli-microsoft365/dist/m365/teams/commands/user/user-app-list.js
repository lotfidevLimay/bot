"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsUserAppListCommand_instances, _TeamsUserAppListCommand_initTelemetry, _TeamsUserAppListCommand_initOptions, _TeamsUserAppListCommand_initValidators, _TeamsUserAppListCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsUserAppListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsUserAppListCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsUserAppListCommand_instances, "m", _TeamsUserAppListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsUserAppListCommand_instances, "m", _TeamsUserAppListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsUserAppListCommand_instances, "m", _TeamsUserAppListCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsUserAppListCommand_instances, "m", _TeamsUserAppListCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.USER_APP_LIST;
    }
    get description() {
        return 'List the apps installed in the personal scope of the specified user';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const userId = (yield this.getUserId(args)).value;
                const endpoint = `${this.resource}/v1.0/users/${encodeURIComponent(userId)}/teamwork/installedApps?$expand=teamsAppDefinition`;
                const items = yield odata_1.odata.getAllItems(endpoint);
                items.forEach(i => {
                    const userAppId = Buffer.from(i.id, 'base64').toString('ascii');
                    const appId = userAppId.substr(userAppId.indexOf("##") + 2, userAppId.length - userId.length - 2);
                    i.appId = appId;
                });
                if (args.options.output === 'json') {
                    logger.log(items);
                }
                else {
                    logger.log(items.map(i => {
                        return {
                            id: i.id,
                            appId: i.appId,
                            displayName: i.teamsAppDefinition.displayName,
                            version: i.teamsAppDefinition.version
                        };
                    }));
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getUserId(args) {
        if (args.options.userId) {
            return Promise.resolve({ value: args.options.userId });
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/users/${encodeURIComponent(args.options.userName)}/id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
}
_TeamsUserAppListCommand_instances = new WeakSet(), _TeamsUserAppListCommand_initTelemetry = function _TeamsUserAppListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            userId: typeof args.options.userId !== 'undefined',
            userName: typeof args.options.userName !== 'undefined'
        });
    });
}, _TeamsUserAppListCommand_initOptions = function _TeamsUserAppListCommand_initOptions() {
    this.options.unshift({
        option: '--userId [userId]'
    }, {
        option: '--userName [userName]'
    });
}, _TeamsUserAppListCommand_initValidators = function _TeamsUserAppListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.userId && !validation_1.validation.isValidGuid(args.options.userId)) {
            return `${args.options.userId} is not a valid GUID`;
        }
        if (args.options.userName && !validation_1.validation.isValidUserPrincipalName(args.options.userName)) {
            return `${args.options.userName} is not a valid userName`;
        }
        return true;
    }));
}, _TeamsUserAppListCommand_initOptionSets = function _TeamsUserAppListCommand_initOptionSets() {
    this.optionSets.push(['userId', 'userName']);
};
module.exports = new TeamsUserAppListCommand();
//# sourceMappingURL=user-app-list.js.map