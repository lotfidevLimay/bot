"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsUserListCommand_instances, _TeamsUserListCommand_initTelemetry, _TeamsUserListCommand_initOptions, _TeamsUserListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsUserListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsUserListCommand_instances.add(this);
        this.items = [];
        __classPrivateFieldGet(this, _TeamsUserListCommand_instances, "m", _TeamsUserListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsUserListCommand_instances, "m", _TeamsUserListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsUserListCommand_instances, "m", _TeamsUserListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.USER_LIST;
    }
    get description() {
        return "Lists users for the specified Microsoft Teams team";
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.getOwners(logger, args.options.teamId);
                const items = args.options.role === "Owner" ? [] : yield this.getMembersAndGuests(logger, args.options.teamId);
                this.items = this.items.concat(items);
                // Filter out duplicate added values for owners (as they are returned as members as well)
                // this aligns the output with what is displayed in the Teams UI
                this.items = this.items.filter((groupUser, index, self) => index === self.findIndex((t) => (t.id === groupUser.id && t.displayName === groupUser.displayName)));
                if (args.options.role) {
                    this.items = this.items.filter(i => i.userType === args.options.role);
                }
                logger.log(this.items);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getOwners(logger, groupId) {
        const endpoint = `${this.resource}/v1.0/groups/${groupId}/owners?$select=id,displayName,userPrincipalName,userType`;
        return odata_1.odata.getAllItems(endpoint).then((items) => {
            this.items = this.items.concat(items);
            // Currently there is a bug in the Microsoft Graph that returns Owners as
            // userType 'member'. We therefore update all returned user as owner
            for (const i in this.items) {
                this.items[i].userType = "Owner";
            }
        });
    }
    getMembersAndGuests(logger, groupId) {
        const endpoint = `${this.resource}/v1.0/groups/${groupId}/members?$select=id,displayName,userPrincipalName,userType`;
        return odata_1.odata.getAllItems(endpoint);
    }
}
_TeamsUserListCommand_instances = new WeakSet(), _TeamsUserListCommand_initTelemetry = function _TeamsUserListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            role: args.options.role
        });
    });
}, _TeamsUserListCommand_initOptions = function _TeamsUserListCommand_initOptions() {
    this.options.unshift({
        option: "-i, --teamId <teamId>"
    }, {
        option: "-r, --role [type]",
        autocomplete: ["Owner", "Member", "Guest"]
    });
}, _TeamsUserListCommand_initValidators = function _TeamsUserListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.role) {
            if (['Owner', 'Member', 'Guest'].indexOf(args.options.role) === -1) {
                return `${args.options.role} is not a valid role value. Allowed values Owner|Member|Guest`;
            }
        }
        return true;
    }));
};
module.exports = new TeamsUserListCommand();
//# sourceMappingURL=user-list.js.map