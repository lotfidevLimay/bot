"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsCacheRemoveCommand_instances, _TeamsCacheRemoveCommand_initTelemetry, _TeamsCacheRemoveCommand_initOptions, _TeamsCacheRemoveCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const Cli_1 = require("../../../../cli/Cli");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsCacheRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsCacheRemoveCommand_instances.add(this);
        this.exec = util.promisify(require('child_process').exec);
        __classPrivateFieldGet(this, _TeamsCacheRemoveCommand_instances, "m", _TeamsCacheRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsCacheRemoveCommand_instances, "m", _TeamsCacheRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsCacheRemoveCommand_instances, "m", _TeamsCacheRemoveCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.CACHE_REMOVE;
    }
    get description() {
        return 'Removes the Microsoft Teams client cache';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (args.options.confirm) {
                    yield this.clearTeamsCache(logger);
                }
                else {
                    logger.logToStderr('This command will execute the following steps.');
                    logger.logToStderr('- Stop the Microsoft Teams client.');
                    logger.logToStderr('- Clear the Microsoft Teams cached files.');
                    const result = yield Cli_1.Cli.prompt({
                        type: 'confirm',
                        name: 'continue',
                        default: false,
                        message: `Are you sure you want to clear your Microsoft Teams cache?`
                    });
                    if (result.continue) {
                        yield this.clearTeamsCache(logger);
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    clearTeamsCache(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.killRunningProcess(logger);
                yield this.removeCacheFiles(logger);
            }
            catch (e) {
                throw e.message;
            }
            logger.logToStderr('Teams cache cleared!');
        });
    }
    killRunningProcess(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr('Stop Teams client');
            }
            const platform = process.platform;
            let cmd = '';
            switch (platform) {
                case 'win32':
                    cmd = 'taskkill /IM "Teams.exe" /F';
                    break;
                case 'darwin':
                    cmd = `ps ax | grep MacOS/Teams -m 1 | grep -v grep | awk '{ print $1 }'`;
                    break;
            }
            if (this.debug) {
                logger.logToStderr(cmd);
            }
            try {
                const cmdOutput = yield this.exec(cmd);
                if (cmdOutput.stdout !== '' && platform === 'darwin') {
                    process.kill(cmdOutput.stdout);
                }
                if (this.verbose) {
                    logger.logToStderr('Teams client closed');
                }
            }
            catch (e) {
                const errorMessage = e.message;
                if (errorMessage.includes('ERROR: The process "Teams.exe" not found.')) {
                    if (this.verbose) {
                        logger.logToStderr('Teams client isn\'t running');
                    }
                }
                else {
                    throw new Error(errorMessage);
                }
            }
        });
    }
    removeCacheFiles(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr('Clear Teams cached files');
            }
            const platform = process.platform;
            let cmd = '';
            switch (platform) {
                case 'win32':
                    cmd = 'cd %userprofile% && rmdir /s /q AppData\\Roaming\\Microsoft\\Teams';
                    break;
                case 'darwin':
                    cmd = 'rm -r ~/Library/Application\\ Support/Microsoft/Teams';
                    break;
            }
            if (this.debug) {
                logger.logToStderr(cmd);
            }
            try {
                yield this.exec(cmd);
            }
            catch (e) {
                throw new Error(e.message);
            }
        });
    }
}
_TeamsCacheRemoveCommand_instances = new WeakSet(), _TeamsCacheRemoveCommand_initTelemetry = function _TeamsCacheRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _TeamsCacheRemoveCommand_initOptions = function _TeamsCacheRemoveCommand_initOptions() {
    this.options.unshift({
        option: '--confirm'
    });
}, _TeamsCacheRemoveCommand_initValidators = function _TeamsCacheRemoveCommand_initValidators() {
    this.validators.push(() => __awaiter(this, void 0, void 0, function* () {
        if (process.env.CLIMICROSOFT365_ENV === 'docker') {
            return 'Because you\'re running CLI for Microsoft 365 in a Docker container, we can\'t clear the cache on your host. Instead run this command on your host using "npx ..."';
        }
        if (process.platform !== 'win32' && process.platform !== 'darwin') {
            return `${process.platform} platform is unsupported for this command`;
        }
        return true;
    }));
};
module.exports = new TeamsCacheRemoveCommand();
//# sourceMappingURL=cache-remove.js.map