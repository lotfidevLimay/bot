"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsMessageListCommand_instances, _TeamsMessageListCommand_initTelemetry, _TeamsMessageListCommand_initOptions, _TeamsMessageListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsMessageListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsMessageListCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsMessageListCommand_instances, "m", _TeamsMessageListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsMessageListCommand_instances, "m", _TeamsMessageListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsMessageListCommand_instances, "m", _TeamsMessageListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.MESSAGE_LIST;
    }
    get description() {
        return 'Lists all messages from a channel in a Microsoft Teams team';
    }
    defaultProperties() {
        return ['id', 'summary', 'body'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const deltaExtension = args.options.since !== undefined ? `/delta?$filter=lastModifiedDateTime gt ${args.options.since}` : '';
            const endpoint = `${this.resource}/v1.0/teams/${args.options.teamId}/channels/${args.options.channelId}/messages${deltaExtension}`;
            try {
                const items = yield odata_1.odata.getAllItems(endpoint);
                if (args.options.output !== 'json') {
                    items.forEach(i => {
                        i.body = i.body.content;
                    });
                }
                logger.log(items);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TeamsMessageListCommand_instances = new WeakSet(), _TeamsMessageListCommand_initTelemetry = function _TeamsMessageListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            since: typeof args.options.since !== 'undefined'
        });
    });
}, _TeamsMessageListCommand_initOptions = function _TeamsMessageListCommand_initOptions() {
    this.options.unshift({
        option: '-i, --teamId <teamId>'
    }, {
        option: '-c, --channelId <channelId>'
    }, {
        option: '-s, --since [since]'
    });
}, _TeamsMessageListCommand_initValidators = function _TeamsMessageListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (!validation_1.validation.isValidTeamsChannelId(args.options.channelId)) {
            return `${args.options.channelId} is not a valid Teams ChannelId`;
        }
        if (args.options.since && !validation_1.validation.isValidISODateDashOnly(args.options.since)) {
            return `${args.options.since} is not a valid ISO Date (with dash separator)`;
        }
        if (args.options.since && !validation_1.validation.isDateInRange(args.options.since, 8)) {
            return `${args.options.since} is not in the last 8 months (for delta messages)`;
        }
        return true;
    }));
};
module.exports = new TeamsMessageListCommand();
//# sourceMappingURL=message-list.js.map