"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsChannelMemberAddCommand_instances, _TeamsChannelMemberAddCommand_initTelemetry, _TeamsChannelMemberAddCommand_initOptions, _TeamsChannelMemberAddCommand_initValidators, _TeamsChannelMemberAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsChannelMemberAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsChannelMemberAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsChannelMemberAddCommand_instances, "m", _TeamsChannelMemberAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsChannelMemberAddCommand_instances, "m", _TeamsChannelMemberAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsChannelMemberAddCommand_instances, "m", _TeamsChannelMemberAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsChannelMemberAddCommand_instances, "m", _TeamsChannelMemberAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.CHANNEL_MEMBER_ADD;
    }
    get description() {
        return 'Adds a specified member in the specified Microsoft Teams private or shared team channel';
    }
    alias() {
        return [commands_1.default.CONVERSATIONMEMBER_ADD];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.showDeprecationWarning(logger, commands_1.default.CONVERSATIONMEMBER_ADD, commands_1.default.CHANNEL_MEMBER_ADD);
            try {
                const teamId = yield this.getTeamId(args);
                const channelId = yield this.getChannelId(teamId, args);
                const userIds = yield this.getUserId(args);
                const endpoint = `${this.resource}/v1.0/teams/${encodeURIComponent(teamId)}/channels/${encodeURIComponent(channelId)}/members`;
                const roles = args.options.owner ? ["owner"] : [];
                const tasks = [];
                for (const userId of userIds) {
                    tasks.push(this.addUser(userId, endpoint, roles));
                }
                yield Promise.all(tasks);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    addUser(userId, endpoint, roles) {
        const requestOptions = {
            url: endpoint,
            headers: {
                'content-type': 'application/json;odata=nometadata',
                'accept': 'application/json;odata.metadata=none'
            },
            responseType: 'json',
            data: {
                '@odata.type': '#microsoft.graph.aadUserConversationMember',
                'roles': roles,
                'user@odata.bind': `${this.resource}/v1.0/users('${userId}')`
            }
        };
        return request_1.default.post(requestOptions);
    }
    getTeamId(args) {
        if (args.options.teamId) {
            return Promise.resolve(args.options.teamId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.teamName)
            .then(group => {
            if (group.resourceProvisioningOptions.indexOf('Team') === -1) {
                return Promise.reject(`The specified team does not exist in the Microsoft Teams`);
            }
            return group.id;
        });
    }
    getChannelId(teamId, args) {
        if (args.options.channelId) {
            return Promise.resolve(args.options.channelId);
        }
        const channelRequestOptions = {
            url: `${this.resource}/v1.0/teams/${encodeURIComponent(teamId)}/channels?$filter=displayName eq '${encodeURIComponent(args.options.channelName)}'`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(channelRequestOptions)
            .then(response => {
            const channelItem = response.value[0];
            if (!channelItem) {
                return Promise.reject(`The specified channel '${args.options.channelName}' does not exist in the Microsoft Teams team with ID '${teamId}'`);
            }
            if (channelItem.membershipType !== "private") {
                return Promise.reject(`The specified channel is not a private channel`);
            }
            return Promise.resolve(channelItem.id);
        });
    }
    getUserId(args) {
        if (args.options.userId) {
            return Promise.resolve(args.options.userId.split(',').map(u => u.trim()));
        }
        const tasks = [];
        const userDisplayNames = args.options.userDisplayName && args.options.userDisplayName.split(',').map(u => u.trim());
        for (const userName of userDisplayNames) {
            tasks.push(this.getSingleUser(userName));
        }
        return Promise.all(tasks);
    }
    getSingleUser(userDisplayName) {
        const userRequestOptions = {
            url: `${this.resource}/v1.0/users?$filter=displayName eq '${encodeURIComponent(userDisplayName)}'`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(userRequestOptions)
            .then(response => {
            const userItem = response.value[0];
            if (!userItem) {
                return Promise.reject(`The specified user '${userDisplayName}' does not exist`);
            }
            if (response.value.length > 1) {
                return Promise.reject(`Multiple users with display name '${userDisplayName}' found. Please disambiguate:${os.EOL}${response.value.map(x => `- ${x.id}`).join(os.EOL)}`);
            }
            return Promise.resolve(userItem.id);
        }, err => { return Promise.reject(err); });
    }
}
_TeamsChannelMemberAddCommand_instances = new WeakSet(), _TeamsChannelMemberAddCommand_initTelemetry = function _TeamsChannelMemberAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            teamId: typeof args.options.teamId !== 'undefined',
            teamName: typeof args.options.teamName !== 'undefined',
            channelId: typeof args.options.channelId !== 'undefined',
            channelName: typeof args.options.channelName !== 'undefined',
            userId: typeof args.options.userId !== 'undefined',
            userDisplayName: typeof args.options.userDisplayName !== 'undefined',
            owner: args.options.owner
        });
    });
}, _TeamsChannelMemberAddCommand_initOptions = function _TeamsChannelMemberAddCommand_initOptions() {
    this.options.unshift({
        option: '-i, --teamId [teamId]'
    }, {
        option: '--teamName [teamName]'
    }, {
        option: '-c, --channelId [channelId]'
    }, {
        option: '--channelName [channelName]'
    }, {
        option: '--userId [userId]'
    }, {
        option: '--userDisplayName [userDisplayName]'
    }, {
        option: '--owner'
    });
}, _TeamsChannelMemberAddCommand_initValidators = function _TeamsChannelMemberAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.channelId && !validation_1.validation.isValidTeamsChannelId(args.options.channelId)) {
            return `${args.options.channelId} is not a valid Teams ChannelId`;
        }
        return true;
    }));
}, _TeamsChannelMemberAddCommand_initOptionSets = function _TeamsChannelMemberAddCommand_initOptionSets() {
    this.optionSets.push(['teamId', 'teamName'], ['channelId', 'channelName'], ['userId', 'userDisplayName']);
};
module.exports = new TeamsChannelMemberAddCommand();
//# sourceMappingURL=channel-member-add.js.map