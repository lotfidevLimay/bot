"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsChannelListCommand_instances, _TeamsChannelListCommand_initTelemetry, _TeamsChannelListCommand_initOptions, _TeamsChannelListCommand_initValidators, _TeamsChannelListCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsChannelListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsChannelListCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsChannelListCommand_instances, "m", _TeamsChannelListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsChannelListCommand_instances, "m", _TeamsChannelListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsChannelListCommand_instances, "m", _TeamsChannelListCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsChannelListCommand_instances, "m", _TeamsChannelListCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.CHANNEL_LIST;
    }
    get description() {
        return 'Lists channels in the specified Microsoft Teams team';
    }
    defaultProperties() {
        return ['id', 'displayName'];
    }
    getTeamId(args) {
        if (args.options.teamId) {
            return Promise.resolve(args.options.teamId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.teamName)
            .then(group => {
            if (group.resourceProvisioningOptions.indexOf('Team') === -1) {
                return Promise.reject(`The specified team does not exist in the Microsoft Teams`);
            }
            return group.id;
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const teamId = yield this.getTeamId(args);
                let endpoint = `${this.resource}/v1.0/teams/${teamId}/channels`;
                if (args.options.type) {
                    endpoint += `?$filter=membershipType eq '${args.options.type}'`;
                }
                const items = yield odata_1.odata.getAllItems(endpoint);
                logger.log(items);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TeamsChannelListCommand_instances = new WeakSet(), _TeamsChannelListCommand_initTelemetry = function _TeamsChannelListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            teamId: typeof args.options.teamId !== 'undefined',
            teamName: typeof args.options.teamName !== 'undefined'
        });
    });
}, _TeamsChannelListCommand_initOptions = function _TeamsChannelListCommand_initOptions() {
    this.options.unshift({
        option: '-i, --teamId [teamId]'
    }, {
        option: '--teamName [teamName]'
    }, {
        option: '--type [type]',
        autocomplete: ['standard', 'private', 'shared']
    });
}, _TeamsChannelListCommand_initValidators = function _TeamsChannelListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.type && ['standard', 'private', 'shared'].indexOf(args.options.type.toLowerCase()) === -1) {
            return `${args.options.type} is not a valid type value. Allowed values standard|private|shared`;
        }
        return true;
    }));
}, _TeamsChannelListCommand_initOptionSets = function _TeamsChannelListCommand_initOptionSets() {
    this.optionSets.push(['teamId', 'teamName']);
};
module.exports = new TeamsChannelListCommand();
//# sourceMappingURL=channel-list.js.map