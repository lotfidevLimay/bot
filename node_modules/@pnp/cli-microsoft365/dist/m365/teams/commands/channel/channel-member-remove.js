"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsChannelMemberRemoveCommand_instances, _TeamsChannelMemberRemoveCommand_initTelemetry, _TeamsChannelMemberRemoveCommand_initOptions, _TeamsChannelMemberRemoveCommand_initValidators, _TeamsChannelMemberRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsChannelMemberRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsChannelMemberRemoveCommand_instances.add(this);
        this.teamId = '';
        this.channelId = '';
        __classPrivateFieldGet(this, _TeamsChannelMemberRemoveCommand_instances, "m", _TeamsChannelMemberRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsChannelMemberRemoveCommand_instances, "m", _TeamsChannelMemberRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsChannelMemberRemoveCommand_instances, "m", _TeamsChannelMemberRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsChannelMemberRemoveCommand_instances, "m", _TeamsChannelMemberRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.CHANNEL_MEMBER_REMOVE;
    }
    get description() {
        return 'Remove the specified member from the specified Microsoft Teams private or shared team channel';
    }
    alias() {
        return [commands_1.default.CONVERSATIONMEMBER_REMOVE];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.showDeprecationWarning(logger, commands_1.default.CONVERSATIONMEMBER_REMOVE, commands_1.default.CHANNEL_MEMBER_REMOVE);
            const removeMember = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    yield this.removeMemberFromChannel(args);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeMember();
            }
            else {
                const userName = args.options.userName || args.options.userId || args.options.id;
                const teamName = args.options.teamName || args.options.teamId;
                const channelName = args.options.channelName || args.options.channelId;
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the member ${userName} from the channel ${channelName} in team ${teamName}?`
                });
                if (result.continue) {
                    yield removeMember();
                }
            }
        });
    }
    removeMemberFromChannel(args) {
        return this
            .getTeamId(args)
            .then((teamId) => {
            this.teamId = teamId;
            return this.getChannelId(args);
        })
            .then((channelId) => {
            this.channelId = channelId;
            return this.getMemberId(args);
        })
            .then((memberId) => {
            const requestOptions = {
                url: `${this.resource}/v1.0/teams/${this.teamId}/channels/${this.channelId}/members/${memberId}`,
                headers: {
                    'accept': 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            return request_1.default.delete(requestOptions);
        });
    }
    getTeamId(args) {
        if (args.options.teamId) {
            return Promise.resolve(args.options.teamId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.teamName)
            .then(group => {
            if (group.resourceProvisioningOptions.indexOf('Team') === -1) {
                return Promise.reject(`The specified team does not exist in the Microsoft Teams`);
            }
            return group.id;
        });
    }
    getChannelId(args) {
        if (args.options.channelId) {
            return Promise.resolve(args.options.channelId);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/teams/${encodeURIComponent(this.teamId)}/channels?$filter=displayName eq '${encodeURIComponent(args.options.channelName)}'`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then(response => {
            const channelItem = response.value[0];
            if (!channelItem) {
                return Promise.reject(`The specified channel does not exist in the Microsoft Teams team`);
            }
            if (channelItem.membershipType !== "private") {
                return Promise.reject(`The specified channel is not a private channel`);
            }
            return Promise.resolve(channelItem.id);
        });
    }
    getMemberId(args) {
        if (args.options.id) {
            return Promise.resolve(args.options.id);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/teams/${this.teamId}/channels/${this.channelId}/members`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then(response => {
            const conversationMembers = response.value.filter(x => {
                var _a, _b;
                return args.options.userId && ((_a = x.userId) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === args.options.userId.toLocaleLowerCase() ||
                    args.options.userName && ((_b = x.email) === null || _b === void 0 ? void 0 : _b.toLocaleLowerCase()) === args.options.userName.toLocaleLowerCase();
            });
            const conversationMember = conversationMembers[0];
            if (!conversationMember) {
                return Promise.reject(`The specified member does not exist in the Microsoft Teams channel`);
            }
            if (conversationMembers.length > 1) {
                return Promise.reject(`Multiple Microsoft Teams channel members with name ${args.options.userName} found: ${response.value.map(x => x.userId)}`);
            }
            return Promise.resolve(conversationMember.id);
        });
    }
}
_TeamsChannelMemberRemoveCommand_instances = new WeakSet(), _TeamsChannelMemberRemoveCommand_initTelemetry = function _TeamsChannelMemberRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            teamId: typeof args.options.teamId !== 'undefined',
            teamName: typeof args.options.teamName !== 'undefined',
            channelId: typeof args.options.channelId !== 'undefined',
            channelName: typeof args.options.channelName !== 'undefined',
            userName: typeof args.options.userName !== 'undefined',
            userId: typeof args.options.userId !== 'undefined',
            id: typeof args.options.id !== 'undefined',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _TeamsChannelMemberRemoveCommand_initOptions = function _TeamsChannelMemberRemoveCommand_initOptions() {
    this.options.unshift({
        option: '--teamId [teamId]'
    }, {
        option: '--teamName [teamName]'
    }, {
        option: '--channelId [channelId]'
    }, {
        option: '--channelName [channelName]'
    }, {
        option: '--userName [userName]'
    }, {
        option: '--userId [userId]'
    }, {
        option: '--id [id]'
    }, {
        option: '--confirm'
    });
}, _TeamsChannelMemberRemoveCommand_initValidators = function _TeamsChannelMemberRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.channelId && !validation_1.validation.isValidTeamsChannelId(args.options.channelId)) {
            return `${args.options.channelId} is not a valid Teams Channel ID`;
        }
        if (args.options.userId && !validation_1.validation.isValidGuid(args.options.userId)) {
            return `${args.options.userId} is not a valid GUID`;
        }
        return true;
    }));
}, _TeamsChannelMemberRemoveCommand_initOptionSets = function _TeamsChannelMemberRemoveCommand_initOptionSets() {
    this.optionSets.push(['teamId', 'teamName'], ['channelId', 'channelName'], ['userId', 'userName', 'id']);
};
module.exports = new TeamsChannelMemberRemoveCommand();
//# sourceMappingURL=channel-member-remove.js.map