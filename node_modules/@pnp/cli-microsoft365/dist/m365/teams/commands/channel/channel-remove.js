"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsChannelRemoveCommand_instances, _TeamsChannelRemoveCommand_initTelemetry, _TeamsChannelRemoveCommand_initOptions, _TeamsChannelRemoveCommand_initValidators, _TeamsChannelRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsChannelRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsChannelRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsChannelRemoveCommand_instances, "m", _TeamsChannelRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsChannelRemoveCommand_instances, "m", _TeamsChannelRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsChannelRemoveCommand_instances, "m", _TeamsChannelRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsChannelRemoveCommand_instances, "m", _TeamsChannelRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.CHANNEL_REMOVE;
    }
    get description() {
        return 'Removes the specified channel in the Microsoft Teams team';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeChannel = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (args.options.channelName) {
                        const requestOptions = {
                            url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}/channels?$filter=displayName eq '${encodeURIComponent(args.options.channelName)}'`,
                            headers: {
                                accept: 'application/json;odata.metadata=none'
                            },
                            responseType: 'json'
                        };
                        const res = yield request_1.default.get(requestOptions);
                        const channelItem = res.value[0];
                        if (!channelItem) {
                            return Promise.reject(`The specified channel does not exist in the Microsoft Teams team`);
                        }
                        const channelId = res.value[0].id;
                        const requestOptionsDelete = {
                            url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}/channels/${encodeURIComponent(channelId)}`,
                            headers: {
                                accept: 'application/json;odata.metadata=none'
                            },
                            responseType: 'json'
                        };
                        yield request_1.default.delete(requestOptionsDelete);
                    }
                    if (args.options.channelId) {
                        const requestOptions = {
                            url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}/channels/${encodeURIComponent(args.options.channelId)}`,
                            headers: {
                                accept: 'application/json;odata.metadata=none'
                            },
                            responseType: 'json'
                        };
                        yield request_1.default.delete(requestOptions);
                    }
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeChannel();
            }
            else {
                const channelName = args.options.channelName ? args.options.channelName : args.options.channelId;
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the channel ${channelName} from team ${args.options.teamId}?`
                });
                if (result.continue) {
                    yield removeChannel();
                }
            }
        });
    }
}
_TeamsChannelRemoveCommand_instances = new WeakSet(), _TeamsChannelRemoveCommand_initTelemetry = function _TeamsChannelRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            channelId: typeof args.options.channelId !== 'undefined',
            channelName: typeof args.options.channelName !== 'undefined',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _TeamsChannelRemoveCommand_initOptions = function _TeamsChannelRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-c, --channelId [channelId]'
    }, {
        option: '-n, --channelName [channelName]'
    }, {
        option: '-i, --teamId <teamId>'
    }, {
        option: '--confirm'
    });
}, _TeamsChannelRemoveCommand_initValidators = function _TeamsChannelRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.channelId && !validation_1.validation.isValidTeamsChannelId(args.options.channelId)) {
            return `${args.options.channelId} is not a valid Teams Channel Id`;
        }
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        return true;
    }));
}, _TeamsChannelRemoveCommand_initOptionSets = function _TeamsChannelRemoveCommand_initOptionSets() {
    this.optionSets.push(['channelId', 'channelName']);
};
module.exports = new TeamsChannelRemoveCommand();
//# sourceMappingURL=channel-remove.js.map