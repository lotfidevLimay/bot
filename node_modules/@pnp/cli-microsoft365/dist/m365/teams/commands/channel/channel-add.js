"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsChannelAddCommand_instances, _TeamsChannelAddCommand_initTelemetry, _TeamsChannelAddCommand_initOptions, _TeamsChannelAddCommand_initValidators, _TeamsChannelAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsChannelAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsChannelAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsChannelAddCommand_instances, "m", _TeamsChannelAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsChannelAddCommand_instances, "m", _TeamsChannelAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsChannelAddCommand_instances, "m", _TeamsChannelAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsChannelAddCommand_instances, "m", _TeamsChannelAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.CHANNEL_ADD;
    }
    get description() {
        return 'Adds a channel to the specified Microsoft Teams team';
    }
    getTeamId(args) {
        if (args.options.teamId) {
            return Promise.resolve(args.options.teamId);
        }
        const teamRequestOptions = {
            url: `${this.resource}/v1.0/me/joinedTeams`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(teamRequestOptions)
            .then(response => {
            const matchingTeams = response.value
                .filter(team => team.displayName === args.options.teamName)
                .map(team => team.id);
            if (matchingTeams.length < 1) {
                return Promise.reject(`The specified team does not exist in the Microsoft Teams`);
            }
            if (matchingTeams.length > 1) {
                return Promise.reject(`Multiple Microsoft Teams teams with name ${args.options.teamName} found: ${matchingTeams.join(', ')}`);
            }
            return Promise.resolve(matchingTeams[0]);
        });
    }
    createChannel(args, teamId) {
        const requestOptions = {
            url: `${this.resource}/v1.0/teams/${teamId}/channels`,
            headers: {
                accept: 'application/json;odata.metadata=none',
                'content-type': 'application/json;odata=nometadata'
            },
            data: {
                membershipType: args.options.type || 'standard',
                displayName: args.options.name
            },
            responseType: 'json'
        };
        if (args.options.type === 'private' || args.options.type === 'shared') {
            // Private and Shared channels must have at least 1 owner
            requestOptions.data.members = [
                {
                    '@odata.type': '#microsoft.graph.aadUserConversationMember',
                    'user@odata.bind': `https://graph.microsoft.com/v1.0/users('${args.options.owner}')`,
                    roles: ['owner']
                }
            ];
        }
        return request_1.default.post(requestOptions);
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const teamId = yield this.getTeamId(args);
                const res = yield this.createChannel(args, teamId);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TeamsChannelAddCommand_instances = new WeakSet(), _TeamsChannelAddCommand_initTelemetry = function _TeamsChannelAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            description: typeof args.options.description !== 'undefined',
            teamId: typeof args.options.teamId !== 'undefined',
            teamName: typeof args.options.teamName !== 'undefined',
            type: args.options.type || 'standard',
            owner: typeof args.options.owner !== 'undefined'
        });
    });
}, _TeamsChannelAddCommand_initOptions = function _TeamsChannelAddCommand_initOptions() {
    this.options.unshift({
        option: '-i, --teamId [teamId]'
    }, {
        option: '--teamName [teamName]'
    }, {
        option: '-n, --name <name>'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '--type [type]',
        autocomplete: ['standard', 'private', 'shared']
    }, {
        option: '--owner [owner]'
    });
}, _TeamsChannelAddCommand_initValidators = function _TeamsChannelAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.type && ['standard', 'private', 'shared'].indexOf(args.options.type) === -1) {
            return `${args.options.type} is not a valid type value. Allowed values standard|private|shared.`;
        }
        if ((args.options.type === 'private' || args.options.type === 'shared') && !args.options.owner) {
            return `Specify owner when creating a ${args.options.type} channel.`;
        }
        if ((args.options.type !== 'private' && args.options.type !== 'shared') && args.options.owner) {
            return `Specify owner only when creating a private or shared channel.`;
        }
        return true;
    }));
}, _TeamsChannelAddCommand_initOptionSets = function _TeamsChannelAddCommand_initOptionSets() {
    this.optionSets.push(['teamId', 'teamName']);
};
module.exports = new TeamsChannelAddCommand();
//# sourceMappingURL=channel-add.js.map