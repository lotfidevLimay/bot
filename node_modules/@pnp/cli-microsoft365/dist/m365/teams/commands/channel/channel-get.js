"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsChannelGetCommand_instances, _TeamsChannelGetCommand_initTelemetry, _TeamsChannelGetCommand_initOptions, _TeamsChannelGetCommand_initValidators, _TeamsChannelGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsChannelGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsChannelGetCommand_instances.add(this);
        this.teamId = "";
        __classPrivateFieldGet(this, _TeamsChannelGetCommand_instances, "m", _TeamsChannelGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsChannelGetCommand_instances, "m", _TeamsChannelGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsChannelGetCommand_instances, "m", _TeamsChannelGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsChannelGetCommand_instances, "m", _TeamsChannelGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.CHANNEL_GET;
    }
    get description() {
        return 'Gets information about the specific Microsoft Teams team channel';
    }
    getTeamId(args) {
        if (args.options.teamId) {
            return Promise.resolve(args.options.teamId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.teamName)
            .then(group => {
            if (group.resourceProvisioningOptions.indexOf('Team') === -1) {
                return Promise.reject(`The specified team does not exist in the Microsoft Teams`);
            }
            return group.id;
        });
    }
    getChannelId(args) {
        if (args.options.channelId) {
            return Promise.resolve(args.options.channelId);
        }
        if (args.options.primary) {
            return Promise.resolve('');
        }
        const channelRequestOptions = {
            url: `${this.resource}/v1.0/teams/${encodeURIComponent(this.teamId)}/channels?$filter=displayName eq '${encodeURIComponent(args.options.channelName)}'`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(channelRequestOptions)
            .then(response => {
            const channelItem = response.value[0];
            if (!channelItem) {
                return Promise.reject(`The specified channel does not exist in the Microsoft Teams team`);
            }
            return Promise.resolve(channelItem.id);
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.teamId = yield this.getTeamId(args);
                const channelId = yield this.getChannelId(args);
                let url = '';
                if (args.options.primary) {
                    url = `${this.resource}/v1.0/teams/${encodeURIComponent(this.teamId)}/primaryChannel`;
                }
                else {
                    url = `${this.resource}/v1.0/teams/${encodeURIComponent(this.teamId)}/channels/${encodeURIComponent(channelId)}`;
                }
                const requestOptions = {
                    url: url,
                    headers: {
                        accept: 'application/json;odata.metadata=none'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.get(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TeamsChannelGetCommand_instances = new WeakSet(), _TeamsChannelGetCommand_initTelemetry = function _TeamsChannelGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            teamId: typeof args.options.teamId !== 'undefined',
            teamName: typeof args.options.teamName !== 'undefined',
            channelId: typeof args.options.channelId !== 'undefined',
            channelName: typeof args.options.channelName !== 'undefined',
            primary: (!(!args.options.primary)).toString()
        });
    });
}, _TeamsChannelGetCommand_initOptions = function _TeamsChannelGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --teamId [teamId]'
    }, {
        option: '--teamName [teamName]'
    }, {
        option: '-c, --channelId [channelId]'
    }, {
        option: '--channelName [channelName]'
    }, {
        option: '--primary'
    });
}, _TeamsChannelGetCommand_initValidators = function _TeamsChannelGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.channelId && !validation_1.validation.isValidTeamsChannelId(args.options.channelId)) {
            return `${args.options.channelId} is not a valid Teams ChannelId`;
        }
        return true;
    }));
}, _TeamsChannelGetCommand_initOptionSets = function _TeamsChannelGetCommand_initOptionSets() {
    this.optionSets.push(['teamId', 'teamName'], ['channelId', 'channelName', 'primary']);
};
module.exports = new TeamsChannelGetCommand();
//# sourceMappingURL=channel-get.js.map