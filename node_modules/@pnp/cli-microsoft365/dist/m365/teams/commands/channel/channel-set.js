"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsChannelSetCommand_instances, _TeamsChannelSetCommand_initTelemetry, _TeamsChannelSetCommand_initOptions, _TeamsChannelSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsChannelSetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsChannelSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsChannelSetCommand_instances, "m", _TeamsChannelSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsChannelSetCommand_instances, "m", _TeamsChannelSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsChannelSetCommand_instances, "m", _TeamsChannelSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.CHANNEL_SET;
    }
    get description() {
        return 'Updates properties of the specified channel in the given Microsoft Teams team';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}/channels?$filter=displayName eq '${encodeURIComponent(args.options.channelName)}'`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            try {
                const res = yield request_1.default.get(requestOptions);
                const channelItem = res.value[0];
                if (!channelItem) {
                    throw `The specified channel does not exist in the Microsoft Teams team`;
                }
                const channelId = res.value[0].id;
                const data = this.mapRequestBody(args.options);
                const requestOptionsPatch = {
                    url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}/channels/${channelId}`,
                    headers: {
                        'accept': 'application/json;odata.metadata=none'
                    },
                    responseType: 'json',
                    data: data
                };
                yield request_1.default.patch(requestOptionsPatch);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    mapRequestBody(options) {
        const requestBody = {};
        if (options.newChannelName) {
            requestBody.displayName = options.newChannelName;
        }
        if (options.description) {
            requestBody.description = options.description;
        }
        return requestBody;
    }
}
_TeamsChannelSetCommand_instances = new WeakSet(), _TeamsChannelSetCommand_initTelemetry = function _TeamsChannelSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            newChannelName: typeof args.options.newChannelName !== 'undefined',
            description: typeof args.options.description !== 'undefined'
        });
    });
}, _TeamsChannelSetCommand_initOptions = function _TeamsChannelSetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --teamId <teamId>'
    }, {
        option: '--channelName <channelName>'
    }, {
        option: '--newChannelName [newChannelName]'
    }, {
        option: '--description [description]'
    });
}, _TeamsChannelSetCommand_initValidators = function _TeamsChannelSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.channelName.toLowerCase() === "general") {
            return 'General channel cannot be updated';
        }
        return true;
    }));
};
module.exports = new TeamsChannelSetCommand();
//# sourceMappingURL=channel-set.js.map