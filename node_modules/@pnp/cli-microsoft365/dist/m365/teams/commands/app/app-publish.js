"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsAppPublishCommand_instances, _TeamsAppPublishCommand_initOptions, _TeamsAppPublishCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsAppPublishCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsAppPublishCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsAppPublishCommand_instances, "m", _TeamsAppPublishCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsAppPublishCommand_instances, "m", _TeamsAppPublishCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.APP_PUBLISH;
    }
    get description() {
        return 'Publishes Teams app to the organization\'s app catalog';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const fullPath = path.resolve(args.options.filePath);
            if (this.verbose) {
                logger.logToStderr(`Adding app '${fullPath}' to app catalog...`);
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/appCatalogs/teamsApps`,
                headers: {
                    "content-type": "application/zip",
                    accept: 'application/json;odata.metadata=none'
                },
                data: fs.readFileSync(fullPath)
            };
            try {
                const res = yield request_1.default.post(requestOptions);
                if (res && res.id) {
                    logger.log(res.id);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TeamsAppPublishCommand_instances = new WeakSet(), _TeamsAppPublishCommand_initOptions = function _TeamsAppPublishCommand_initOptions() {
    this.options.unshift({
        option: '-p, --filePath <filePath>'
    });
}, _TeamsAppPublishCommand_initValidators = function _TeamsAppPublishCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const fullPath = path.resolve(args.options.filePath);
        if (!fs.existsSync(fullPath)) {
            return `File '${fullPath}' not found`;
        }
        if (fs.lstatSync(fullPath).isDirectory()) {
            return `Path '${fullPath}' points to a directory`;
        }
        return true;
    }));
};
module.exports = new TeamsAppPublishCommand();
//# sourceMappingURL=app-publish.js.map