"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsAppUpdateCommand_instances, _TeamsAppUpdateCommand_initTelemetry, _TeamsAppUpdateCommand_initOptions, _TeamsAppUpdateCommand_initValidators, _TeamsAppUpdateCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsAppUpdateCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsAppUpdateCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsAppUpdateCommand_instances, "m", _TeamsAppUpdateCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsAppUpdateCommand_instances, "m", _TeamsAppUpdateCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsAppUpdateCommand_instances, "m", _TeamsAppUpdateCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsAppUpdateCommand_instances, "m", _TeamsAppUpdateCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APP_UPDATE;
    }
    get description() {
        return 'Updates Teams app in the organization\'s app catalog';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { filePath } = args.options;
            try {
                const appId = yield this.getAppId(args);
                const fullPath = path.resolve(filePath);
                if (this.verbose) {
                    logger.logToStderr(`Updating app with id '${appId}' and file '${fullPath}' in the app catalog...`);
                }
                const requestOptions = {
                    url: `${this.resource}/v1.0/appCatalogs/teamsApps/${appId}`,
                    headers: {
                        "content-type": "application/zip"
                    },
                    data: fs.readFileSync(fullPath)
                };
                yield request_1.default.put(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getAppId(args) {
        if (args.options.id) {
            return Promise.resolve(args.options.id);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/appCatalogs/teamsApps?$filter=displayName eq '${encodeURIComponent(args.options.name)}'`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then(response => {
            const app = response.value[0];
            if (!app) {
                return Promise.reject(`The specified Teams app does not exist`);
            }
            if (response.value.length > 1) {
                return Promise.reject(`Multiple Teams apps with name ${args.options.name} found. Please choose one of these ids: ${response.value.map(x => x.id).join(', ')}`);
            }
            return Promise.resolve(app.id);
        });
    }
}
_TeamsAppUpdateCommand_instances = new WeakSet(), _TeamsAppUpdateCommand_initTelemetry = function _TeamsAppUpdateCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined'
        });
    });
}, _TeamsAppUpdateCommand_initOptions = function _TeamsAppUpdateCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '-p, --filePath <filePath>'
    });
}, _TeamsAppUpdateCommand_initValidators = function _TeamsAppUpdateCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id && !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        const fullPath = path.resolve(args.options.filePath);
        if (!fs.existsSync(fullPath)) {
            return `File '${fullPath}' not found`;
        }
        if (fs.lstatSync(fullPath).isDirectory()) {
            return `Path '${fullPath}' points to a directory`;
        }
        return true;
    }));
}, _TeamsAppUpdateCommand_initOptionSets = function _TeamsAppUpdateCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
};
module.exports = new TeamsAppUpdateCommand();
//# sourceMappingURL=app-update.js.map