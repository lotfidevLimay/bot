"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsAppListCommand_instances, _TeamsAppListCommand_initTelemetry, _TeamsAppListCommand_initOptions, _TeamsAppListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsAppListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsAppListCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsAppListCommand_instances, "m", _TeamsAppListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsAppListCommand_instances, "m", _TeamsAppListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsAppListCommand_instances, "m", _TeamsAppListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.APP_LIST;
    }
    get description() {
        return 'Lists apps from the Microsoft Teams app catalog or apps installed in the specified team';
    }
    defaultProperties() {
        return ['id', 'displayName', 'distributionMethod'];
    }
    getTeamId(args) {
        if (args.options.teamId) {
            return Promise.resolve(args.options.teamId);
        }
        return aadGroup_1.aadGroup
            .getGroupByDisplayName(args.options.teamName)
            .then(group => {
            if (group.resourceProvisioningOptions.indexOf('Team') === -1) {
                return Promise.reject(`The specified team does not exist in the Microsoft Teams`);
            }
            return group.id;
        });
    }
    getEndpointUrl(args) {
        return new Promise((resolve, reject) => {
            if (args.options.teamId || args.options.teamName) {
                this
                    .getTeamId(args)
                    .then((teamId) => {
                    let endpoint = `${this.resource}/v1.0/teams/${encodeURIComponent(teamId)}/installedApps?$expand=teamsApp`;
                    if (!args.options.all) {
                        endpoint += `&$filter=teamsApp/distributionMethod eq 'organization'`;
                    }
                    return resolve(endpoint);
                })
                    .catch((err) => {
                    reject(err);
                });
            }
            else {
                let endpoint = `${this.resource}/v1.0/appCatalogs/teamsApps`;
                if (!args.options.all) {
                    endpoint += `?$filter=distributionMethod eq 'organization'`;
                }
                return resolve(endpoint);
            }
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const endpoint = yield this.getEndpointUrl(args);
                const items = yield odata_1.odata.getAllItems(endpoint);
                if (args.options.teamId || args.options.teamName) {
                    items.forEach(t => {
                        t.displayName = t.teamsApp.displayName;
                        t.distributionMethod = t.teamsApp.distributionMethod;
                    });
                }
                logger.log(items);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TeamsAppListCommand_instances = new WeakSet(), _TeamsAppListCommand_initTelemetry = function _TeamsAppListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            all: args.options.all || false,
            teamId: typeof args.options.teamId !== 'undefined',
            teamName: typeof args.options.teamName !== 'undefined'
        });
    });
}, _TeamsAppListCommand_initOptions = function _TeamsAppListCommand_initOptions() {
    this.options.unshift({
        option: '-a, --all'
    }, {
        option: '-i, --teamId [teamId]'
    }, {
        option: '-t --teamName [teamName]'
    });
}, _TeamsAppListCommand_initValidators = function _TeamsAppListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && args.options.teamName) {
            return 'Specify either teamId or teamName, but not both.';
        }
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new TeamsAppListCommand();
//# sourceMappingURL=app-list.js.map