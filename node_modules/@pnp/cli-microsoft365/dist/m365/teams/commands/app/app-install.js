"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsAppInstallCommand_instances, _TeamsAppInstallCommand_initTelemetry, _TeamsAppInstallCommand_initOptions, _TeamsAppInstallCommand_initValidators, _TeamsAppInstallCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const AadUserGetCommand = require("../../../aad/commands/user/user-get");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsAppInstallCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsAppInstallCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsAppInstallCommand_instances, "m", _TeamsAppInstallCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsAppInstallCommand_instances, "m", _TeamsAppInstallCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsAppInstallCommand_instances, "m", _TeamsAppInstallCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsAppInstallCommand_instances, "m", _TeamsAppInstallCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APP_INSTALL;
    }
    get description() {
        return 'Installs a Microsoft Teams team app from the catalog in the specified team or for the specified user';
    }
    commandAction(logger, args) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.validateUser(args, logger);
                let url = `${this.resource}/v1.0`;
                if (args.options.teamId) {
                    url += `/teams/${encodeURIComponent(args.options.teamId)}/installedApps`;
                }
                else {
                    url += `/users/${encodeURIComponent(((_a = args.options.userId) !== null && _a !== void 0 ? _a : args.options.userName))}/teamwork/installedApps`;
                }
                const requestOptions = {
                    url: url,
                    headers: {
                        'content-type': 'application/json;odata=nometadata',
                        'accept': 'application/json;odata.metadata=none'
                    },
                    responseType: 'json',
                    data: {
                        'teamsApp@odata.bind': `${this.resource}/v1.0/appCatalogs/teamsApps/${args.options.appId}`
                    }
                };
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    // we need this method, because passing an invalid user ID to the API
    // won't cause an error
    validateUser(args, logger) {
        if (!args.options.userId) {
            return Promise.resolve(true);
        }
        if (this.verbose) {
            logger.logToStderr(`Checking if user ${args.options.userId} exists...`);
        }
        const options = {
            id: args.options.userId,
            output: 'json',
            debug: args.options.debug,
            verbose: args.options.verbose
        };
        return Cli_1.Cli
            .executeCommandWithOutput(AadUserGetCommand, { options: Object.assign(Object.assign({}, options), { _: [] }) })
            .then((res) => {
            if (this.verbose) {
                logger.logToStderr(res.stderr);
            }
            return true;
        }, (err) => {
            if (this.verbose) {
                logger.logToStderr(err.stderr);
            }
            return Promise.reject(`User with ID ${args.options.userId} not found. Original error: ${err.error.message}`);
        });
    }
}
_TeamsAppInstallCommand_instances = new WeakSet(), _TeamsAppInstallCommand_initTelemetry = function _TeamsAppInstallCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            teamId: typeof args.options.teamId !== 'undefined',
            userId: typeof args.options.userId !== 'undefined',
            userName: typeof args.options.userName !== 'undefined'
        });
    });
}, _TeamsAppInstallCommand_initOptions = function _TeamsAppInstallCommand_initOptions() {
    this.options.unshift({ option: '--appId <appId>' }, { option: '--teamId [teamId]' }, { option: '--userId [userId]' }, { option: '--userName [userName]' });
}, _TeamsAppInstallCommand_initValidators = function _TeamsAppInstallCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        if (args.options.teamId &&
            !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.userId &&
            !validation_1.validation.isValidGuid(args.options.userId)) {
            return `${args.options.userId} is not a valid GUID`;
        }
        return true;
    }));
}, _TeamsAppInstallCommand_initOptionSets = function _TeamsAppInstallCommand_initOptionSets() {
    this.optionSets.push(['teamId', 'userId', 'userName']);
};
module.exports = new TeamsAppInstallCommand();
//# sourceMappingURL=app-install.js.map