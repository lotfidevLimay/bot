"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsGuestSettingsSetCommand_instances, _TeamsGuestSettingsSetCommand_initTelemetry, _TeamsGuestSettingsSetCommand_initOptions, _TeamsGuestSettingsSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsGuestSettingsSetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsGuestSettingsSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsGuestSettingsSetCommand_instances, "m", _TeamsGuestSettingsSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsGuestSettingsSetCommand_instances, "m", _TeamsGuestSettingsSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsGuestSettingsSetCommand_instances, "m", _TeamsGuestSettingsSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.GUESTSETTINGS_SET;
    }
    get description() {
        return 'Updates guest settings of a Microsoft Teams team';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {
                guestSettings: {}
            };
            TeamsGuestSettingsSetCommand.props.forEach(p => {
                if (typeof args.options[p] !== 'undefined') {
                    data.guestSettings[p] = args.options[p] === 'true';
                }
            });
            const requestOptions = {
                url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                data: data,
                responseType: 'json'
            };
            try {
                yield request_1.default.patch(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TeamsGuestSettingsSetCommand_instances = new WeakSet(), _TeamsGuestSettingsSetCommand_initTelemetry = function _TeamsGuestSettingsSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        TeamsGuestSettingsSetCommand.props.forEach(p => {
            this.telemetryProperties[p] = args.options[p];
        });
    });
}, _TeamsGuestSettingsSetCommand_initOptions = function _TeamsGuestSettingsSetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --teamId <teamId>'
    }, {
        option: '--allowCreateUpdateChannels [allowCreateUpdateChannels]'
    }, {
        option: '--allowDeleteChannels [allowDeleteChannels]'
    });
}, _TeamsGuestSettingsSetCommand_initValidators = function _TeamsGuestSettingsSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        let isValid = true;
        let value, property = '';
        TeamsGuestSettingsSetCommand.props.every(p => {
            property = p;
            value = args.options[p];
            isValid = typeof value === 'undefined' ||
                value === 'true' ||
                value === 'false';
            return isValid;
        });
        if (!isValid) {
            return `Value ${value} for option ${property} is not a valid boolean`;
        }
        return true;
    }));
};
TeamsGuestSettingsSetCommand.props = [
    'allowCreateUpdateChannels',
    'allowDeleteChannels'
];
module.exports = new TeamsGuestSettingsSetCommand();
//# sourceMappingURL=guestsettings-set.js.map