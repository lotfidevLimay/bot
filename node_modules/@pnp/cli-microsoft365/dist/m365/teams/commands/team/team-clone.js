"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsTeamCloneCommand_instances, _TeamsTeamCloneCommand_initTelemetry, _TeamsTeamCloneCommand_initOptions, _TeamsTeamCloneCommand_initValidators, _TeamsTeamCloneCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsTeamCloneCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsTeamCloneCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsTeamCloneCommand_instances, "m", _TeamsTeamCloneCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsTeamCloneCommand_instances, "m", _TeamsTeamCloneCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsTeamCloneCommand_instances, "m", _TeamsTeamCloneCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsTeamCloneCommand_instances, "m", _TeamsTeamCloneCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.TEAM_CLONE;
    }
    get description() {
        return 'Creates a clone of a Microsoft Teams team';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.teamId) {
                args.options.id = args.options.teamId;
                this.warn(logger, `Option 'teamId' is deprecated. Please use 'id' instead.`);
            }
            if (args.options.displayName) {
                args.options.name = args.options.displayName;
                this.warn(logger, `Option 'displayName' is deprecated. Please use 'name' instead.`);
            }
            const data = {
                displayName: args.options.name,
                mailNickname: this.generateMailNickname(args.options.name),
                partsToClone: args.options.partsToClone
            };
            if (args.options.description) {
                data.description = args.options.description;
            }
            if (args.options.classification) {
                data.classification = args.options.classification;
            }
            if (args.options.visibility) {
                data.visibility = args.options.visibility;
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.id)}/clone`,
                headers: {
                    "content-type": "application/json",
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json',
                data: data
            };
            try {
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    /**
     * There is a know issue that the mailNickname is currently ignored and cannot be set by the user
     * However the mailNickname is still required by the payload so to deliver better user experience
     * the CLI generates mailNickname for the user
     * so the user does not have to specify something that will be ignored.
     * For more see: https://docs.microsoft.com/en-us/graph/api/team-clone?view=graph-rest-1.0#request-data
     * This method has to be removed once the graph team fixes the issue and then the actual value
     * of the mailNickname would have to be specified by the CLI user.
     * @param displayName teams display name
     */
    generateMailNickname(displayName) {
        // currently the Microsoft Graph generates mailNickname in a similar fashion
        return `${displayName.replace(/[^a-zA-Z0-9]/g, "")}${Math.floor(Math.random() * 9999)}`;
    }
}
_TeamsTeamCloneCommand_instances = new WeakSet(), _TeamsTeamCloneCommand_initTelemetry = function _TeamsTeamCloneCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            description: typeof args.options.description !== 'undefined',
            classification: typeof args.options.classification !== 'undefined',
            visibility: typeof args.options.visibility !== 'undefined',
            id: typeof args.options.id !== 'undefined',
            teamId: typeof args.options.teamId !== 'undefined',
            name: typeof args.options.name !== 'undefined',
            displayName: typeof args.options.displayName !== 'undefined'
        });
    });
}, _TeamsTeamCloneCommand_initOptions = function _TeamsTeamCloneCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [teamId]'
    }, {
        option: '--teamId [teamId]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '--displayName [displayName]'
    }, {
        option: '-p, --partsToClone <partsToClone>',
        autocomplete: ['apps', 'channels', 'members', 'settings', 'tabs']
    }, {
        option: '-d, --description [description]'
    }, {
        option: '-c, --classification [classification]'
    }, {
        option: '-v, --visibility [visibility]',
        autocomplete: ['Private', 'Public']
    });
}, _TeamsTeamCloneCommand_initValidators = function _TeamsTeamCloneCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.id && !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        const partsToClone = args.options.partsToClone.replace(/\s/g, '').split(',');
        for (const partToClone of partsToClone) {
            const part = partToClone.toLowerCase();
            if (part !== 'apps' &&
                part !== 'channels' &&
                part !== 'members' &&
                part !== 'settings' &&
                part !== 'tabs') {
                return `${part} is not a valid partsToClone. Allowed values are apps|channels|members|settings|tabs`;
            }
        }
        if (args.options.visibility) {
            const visibility = args.options.visibility.toLowerCase();
            if (visibility !== 'private' &&
                visibility !== 'public') {
                return `${args.options.visibility} is not a valid visibility type. Allowed values are Private|Public`;
            }
        }
        return true;
    }));
}, _TeamsTeamCloneCommand_initOptionSets = function _TeamsTeamCloneCommand_initOptionSets() {
    this.optionSets.push(['id', 'teamId'], ['name', 'displayName']);
};
module.exports = new TeamsTeamCloneCommand();
//# sourceMappingURL=team-clone.js.map