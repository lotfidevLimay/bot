"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsTeamAddCommand_instances, _TeamsTeamAddCommand_initTelemetry, _TeamsTeamAddCommand_initOptions, _TeamsTeamAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const aadGroup_1 = require("../../../../utils/aadGroup");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
var TeamsAsyncOperationStatus;
(function (TeamsAsyncOperationStatus) {
    TeamsAsyncOperationStatus["Invalid"] = "invalid";
    TeamsAsyncOperationStatus["NotStarted"] = "notStarted";
    TeamsAsyncOperationStatus["InProgress"] = "inProgress";
    TeamsAsyncOperationStatus["Succeeded"] = "succeeded";
    TeamsAsyncOperationStatus["Failed"] = "failed";
})(TeamsAsyncOperationStatus || (TeamsAsyncOperationStatus = {}));
class TeamsTeamAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsTeamAddCommand_instances.add(this);
        this.pollingInterval = 30000;
        __classPrivateFieldGet(this, _TeamsTeamAddCommand_instances, "m", _TeamsTeamAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsTeamAddCommand_instances, "m", _TeamsTeamAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsTeamAddCommand_instances, "m", _TeamsTeamAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.TEAM_ADD;
    }
    get description() {
        return 'Adds a new Microsoft Teams team';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.dots = '';
            let requestBody;
            if (args.options.template) {
                if (this.verbose) {
                    logger.logToStderr(`Using template...`);
                }
                requestBody = JSON.parse(args.options.template);
                if (args.options.name) {
                    if (this.verbose) {
                        logger.logToStderr(`Using '${args.options.name}' as name...`);
                    }
                    requestBody.displayName = args.options.name;
                }
                if (args.options.description) {
                    if (this.verbose) {
                        logger.logToStderr(`Using '${args.options.description}' as description...`);
                    }
                    requestBody.description = args.options.description;
                }
            }
            else {
                requestBody = {
                    'template@odata.bind': `https://graph.microsoft.com/v1.0/teamsTemplates('standard')`,
                    displayName: args.options.name,
                    description: args.options.description
                };
            }
            const requestOptionsPost = {
                url: `${this.resource}/v1.0/teams`,
                headers: {
                    'accept': 'application/json;odata.metadata=none'
                },
                data: requestBody,
                responseType: 'stream'
            };
            try {
                const res = yield request_1.default.post(requestOptionsPost);
                const requestOptions = {
                    url: `${this.resource}/v1.0${res.headers.location}`,
                    headers: {
                        accept: 'application/json;odata.metadata=minimal'
                    },
                    responseType: 'json'
                };
                const teamsAsyncOperation = yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    const teamsAsyncOperation = yield request_1.default.get(requestOptions);
                    if (!args.options.wait) {
                        resolve(teamsAsyncOperation);
                    }
                    else {
                        setTimeout(() => {
                            this.waitUntilFinished(requestOptions, resolve, reject, logger, this.dots);
                        }, this.pollingInterval);
                    }
                }));
                let output;
                if (teamsAsyncOperation.status !== TeamsAsyncOperationStatus.Succeeded) {
                    output = teamsAsyncOperation;
                }
                else {
                    output = yield aadGroup_1.aadGroup.getGroupById(teamsAsyncOperation.targetResourceId);
                }
                logger.log(output);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    waitUntilFinished(requestOptions, resolve, reject, logger, dots) {
        if (!this.debug && this.verbose) {
            dots += '.';
            process.stdout.write(`\r${dots}`);
        }
        request_1.default
            .get(requestOptions)
            .then((teamsAsyncOperation) => {
            if (teamsAsyncOperation.status === TeamsAsyncOperationStatus.Succeeded) {
                if (this.verbose) {
                    process.stdout.write('\n');
                }
                resolve(teamsAsyncOperation);
                return;
            }
            if (teamsAsyncOperation.error) {
                reject(teamsAsyncOperation.error);
                return;
            }
            setTimeout(() => {
                this.waitUntilFinished(requestOptions, resolve, reject, logger, dots);
            }, this.pollingInterval);
        }).catch(err => reject(err));
    }
}
_TeamsTeamAddCommand_instances = new WeakSet(), _TeamsTeamAddCommand_initTelemetry = function _TeamsTeamAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            name: typeof args.options.name !== 'undefined',
            description: typeof args.options.description !== 'undefined',
            template: typeof args.options.template !== 'undefined',
            wait: args.options.wait
        });
    });
}, _TeamsTeamAddCommand_initOptions = function _TeamsTeamAddCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name [name]'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '--template [template]'
    }, {
        option: '--wait'
    });
}, _TeamsTeamAddCommand_initValidators = function _TeamsTeamAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!args.options.template) {
            if (!args.options.name) {
                return `Required parameter name missing`;
            }
            if (!args.options.description) {
                return `Required parameter description missing`;
            }
        }
        return true;
    }));
};
module.exports = new TeamsTeamAddCommand();
//# sourceMappingURL=team-add.js.map