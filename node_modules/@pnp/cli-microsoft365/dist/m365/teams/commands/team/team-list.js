"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsTeamListCommand_instances, _TeamsTeamListCommand_initTelemetry, _TeamsTeamListCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const odata_1 = require("../../../../utils/odata");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsTeamListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsTeamListCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsTeamListCommand_instances, "m", _TeamsTeamListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsTeamListCommand_instances, "m", _TeamsTeamListCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.TEAM_LIST;
    }
    get description() {
        return 'Lists Microsoft Teams in the current tenant';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let endpoint = `${this.resource}/v1.0/groups?$select=id,displayName,description,resourceProvisioningOptions`;
            if (args.options.joined) {
                endpoint = `${this.resource}/v1.0/me/joinedTeams`;
            }
            try {
                const items = yield odata_1.odata.getAllItems(endpoint);
                if (args.options.joined) {
                    logger.log(items);
                }
                else {
                    const teamItems = yield Promise.all(items.filter((e) => {
                        return e.resourceProvisioningOptions.indexOf('Team') > -1;
                    }).map(g => this.getTeamFromGroup(g)));
                    logger.log(teamItems);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getTeamFromGroup(group) {
        return new Promise((resolve, reject) => {
            const requestOptions = {
                url: `${this.resource}/v1.0/teams/${group.id}`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            request_1.default
                .get(requestOptions)
                .then((res) => {
                resolve({
                    id: group.id,
                    displayName: group.displayName,
                    isArchived: res.isArchived,
                    description: group.description
                });
            }, (err) => {
                // If the user is not member of the team he/she cannot access it
                if (err.statusCode === 403) {
                    resolve({
                        id: group.id,
                        displayName: group.displayName,
                        description: group.description,
                        isArchived: undefined
                    });
                }
                else {
                    reject(err);
                }
            });
        });
    }
}
_TeamsTeamListCommand_instances = new WeakSet(), _TeamsTeamListCommand_initTelemetry = function _TeamsTeamListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            joined: args.options.joined
        });
    });
}, _TeamsTeamListCommand_initOptions = function _TeamsTeamListCommand_initOptions() {
    this.options.unshift({
        option: '-j, --joined'
    });
};
module.exports = new TeamsTeamListCommand();
//# sourceMappingURL=team-list.js.map