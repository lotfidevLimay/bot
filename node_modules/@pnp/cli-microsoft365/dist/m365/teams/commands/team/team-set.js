"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsTeamSetCommand_instances, _TeamsTeamSetCommand_initTelemetry, _TeamsTeamSetCommand_initOptions, _TeamsTeamSetCommand_initValidators, _TeamsTeamSetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsTeamSetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsTeamSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsTeamSetCommand_instances, "m", _TeamsTeamSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _TeamsTeamSetCommand_instances, "m", _TeamsTeamSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsTeamSetCommand_instances, "m", _TeamsTeamSetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _TeamsTeamSetCommand_instances, "m", _TeamsTeamSetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.TEAM_SET;
    }
    get description() {
        return 'Updates settings of a Microsoft Teams team';
    }
    mapRequestBody(options) {
        const requestBody = {};
        if (options.name) {
            requestBody.displayName = options.name;
        }
        if (options.description) {
            requestBody.description = options.description;
        }
        if (options.mailNickName) {
            requestBody.mailNickName = options.mailNickName;
        }
        if (options.classification) {
            requestBody.classification = options.classification;
        }
        if (options.visibility) {
            requestBody.visibility = options.visibility;
        }
        return requestBody;
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.teamId) {
                args.options.id = args.options.teamId;
                this.warn(logger, `Option 'teamId' is deprecated. Please use 'id' instead.`);
            }
            if (args.options.displayName) {
                args.options.name = args.options.displayName;
                this.warn(logger, `Option 'displayName' is deprecated. Please use 'name' instead.`);
            }
            const data = this.mapRequestBody(args.options);
            const requestOptions = {
                url: `${this.resource}/v1.0/groups/${encodeURIComponent(args.options.id)}`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                data: data,
                responseType: 'json'
            };
            try {
                yield request_1.default.patch(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TeamsTeamSetCommand_instances = new WeakSet(), _TeamsTeamSetCommand_initTelemetry = function _TeamsTeamSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        TeamsTeamSetCommand.props.forEach((p) => {
            this.telemetryProperties[p] = typeof args.options[p] !== 'undefined';
        });
    });
}, _TeamsTeamSetCommand_initOptions = function _TeamsTeamSetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '--teamId [teamId]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '--displayName [displayName]'
    }, {
        option: '--description [description]'
    }, {
        option: '--mailNickName [mailNickName]'
    }, {
        option: '--classification [classification]'
    }, {
        option: '--visibility [visibility]',
        autocomplete: ['Private', 'Public']
    });
}, _TeamsTeamSetCommand_initValidators = function _TeamsTeamSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.teamId && !validation_1.validation.isValidGuid(args.options.teamId)) {
            return `${args.options.teamId} is not a valid GUID`;
        }
        if (args.options.id && !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        if (args.options.visibility) {
            if (args.options.visibility.toLowerCase() !== 'private' && args.options.visibility.toLowerCase() !== 'public') {
                return `${args.options.visibility} is not a valid visibility type. Allowed values are Private|Public`;
            }
        }
        return true;
    }));
}, _TeamsTeamSetCommand_initOptionSets = function _TeamsTeamSetCommand_initOptionSets() {
    this.optionSets.push(['id', 'teamId']);
};
TeamsTeamSetCommand.props = [
    'displayName',
    'description',
    'mailNickName',
    'classification',
    'visibility '
];
module.exports = new TeamsTeamSetCommand();
//# sourceMappingURL=team-set.js.map