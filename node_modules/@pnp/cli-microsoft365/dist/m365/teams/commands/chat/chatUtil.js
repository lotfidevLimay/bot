"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.chatUtil = void 0;
const odata_1 = require("../../../../utils/odata");
exports.chatUtil = {
    /**
     * Finds existing Microsoft Teams chats by participants, using the Microsoft Graph
     * @param expectedMemberEmails a string array of participant emailaddresses
     * @param logger a logger to pipe into the graph request odata helper.
     */
    findExistingChatsByParticipants(expectedMemberEmails) {
        return __awaiter(this, void 0, void 0, function* () {
            const chatType = expectedMemberEmails.length === 2 ? 'oneOnOne' : 'group';
            const endpoint = `https://graph.microsoft.com/v1.0/chats?$filter=chatType eq '${chatType}'&$expand=members&$select=id,topic,createdDateTime,members`;
            const foundChats = [];
            const chats = yield odata_1.odata.getAllItems(endpoint);
            for (const chat of chats) {
                const chatMembers = chat.members;
                if (chatMembers.length === expectedMemberEmails.length) {
                    const chatMemberEmails = chatMembers.map(member => { var _a; return (_a = member.email) === null || _a === void 0 ? void 0 : _a.toLowerCase(); });
                    if (expectedMemberEmails.every(email => chatMemberEmails.some(memberEmail => memberEmail === email))) {
                        foundChats.push(chat);
                    }
                }
            }
            return foundChats;
        });
    },
    /**
     * Finds existing Microsoft Teams chats by name, using the Microsoft Graph
     * @param name the name of the chat conversation to find
     * @param logger a logger to pipe into the graph request odata helper.
     */
    findExistingGroupChatsByName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = `https://graph.microsoft.com/v1.0/chats?$filter=topic eq '${encodeURIComponent(name).replace("'", "''")}'&$expand=members&$select=id,topic,createdDateTime,chatType`;
            return odata_1.odata.getAllItems(endpoint);
        });
    }
};
//# sourceMappingURL=chatUtil.js.map