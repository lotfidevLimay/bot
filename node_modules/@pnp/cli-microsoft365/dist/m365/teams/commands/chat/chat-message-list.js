"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamsChatMessageListCommand_instances, _TeamsChatMessageListCommand_initOptions, _TeamsChatMessageListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const odata_1 = require("../../../../utils/odata");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class TeamsChatMessageListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _TeamsChatMessageListCommand_instances.add(this);
        __classPrivateFieldGet(this, _TeamsChatMessageListCommand_instances, "m", _TeamsChatMessageListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _TeamsChatMessageListCommand_instances, "m", _TeamsChatMessageListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.CHAT_MESSAGE_LIST;
    }
    get description() {
        return 'Lists all messages from a chat';
    }
    defaultProperties() {
        return ['id', 'shortBody'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = `${this.resource}/v1.0/chats/${args.options.chatId}/messages`;
            try {
                const items = yield odata_1.odata.getAllItems(endpoint);
                if (args.options.output !== 'json') {
                    items.forEach(i => {
                        // hoist the content to body for readability
                        i.body = i.body.content;
                        let shortBody;
                        const bodyToProcess = i.body;
                        if (bodyToProcess) {
                            let maxLength = 50;
                            let addedDots = '...';
                            if (bodyToProcess.length < maxLength) {
                                maxLength = bodyToProcess.length;
                                addedDots = '';
                            }
                            shortBody = bodyToProcess.replace(/\n/g, ' ').substring(0, maxLength) + addedDots;
                        }
                        i.shortBody = shortBody;
                    });
                }
                logger.log(items);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_TeamsChatMessageListCommand_instances = new WeakSet(), _TeamsChatMessageListCommand_initOptions = function _TeamsChatMessageListCommand_initOptions() {
    this.options.unshift({
        option: '-i, --chatId <chatId>'
    });
}, _TeamsChatMessageListCommand_initValidators = function _TeamsChatMessageListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidTeamsChatId(args.options.chatId)) {
            return `${args.options.chatId} is not a valid Teams chat ID`;
        }
        return true;
    }));
};
module.exports = new TeamsChatMessageListCommand();
//# sourceMappingURL=chat-message-list.js.map