"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoWebSetCommand_instances, _SpoWebSetCommand_initTelemetry, _SpoWebSetCommand_initOptions, _SpoWebSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoWebSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoWebSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoWebSetCommand_instances, "m", _SpoWebSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoWebSetCommand_instances, "m", _SpoWebSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoWebSetCommand_instances, "m", _SpoWebSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.WEB_SET;
    }
    get description() {
        return 'Updates subsite properties';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {};
            this.addUnknownOptionsToPayload(payload, args.options);
            if (args.options.title) {
                payload.Title = args.options.title;
            }
            if (args.options.description) {
                payload.Description = args.options.description;
            }
            if (typeof args.options.siteLogoUrl !== 'undefined') {
                payload.SiteLogoUrl = args.options.siteLogoUrl;
            }
            if (typeof args.options.quickLaunchEnabled !== 'undefined') {
                payload.QuickLaunchEnabled = args.options.quickLaunchEnabled === 'true';
            }
            if (typeof args.options.headerEmphasis !== 'undefined') {
                payload.HeaderEmphasis = args.options.headerEmphasis;
            }
            if (typeof args.options.headerLayout !== 'undefined') {
                payload.HeaderLayout = args.options.headerLayout === 'standard' ? 1 : 2;
            }
            if (typeof args.options.megaMenuEnabled !== 'undefined') {
                payload.MegaMenuEnabled = args.options.megaMenuEnabled === 'true';
            }
            if (typeof args.options.footerEnabled !== 'undefined') {
                payload.FooterEnabled = args.options.footerEnabled === 'true';
            }
            if (typeof args.options.searchScope !== 'undefined') {
                const searchScope = args.options.searchScope.toLowerCase();
                payload.SearchScope = SpoWebSetCommand.searchScopeOptions.indexOf(searchScope);
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web`,
                headers: {
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json',
                data: payload
            };
            if (this.verbose) {
                logger.logToStderr(`Updating properties of subsite ${args.options.webUrl}...`);
            }
            try {
                yield request_1.default.patch(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    allowUnknownOptions() {
        return true;
    }
}
_SpoWebSetCommand_instances = new WeakSet(), _SpoWebSetCommand_initTelemetry = function _SpoWebSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            description: typeof args.options.description !== 'undefined',
            headerEmphasis: typeof args.options.headerEmphasis !== 'undefined',
            headerLayout: typeof args.options.headerLayout !== 'undefined',
            megaMenuEnabled: typeof args.options.megaMenuEnabled !== 'undefined',
            siteLogoUrl: typeof args.options.siteLogoUrl !== 'undefined',
            title: typeof args.options.title !== 'undefined',
            quickLaunchEnabled: typeof args.options.quickLaunchEnabled !== 'undefined',
            footerEnabled: typeof args.options.footerEnabled !== 'undefined',
            searchScope: args.options.searchScope !== 'undefined'
        });
        this.trackUnknownOptions(this.telemetryProperties, args.options);
    });
}, _SpoWebSetCommand_initOptions = function _SpoWebSetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-t, --title [title]'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '--siteLogoUrl [siteLogoUrl]'
    }, {
        option: '--quickLaunchEnabled [quickLaunchEnabled]'
    }, {
        option: '--headerLayout [headerLayout]',
        autocomplete: ['standard', 'compact']
    }, {
        option: '--headerEmphasis [headerEmphasis]',
        autocomplete: ['0', '1', '2', '3']
    }, {
        option: '--megaMenuEnabled [megaMenuEnabled]',
        autocomplete: ['true', 'false']
    }, {
        option: '--footerEnabled [footerEnabled]',
        autocomplete: ['true', 'false']
    }, {
        option: '--searchScope [searchScope]',
        autocomplete: SpoWebSetCommand.searchScopeOptions
    });
}, _SpoWebSetCommand_initValidators = function _SpoWebSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (typeof args.options.quickLaunchEnabled !== 'undefined') {
            if (args.options.quickLaunchEnabled !== 'true' &&
                args.options.quickLaunchEnabled !== 'false') {
                return `${args.options.quickLaunchEnabled} is not a valid boolean value`;
            }
        }
        if (typeof args.options.headerEmphasis !== 'undefined') {
            if (isNaN(args.options.headerEmphasis)) {
                return `${args.options.headerEmphasis} is not a number`;
            }
            if ([0, 1, 2, 3].indexOf(args.options.headerEmphasis) < 0) {
                return `${args.options.headerEmphasis} is not a valid value for headerEmphasis. Allowed values are 0|1|2|3`;
            }
        }
        if (typeof args.options.headerLayout !== 'undefined') {
            if (['standard', 'compact'].indexOf(args.options.headerLayout) < 0) {
                return `${args.options.headerLayout} is not a valid value for headerLayout. Allowed values are standard|compact`;
            }
        }
        if (typeof args.options.megaMenuEnabled !== 'undefined') {
            if (['true', 'false'].indexOf(args.options.megaMenuEnabled) < 0) {
                return `${args.options.megaMenuEnabled} is not a valid boolean value`;
            }
        }
        if (typeof args.options.footerEnabled !== 'undefined') {
            if (args.options.footerEnabled !== 'true' &&
                args.options.footerEnabled !== 'false') {
                return `${args.options.footerEnabled} is not a valid boolean value`;
            }
        }
        if (typeof args.options.searchScope !== 'undefined') {
            const searchScope = args.options.searchScope.toString().toLowerCase();
            if (SpoWebSetCommand.searchScopeOptions.indexOf(searchScope) < 0) {
                return `${args.options.searchScope} is not a valid value for searchScope. Allowed values are DefaultScope|Tenant|Hub|Site`;
            }
        }
        return true;
    }));
};
SpoWebSetCommand.searchScopeOptions = ['defaultscope', 'tenant', 'hub', 'site'];
module.exports = new SpoWebSetCommand();
//# sourceMappingURL=web-set.js.map