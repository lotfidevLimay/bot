"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoWebRoleAssignmentRemoveCommand_instances, _SpoWebRoleAssignmentRemoveCommand_initTelemetry, _SpoWebRoleAssignmentRemoveCommand_initOptions, _SpoWebRoleAssignmentRemoveCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const SpoUserGetCommand = require("../user/user-get");
const SpoGroupGetCommand = require("../group/group-get");
class SpoWebRoleAssignmentRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoWebRoleAssignmentRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoWebRoleAssignmentRemoveCommand_instances, "m", _SpoWebRoleAssignmentRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoWebRoleAssignmentRemoveCommand_instances, "m", _SpoWebRoleAssignmentRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoWebRoleAssignmentRemoveCommand_instances, "m", _SpoWebRoleAssignmentRemoveCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.WEB_ROLEASSIGNMENT_REMOVE;
    }
    get description() {
        return 'Removes a role assignment from web permissions';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeRoleAssignment = () => __awaiter(this, void 0, void 0, function* () {
                if (this.verbose) {
                    logger.logToStderr(`Removing role assignment from web ${args.options.webUrl}...`);
                }
                try {
                    if (args.options.upn) {
                        args.options.principalId = yield this.getUserPrincipalId(args.options);
                        yield this.removeRoleAssignment(logger, args.options);
                    }
                    else if (args.options.groupName) {
                        args.options.principalId = yield this.getGroupPrincipalId(args.options);
                        yield this.removeRoleAssignment(logger, args.options);
                    }
                    else {
                        yield this.removeRoleAssignment(logger, args.options);
                    }
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeRoleAssignment();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove role assignment from web ${args.options.webUrl}?`
                });
                if (result.continue) {
                    yield removeRoleAssignment();
                }
            }
        });
    }
    removeRoleAssignment(logger, options) {
        const requestOptions = {
            url: `${options.webUrl}/_api/web/roleassignments/removeroleassignment(principalid='${options.principalId}')`,
            method: 'POST',
            headers: {
                'accept': 'application/json;odata=nometadata',
                'content-type': 'application/json'
            },
            responseType: 'json'
        };
        return request_1.default
            .post(requestOptions)
            .then(_ => Promise.resolve())
            .catch((err) => Promise.reject(err));
    }
    getGroupPrincipalId(options) {
        const groupGetCommandOptions = {
            webUrl: options.webUrl,
            name: options.groupName,
            output: 'json',
            debug: this.debug,
            verbose: this.verbose
        };
        return Cli_1.Cli.executeCommandWithOutput(SpoGroupGetCommand, { options: Object.assign(Object.assign({}, groupGetCommandOptions), { _: [] }) })
            .then((output) => {
            const getGroupOutput = JSON.parse(output.stdout);
            return Promise.resolve(getGroupOutput.Id);
        }, (err) => {
            return Promise.reject(err);
        });
    }
    getUserPrincipalId(options) {
        const userGetCommandOptions = {
            webUrl: options.webUrl,
            email: options.upn,
            id: undefined,
            output: 'json',
            debug: this.debug,
            verbose: this.verbose
        };
        return Cli_1.Cli.executeCommandWithOutput(SpoUserGetCommand, { options: Object.assign(Object.assign({}, userGetCommandOptions), { _: [] }) })
            .then((output) => {
            const getUserOutput = JSON.parse(output.stdout);
            return Promise.resolve(getUserOutput.Id);
        }, (err) => {
            return Promise.reject(err);
        });
    }
}
_SpoWebRoleAssignmentRemoveCommand_instances = new WeakSet(), _SpoWebRoleAssignmentRemoveCommand_initTelemetry = function _SpoWebRoleAssignmentRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            principalId: typeof args.options.principalId !== 'undefined',
            upn: typeof args.options.upn !== 'undefined',
            groupName: typeof args.options.groupName !== 'undefined',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SpoWebRoleAssignmentRemoveCommand_initOptions = function _SpoWebRoleAssignmentRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--principalId [principalId]'
    }, {
        option: '--upn [upn]'
    }, {
        option: '--groupName [groupName]'
    }, {
        option: '--confirm'
    });
}, _SpoWebRoleAssignmentRemoveCommand_initValidators = function _SpoWebRoleAssignmentRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.principalId && isNaN(args.options.principalId)) {
            return `Specified principalId ${args.options.principalId} is not a number`;
        }
        const principalOptions = [args.options.principalId, args.options.upn, args.options.groupName];
        if (principalOptions.some(item => item !== undefined) && principalOptions.filter(item => item !== undefined).length > 1) {
            return `Specify either principalId id or upn or groupName`;
        }
        if (principalOptions.filter(item => item !== undefined).length === 0) {
            return `Specify at least principalId id or upn or groupName`;
        }
        return true;
    }));
};
module.exports = new SpoWebRoleAssignmentRemoveCommand();
//# sourceMappingURL=web-roleassignment-remove.js.map