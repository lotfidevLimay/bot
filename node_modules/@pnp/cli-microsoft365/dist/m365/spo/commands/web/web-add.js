"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoWebAddCommand_instances, _SpoWebAddCommand_initTelemetry, _SpoWebAddCommand_initOptions, _SpoWebAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const base_permissions_1 = require("../../base-permissions");
const commands_1 = require("../../commands");
class SpoWebAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoWebAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoWebAddCommand_instances, "m", _SpoWebAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoWebAddCommand_instances, "m", _SpoWebAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoWebAddCommand_instances, "m", _SpoWebAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.WEB_ADD;
    }
    get description() {
        return 'Create new subsite';
    }
    getExcludedOptionsWithUrls() {
        return ['webUrl'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let siteInfo = null;
            let subsiteFullUrl = '';
            try {
                const res = yield spo_1.spo.getRequestDigest(args.options.parentWebUrl);
                const requestOptionsPost = {
                    url: `${args.options.parentWebUrl}/_api/web/webinfos/add`,
                    headers: {
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata',
                        'X-RequestDigest': res.FormDigestValue
                    },
                    responseType: 'json',
                    data: {
                        parameters: {
                            Url: args.options.webUrl,
                            Title: args.options.title,
                            Description: args.options.description,
                            Language: args.options.locale,
                            WebTemplate: args.options.webTemplate,
                            UseUniquePermissions: args.options.breakInheritance
                        }
                    }
                };
                if (this.verbose) {
                    logger.logToStderr(`Creating subsite ${args.options.parentWebUrl}/${args.options.webUrl}...`);
                }
                siteInfo = yield request_1.default.post(requestOptionsPost);
                if (args.options.inheritNavigation) {
                    if (this.verbose) {
                        logger.logToStderr("Setting inheriting navigation from the parent site...");
                    }
                    subsiteFullUrl = `${args.options.parentWebUrl}/${encodeURIComponent(args.options.webUrl)}`;
                    const requestOptionsPer = {
                        url: `${subsiteFullUrl}/_api/web/effectivebasepermissions`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const effectivebasepermissions = yield request_1.default.get(requestOptionsPer);
                    const permissions = new base_permissions_1.BasePermissions();
                    permissions.high = effectivebasepermissions.High;
                    permissions.low = effectivebasepermissions.Low;
                    /// Detects if the site in question has no script enabled or not. 
                    /// Detection is done by verifying if the AddAndCustomizePages permission is missing.
                    /// 
                    /// See https://support.office.com/en-us/article/Turn-scripting-capabilities-on-or-off-1f2c515f-5d7e-448a-9fd7-835da935584f
                    /// for the effects of NoScript
                    if (permissions.has(base_permissions_1.PermissionKind.AddAndCustomizePages)) {
                        const digest = yield spo_1.spo.getRequestDigest(subsiteFullUrl);
                        const requestOptionsQuery = {
                            url: `${subsiteFullUrl}/_vti_bin/client.svc/ProcessQuery`,
                            headers: {
                                'X-RequestDigest': digest.FormDigestValue
                            },
                            data: `<Request xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}"><Actions><ObjectPath Id="1" ObjectPathId="0" /><ObjectPath Id="3" ObjectPathId="2" /><ObjectPath Id="5" ObjectPathId="4" /><SetProperty Id="6" ObjectPathId="4" Name="UseShared"><Parameter Type="Boolean">true</Parameter></SetProperty></Actions><ObjectPaths><StaticProperty Id="0" TypeId="{3747adcd-a3c3-41b9-bfab-4a64dd2f1e0a}" Name="Current" /><Property Id="2" ParentId="0" Name="Web" /><Property Id="4" ParentId="2" Name="Navigation" /></ObjectPaths></Request>`
                        };
                        const query = yield request_1.default.post(requestOptionsQuery);
                        const json = JSON.parse(query);
                        const response = json[0];
                        if (response.ErrorInfo) {
                            throw response.ErrorInfo.ErrorMessage;
                        }
                    }
                    else {
                        if (this.verbose) {
                            logger.logToStderr("No script is enabled. Skipping the InheritParentNavigation settings.");
                        }
                    }
                }
                logger.log(siteInfo);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoWebAddCommand_instances = new WeakSet(), _SpoWebAddCommand_initTelemetry = function _SpoWebAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            description: (!(!args.options.description)).toString(),
            locale: args.options.locale || '1033',
            breakInheritance: args.options.breakInheritance || false,
            inheritNavigation: args.options.inheritNavigation || false
        });
    });
}, _SpoWebAddCommand_initOptions = function _SpoWebAddCommand_initOptions() {
    this.options.unshift({
        option: '-t, --title <title>'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-w, --webTemplate <webTemplate>'
    }, {
        option: '-p, --parentWebUrl <parentWebUrl>'
    }, {
        option: '-l, --locale [locale]'
    }, {
        option: '--breakInheritance'
    }, {
        option: '--inheritNavigation'
    });
}, _SpoWebAddCommand_initValidators = function _SpoWebAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.parentWebUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.locale) {
            const locale = parseInt(args.options.locale);
            if (isNaN(locale)) {
                return `${args.options.locale} is not a valid locale number`;
            }
        }
        return true;
    }));
};
module.exports = new SpoWebAddCommand();
//# sourceMappingURL=web-add.js.map