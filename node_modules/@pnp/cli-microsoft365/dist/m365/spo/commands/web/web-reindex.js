"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoWebReindexCommand_instances, _SpoWebReindexCommand_initOptions, _SpoWebReindexCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const propertybag_base_1 = require("../propertybag/propertybag-base");
class SpoWebReindexCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoWebReindexCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoWebReindexCommand_instances, "m", _SpoWebReindexCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoWebReindexCommand_instances, "m", _SpoWebReindexCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.WEB_REINDEX;
    }
    get description() {
        return 'Requests reindexing the specified subsite';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let requestDigest = '';
            let webIdentityResp;
            try {
                const res = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                requestDigest = res.FormDigestValue;
                if (this.debug) {
                    logger.logToStderr(`Retrieved request digest. Retrieving web identity...`);
                }
                const identityResp = yield spo_1.spo.getCurrentWebIdentity(args.options.webUrl, requestDigest);
                webIdentityResp = identityResp;
                if (this.debug) {
                    logger.logToStderr(`Retrieved web identity.`);
                }
                if (this.verbose) {
                    logger.logToStderr(`Checking if the site is a no-script site...`);
                }
                const isNoScriptSite = yield propertybag_base_1.SpoPropertyBagBaseCommand.isNoScriptSite(args.options.webUrl, requestDigest, webIdentityResp, logger, this.debug);
                if (isNoScriptSite) {
                    if (this.verbose) {
                        logger.logToStderr(`Site is a no-script site. Reindexing lists instead...`);
                    }
                    yield this.reindexLists(args.options.webUrl, requestDigest, logger, webIdentityResp);
                }
                if (this.verbose) {
                    logger.logToStderr(`Site is not a no-script site. Reindexing site...`);
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/web/allproperties`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const webProperties = yield request_1.default.get(requestOptions);
                let searchVersion = webProperties.vti_x005f_searchversion || 0;
                searchVersion++;
                yield propertybag_base_1.SpoPropertyBagBaseCommand.setProperty('vti_searchversion', searchVersion.toString(), args.options.webUrl, requestDigest, webIdentityResp, logger, this.debug);
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
    reindexLists(webUrl, requestDigest, logger, webIdentityResp) {
        return new Promise((resolve, reject) => {
            (() => {
                if (this.debug) {
                    logger.logToStderr(`Retrieving information about lists...`);
                }
                const requestOptions = {
                    url: `${webUrl}/_api/web/lists?$select=NoCrawl,Title,RootFolder/Properties,RootFolder/ServerRelativeUrl&$expand=RootFolder/Properties`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                return request_1.default.get(requestOptions);
            })()
                .then((lists) => {
                const promises = lists.value.map(l => this.reindexList(l, webUrl, requestDigest, webIdentityResp, logger));
                return Promise.all(promises);
            })
                .then(() => {
                resolve();
            }, (err) => reject(err));
        });
    }
    reindexList(list, webUrl, requestDigest, webIdentityResp, logger) {
        return new Promise((resolve, reject) => {
            if (list.NoCrawl) {
                if (this.debug) {
                    logger.logToStderr(`List ${list.Title} is excluded from crawling`);
                }
                resolve();
                return;
            }
            spo_1.spo
                .getFolderIdentity(webIdentityResp.objectIdentity, webUrl, list.RootFolder.ServerRelativeUrl, requestDigest)
                .then((folderIdentityResp) => {
                let searchversion = list.RootFolder.Properties.vti_x005f_searchversion || 0;
                searchversion++;
                return propertybag_base_1.SpoPropertyBagBaseCommand.setProperty('vti_searchversion', searchversion.toString(), webUrl, requestDigest, folderIdentityResp, logger, this.debug, list.RootFolder.ServerRelativeUrl);
            })
                .then(() => {
                resolve();
            }, (err) => reject(err));
        });
    }
}
_SpoWebReindexCommand_instances = new WeakSet(), _SpoWebReindexCommand_initOptions = function _SpoWebReindexCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    });
}, _SpoWebReindexCommand_initValidators = function _SpoWebReindexCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoWebReindexCommand();
//# sourceMappingURL=web-reindex.js.map