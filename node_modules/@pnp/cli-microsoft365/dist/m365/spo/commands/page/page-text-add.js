"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPageTextAddCommand_instances, _SpoPageTextAddCommand_initTelemetry, _SpoPageTextAddCommand_initOptions, _SpoPageTextAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const clientsidepages_1 = require("./clientsidepages");
const Page_1 = require("./Page");
class SpoPageTextAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoPageTextAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPageTextAddCommand_instances, "m", _SpoPageTextAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoPageTextAddCommand_instances, "m", _SpoPageTextAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPageTextAddCommand_instances, "m", _SpoPageTextAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PAGE_TEXT_ADD;
    }
    get description() {
        return 'Adds text to a modern page';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let requestDigest = '';
            let pageName = args.options.pageName;
            if (args.options.pageName.indexOf('.aspx') < 0) {
                pageName += '.aspx';
            }
            if (this.verbose) {
                logger.logToStderr(`Retrieving request digest...`);
            }
            try {
                const reqDigest = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                // Keep the reference of request digest for subsequent requests
                requestDigest = reqDigest.FormDigestValue;
                if (this.verbose) {
                    logger.logToStderr(`Retrieving modern page ${pageName}...`);
                }
                // Get Client Side Page
                const page = yield Page_1.Page.getPage(pageName, args.options.webUrl, logger, this.debug, this.verbose);
                const section = (args.options.section || 1) - 1;
                const column = (args.options.column || 1) - 1;
                // Make sure the section is in range
                if (section >= page.sections.length) {
                    throw new Error(`Invalid section '${section + 1}'`);
                }
                // Make sure the column is in range
                if (column >= page.sections[section].columns.length) {
                    throw new Error(`Invalid column '${column + 1}'`);
                }
                const text = new clientsidepages_1.ClientSideText(args.options.text);
                if (typeof args.options.order === 'undefined') {
                    page.sections[section].columns[column].addControl(text);
                }
                else {
                    const order = args.options.order - 1;
                    page.sections[section].columns[column].insertControl(text, order);
                }
                // Save the Client Side Page with updated information
                yield this.saveClientSidePage(page, logger, args, pageName, requestDigest);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    saveClientSidePage(clientSidePage, logger, args, pageName, requestDigest) {
        const updatedContent = clientSidePage.toHtml();
        if (this.debug) {
            logger.logToStderr('Updated canvas content: ');
            logger.logToStderr(updatedContent);
            logger.logToStderr('');
        }
        const requestOptions = {
            url: `${args.options
                .webUrl}/_api/web/getfilebyserverrelativeurl('${urlUtil_1.urlUtil.getServerRelativeSiteUrl(args.options.webUrl)}/sitepages/${pageName}')/ListItemAllFields`,
            headers: {
                'X-RequestDigest': requestDigest,
                'content-type': 'application/json;odata=nometadata',
                'X-HTTP-Method': 'MERGE',
                'IF-MATCH': '*',
                accept: 'application/json;odata=nometadata'
            },
            data: {
                CanvasContent1: updatedContent
            },
            responseType: 'json'
        };
        return request_1.default.post(requestOptions);
    }
}
_SpoPageTextAddCommand_instances = new WeakSet(), _SpoPageTextAddCommand_initTelemetry = function _SpoPageTextAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            section: typeof args.options.section !== 'undefined',
            column: typeof args.options.column !== 'undefined',
            order: typeof args.options.order !== 'undefined'
        });
    });
}, _SpoPageTextAddCommand_initOptions = function _SpoPageTextAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-n, --pageName <pageName>'
    }, {
        option: '-t, --text <text>'
    }, {
        option: '--section [section]'
    }, {
        option: '--column [column]'
    }, {
        option: '--order [order]'
    });
}, _SpoPageTextAddCommand_initValidators = function _SpoPageTextAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.section && (!(0, util_1.isNumber)(args.options.section) || args.options.section < 1)) {
            return 'The value of parameter section must be 1 or higher';
        }
        if (args.options.column && (!(0, util_1.isNumber)(args.options.column) || args.options.column < 1)) {
            return 'The value of parameter column must be 1 or higher';
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
};
module.exports = new SpoPageTextAddCommand();
//# sourceMappingURL=page-text-add.js.map