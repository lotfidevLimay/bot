"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPageControlSetCommand_instances, _SpoPageControlSetCommand_initTelemetry, _SpoPageControlSetCommand_initOptions, _SpoPageControlSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const Page_1 = require("./Page");
class SpoPageControlSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoPageControlSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPageControlSetCommand_instances, "m", _SpoPageControlSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoPageControlSetCommand_instances, "m", _SpoPageControlSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPageControlSetCommand_instances, "m", _SpoPageControlSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PAGE_CONTROL_SET;
    }
    get description() {
        return 'Updates web part data or properties of a control on a modern page';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let pageName = args.options.name;
            if (args.options.name.indexOf('.aspx') < 0) {
                pageName += '.aspx';
            }
            try {
                let requestOptions = {
                    url: `${args.options.webUrl}/_api/SitePages/Pages/GetByUrl('sitepages/${encodeURIComponent(pageName)}')`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.get(requestOptions);
                if (!res.CanvasContent1) {
                    throw `Page ${pageName} doesn't contain canvas controls.`;
                }
                const pageControls = JSON.parse(res.CanvasContent1);
                const control = pageControls.find(control => control.id && control.id.toLowerCase() === args.options.id.toLowerCase());
                if (!control) {
                    throw `Control with ID ${args.options.id} not found on page ${pageName}`;
                }
                if (this.verbose) {
                    logger.logToStderr(`Control with ID ${args.options.id} found on the page`);
                }
                // Check out the page
                const page = yield Page_1.Page.checkout(pageName, args.options.webUrl, logger, this.debug, this.verbose);
                // Update the web part data
                const canvasContent = JSON.parse(page.CanvasContent1);
                if (this.debug) {
                    logger.logToStderr(canvasContent);
                }
                const canvasControl = canvasContent.find(c => c.id.toLowerCase() === args.options.id.toLowerCase());
                if (!canvasControl) {
                    throw `Control with ID ${args.options.id} not found on page ${pageName}`;
                }
                if (args.options.webPartData) {
                    if (this.verbose) {
                        logger.logToStderr('web part data:');
                        logger.logToStderr(args.options.webPartData);
                        logger.logToStderr('');
                    }
                    const webPartData = JSON.parse(args.options.webPartData);
                    canvasControl.webPartData = Object.assign(Object.assign(Object.assign({}, canvasControl.webPartData), webPartData), { id: canvasControl.webPartData.id, instanceId: canvasControl.webPartData.instanceId });
                    if (this.verbose) {
                        logger.logToStderr('Updated web part data:');
                        logger.logToStderr(canvasControl.webPartData);
                        logger.logToStderr('');
                    }
                }
                if (args.options.webPartProperties) {
                    if (this.verbose) {
                        logger.logToStderr('web part properties data:');
                        logger.logToStderr(args.options.webPartProperties);
                        logger.logToStderr('');
                    }
                    const webPartProperties = JSON.parse(args.options.webPartProperties);
                    canvasControl.webPartData.properties = Object.assign(Object.assign({}, canvasControl.webPartData.properties), webPartProperties);
                    if (this.verbose) {
                        logger.logToStderr('Updated web part properties:');
                        logger.logToStderr(canvasControl.webPartData.properties);
                        logger.logToStderr('');
                    }
                }
                const pageData = {};
                if (page.AuthorByline) {
                    pageData.AuthorByline = page.AuthorByline;
                }
                if (page.BannerImageUrl) {
                    pageData.BannerImageUrl = page.BannerImageUrl;
                }
                if (page.Description) {
                    pageData.Description = page.Description;
                }
                if (page.Title) {
                    pageData.Title = page.Title;
                }
                if (page.TopicHeader) {
                    pageData.TopicHeader = page.TopicHeader;
                }
                if (page.LayoutWebpartsContent) {
                    pageData.LayoutWebpartsContent = page.LayoutWebpartsContent;
                }
                if (canvasContent) {
                    pageData.CanvasContent1 = JSON.stringify(canvasContent);
                }
                requestOptions = {
                    url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageName)}')/SavePageAsDraft`,
                    headers: {
                        'X-HTTP-Method': 'MERGE',
                        'IF-MATCH': '*',
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata'
                    },
                    data: pageData,
                    responseType: 'json'
                };
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoPageControlSetCommand_instances = new WeakSet(), _SpoPageControlSetCommand_initTelemetry = function _SpoPageControlSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            webPartData: typeof args.options.webPartData !== 'undefined',
            webPartProperties: typeof args.options.webPartProperties !== 'undefined'
        });
    });
}, _SpoPageControlSetCommand_initOptions = function _SpoPageControlSetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '-n, --name <name>'
    }, {
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--webPartData [webPartData]'
    }, {
        option: '--webPartProperties [webPartProperties]'
    });
}, _SpoPageControlSetCommand_initValidators = function _SpoPageControlSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        if (args.options.webPartData && args.options.webPartProperties) {
            return 'Specify webPartProperties or webPartData but not both';
        }
        if (args.options.webPartProperties) {
            try {
                JSON.parse(args.options.webPartProperties);
            }
            catch (e) {
                return `Specified webPartProperties is not a valid JSON string. Input: ${args.options.webPartData}. Error: ${e}`;
            }
        }
        if (args.options.webPartData) {
            try {
                JSON.parse(args.options.webPartData);
            }
            catch (e) {
                return `Specified webPartData is not a valid JSON string. Input: ${args.options.webPartData}. Error: ${e}`;
            }
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
};
module.exports = new SpoPageControlSetCommand();
//# sourceMappingURL=page-control-set.js.map