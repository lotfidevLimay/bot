"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPageListCommand_instances, _SpoPageListCommand_initOptions, _SpoPageListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoPageListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoPageListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPageListCommand_instances, "m", _SpoPageListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPageListCommand_instances, "m", _SpoPageListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PAGE_LIST;
    }
    get description() {
        return 'Lists all modern pages in the given site';
    }
    defaultProperties() {
        return ['Name', 'Title'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.verbose) {
                    logger.logToStderr(`Retrieving client-side pages...`);
                }
                let requestOptions = {
                    url: `${args.options.webUrl}/_api/sitepages/pages?$orderby=Title`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                let pages = [];
                const pagesList = yield request_1.default.get(requestOptions);
                requestOptions = {
                    url: `${args.options.webUrl}/_api/web/lists/SitePages/rootfolder/files?$expand=ListItemAllFields/ClientSideApplicationId&$orderby=Name`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                if (pagesList.value && pagesList.value.length > 0) {
                    pages = pagesList.value;
                }
                const res = yield request_1.default.get(requestOptions);
                if (res.value && res.value.length > 0) {
                    const clientSidePages = res.value.filter(p => p.ListItemAllFields.ClientSideApplicationId === 'b6917cb1-93a0-4b97-a84d-7cf49975d4ec');
                    pages = pages.map(p => {
                        const clientSidePage = clientSidePages.find(cp => cp && cp.ListItemAllFields && cp.ListItemAllFields.Id === p.Id);
                        if (clientSidePage) {
                            return Object.assign(Object.assign({}, clientSidePage), p);
                        }
                        return p;
                    });
                    logger.log(pages);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoPageListCommand_instances = new WeakSet(), _SpoPageListCommand_initOptions = function _SpoPageListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    });
}, _SpoPageListCommand_initValidators = function _SpoPageListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoPageListCommand();
//# sourceMappingURL=page-list.js.map