"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPageColumnGetCommand_instances, _SpoPageColumnGetCommand_initOptions, _SpoPageColumnGetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const Page_1 = require("./Page");
class SpoPageColumnGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoPageColumnGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPageColumnGetCommand_instances, "m", _SpoPageColumnGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPageColumnGetCommand_instances, "m", _SpoPageColumnGetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PAGE_COLUMN_GET;
    }
    get description() {
        return 'Get information about a specific column of a modern page';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const clientSidePage = yield Page_1.Page.getPage(args.options.name, args.options.webUrl, logger, this.debug, this.verbose);
                const sections = clientSidePage.sections
                    .filter(section => section.order === args.options.section);
                if (sections.length) {
                    const isJSONOutput = args.options.output === 'json';
                    const columns = sections[0].columns.filter(col => col.order === args.options.column);
                    if (columns.length) {
                        const column = Page_1.Page.getColumnsInformation(columns[0], isJSONOutput);
                        column.controls = columns[0].controls
                            .map(control => Page_1.Page.getControlsInformation(control, isJSONOutput));
                        if (!isJSONOutput) {
                            column.controls = column.controls
                                .map(control => `${control.id} (${control.title})`)
                                .join(', ');
                        }
                        logger.log(column);
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoPageColumnGetCommand_instances = new WeakSet(), _SpoPageColumnGetCommand_initOptions = function _SpoPageColumnGetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-n, --name <name>'
    }, {
        option: '-s, --section <section>'
    }, {
        option: '-c, --column <column>'
    });
}, _SpoPageColumnGetCommand_initValidators = function _SpoPageColumnGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (isNaN(args.options.section)) {
            return `${args.options.section} is not a number`;
        }
        if (isNaN(args.options.column)) {
            return `${args.options.column} is not a number`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
};
module.exports = new SpoPageColumnGetCommand();
//# sourceMappingURL=page-column-get.js.map