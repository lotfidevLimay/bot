"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPageSetCommand_instances, _SpoPageSetCommand_initTelemetry, _SpoPageSetCommand_initOptions, _SpoPageSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const Page_1 = require("./Page");
class SpoPageSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoPageSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPageSetCommand_instances, "m", _SpoPageSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoPageSetCommand_instances, "m", _SpoPageSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPageSetCommand_instances, "m", _SpoPageSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PAGE_SET;
    }
    get description() {
        return 'Updates modern page properties';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = Auth_1.Auth.getResourceFromUrl(args.options.webUrl);
            let pageName = args.options.name;
            const fileNameWithoutExtension = pageName.replace('.aspx', '');
            let bannerImageUrl = '';
            let canvasContent1 = '';
            let layoutWebpartsContent = '';
            let pageTitle = args.options.title || "";
            let pageId = null;
            let pageDescription = args.options.description || "";
            let topicHeader = "";
            let authorByline = [];
            const pageData = {};
            if (!pageName.endsWith('.aspx')) {
                pageName += '.aspx';
            }
            const serverRelativeFileUrl = `${urlUtil_1.urlUtil.getServerRelativeSiteUrl(args.options.webUrl)}/sitepages/${pageName}`;
            const needsToSavePage = !!args.options.title || !!args.options.description;
            try {
                const requestDigestResult = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                const requestDigest = requestDigestResult.FormDigestValue;
                const page = yield Page_1.Page.checkout(args.options.name, args.options.webUrl, logger, this.debug, this.verbose);
                if (page) {
                    pageTitle = pageTitle || page.Title;
                    pageId = page.Id;
                    bannerImageUrl = page.BannerImageUrl;
                    canvasContent1 = page.CanvasContent1;
                    layoutWebpartsContent = page.LayoutWebpartsContent;
                    pageDescription = pageDescription || page.Description;
                    topicHeader = page.TopicHeader;
                    authorByline = page.AuthorByline;
                }
                if (args.options.layoutType) {
                    const requestOptions = {
                        url: `${args.options.webUrl}/_api/web/getfilebyserverrelativeurl('${serverRelativeFileUrl}')/ListItemAllFields`,
                        headers: {
                            'X-RequestDigest': requestDigest,
                            'content-type': 'application/json;odata=nometadata',
                            'X-HTTP-Method': 'MERGE',
                            'IF-MATCH': '*',
                            accept: 'application/json;odata=nometadata'
                        },
                        data: {
                            PageLayoutType: args.options.layoutType
                        },
                        responseType: 'json'
                    };
                    if (args.options.layoutType === 'Article') {
                        requestOptions.data.PromotedState = 0;
                        requestOptions.data.BannerImageUrl = {
                            Description: '/_layouts/15/images/sitepagethumbnail.png',
                            Url: `${resource}/_layouts/15/images/sitepagethumbnail.png`
                        };
                    }
                    yield request_1.default.post(requestOptions);
                }
                if (args.options.promoteAs) {
                    const requestOptions = {
                        responseType: 'json'
                    };
                    switch (args.options.promoteAs) {
                        case 'HomePage':
                            requestOptions.url = `${args.options.webUrl}/_api/web/rootfolder`;
                            requestOptions.headers = {
                                'X-RequestDigest': requestDigest,
                                'X-HTTP-Method': 'MERGE',
                                'IF-MATCH': '*',
                                'content-type': 'application/json;odata=nometadata',
                                accept: 'application/json;odata=nometadata'
                            };
                            requestOptions.data = {
                                WelcomePage: `SitePages/${pageName}`
                            };
                            break;
                        case 'NewsPage':
                            requestOptions.url = `${args.options.webUrl}/_api/web/getfilebyserverrelativeurl('${serverRelativeFileUrl}')/ListItemAllFields`;
                            requestOptions.headers = {
                                'X-RequestDigest': requestDigest,
                                'X-HTTP-Method': 'MERGE',
                                'IF-MATCH': '*',
                                'content-type': 'application/json;odata=nometadata',
                                accept: 'application/json;odata=nometadata'
                            };
                            requestOptions.data = {
                                PromotedState: 2,
                                FirstPublishedDate: new Date().toISOString().replace('Z', '')
                            };
                            break;
                        case 'Template':
                            requestOptions.url = `${args.options.webUrl}/_api/web/getfilebyserverrelativeurl('${serverRelativeFileUrl}')/ListItemAllFields`;
                            requestOptions.headers = {
                                'X-RequestDigest': requestDigest,
                                'content-type': 'application/json;odata=nometadata',
                                accept: 'application/json;odata=nometadata'
                            };
                            break;
                    }
                    const pageRes = yield request_1.default.post(requestOptions);
                    if (args.options.promoteAs === 'Template') {
                        const requestOptions = {
                            responseType: 'json',
                            url: `${args.options.webUrl}/_api/SitePages/Pages(${pageRes.Id})/SavePageAsTemplate`,
                            headers: {
                                'X-RequestDigest': requestDigest,
                                'content-type': 'application/json;odata=nometadata',
                                'X-HTTP-Method': 'POST',
                                'IF-MATCH': '*',
                                accept: 'application/json;odata=nometadata'
                            }
                        };
                        const res = yield request_1.default.post(requestOptions);
                        if (fileNameWithoutExtension) {
                            pageData.Title = fileNameWithoutExtension;
                        }
                        if (pageDescription) {
                            pageData.Description = pageDescription;
                        }
                        if (res.BannerImageUrl) {
                            pageData.BannerImageUrl = res.BannerImageUrl;
                        }
                        if (res.LayoutWebpartsContent) {
                            pageData.LayoutWebpartsContent = res.LayoutWebpartsContent;
                        }
                        if (res.CanvasContent1) {
                            pageData.CanvasContent1 = res.CanvasContent1;
                        }
                        pageId = res.Id;
                    }
                }
                if (args.options.promoteAs !== 'Template') {
                    if (pageTitle) {
                        pageData.Title = pageTitle;
                    }
                    if (pageDescription) {
                        pageData.Description = pageDescription;
                    }
                    if (bannerImageUrl) {
                        pageData.BannerImageUrl = bannerImageUrl;
                    }
                    if (canvasContent1) {
                        pageData.CanvasContent1 = canvasContent1;
                    }
                    if (layoutWebpartsContent) {
                        pageData.LayoutWebpartsContent = layoutWebpartsContent;
                    }
                    if (topicHeader) {
                        pageData.TopicHeader = topicHeader;
                    }
                    if (authorByline) {
                        pageData.AuthorByline = authorByline;
                    }
                }
                if (needsToSavePage) {
                    const requestOptions = {
                        responseType: 'json',
                        url: `${args.options.webUrl}/_api/SitePages/Pages(${pageId})/SavePage`,
                        headers: {
                            'X-RequestDigest': requestDigest,
                            'X-HTTP-Method': 'MERGE',
                            'IF-MATCH': '*',
                            'content-type': 'application/json;odata=nometadata',
                            accept: 'application/json;odata=nometadata'
                        },
                        data: pageData
                    };
                    yield request_1.default.post(requestOptions);
                }
                if (args.options.promoteAs === 'Template') {
                    const requestOptions = {
                        responseType: 'json',
                        url: `${args.options.webUrl}/_api/SitePages/Pages(${pageId})/SavePageAsDraft`,
                        headers: {
                            'X-RequestDigest': requestDigest,
                            'X-HTTP-Method': 'MERGE',
                            'IF-MATCH': '*',
                            'content-type': 'application/json;odata=nometadata',
                            accept: 'application/json;odata=nometadata'
                        },
                        data: pageData
                    };
                    yield request_1.default.post(requestOptions);
                }
                if (typeof args.options.commentsEnabled !== 'undefined') {
                    const requestOptions = {
                        url: `${args.options.webUrl}/_api/web/getfilebyserverrelativeurl('${serverRelativeFileUrl}')/ListItemAllFields/SetCommentsDisabled(${args.options.commentsEnabled === 'false'})`,
                        headers: {
                            'X-RequestDigest': requestDigest,
                            'content-type': 'application/json;odata=nometadata',
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    yield request_1.default.post(requestOptions);
                }
                let requestOptions;
                if (!args.options.publish) {
                    if (args.options.promoteAs === 'Template' || !pageId) {
                        return;
                    }
                    requestOptions = {
                        responseType: 'json',
                        url: `${args.options.webUrl}/_api/SitePages/Pages(${pageId})/SavePageAsDraft`,
                        headers: {
                            'content-type': 'application/json;odata=nometadata',
                            'accept': 'application/json;odata=nometadata'
                        },
                        data: pageData
                    };
                }
                else {
                    requestOptions = {
                        url: `${args.options.webUrl}/_api/web/getfilebyserverrelativeurl('${serverRelativeFileUrl}')/CheckIn(comment=@a1,checkintype=@a2)?@a1='${encodeURIComponent(args.options.publishMessage || '').replace(/'/g, '%39')}'&@a2=1`,
                        headers: {
                            'X-RequestDigest': requestDigest,
                            'content-type': 'application/json;odata=nometadata',
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                }
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoPageSetCommand_instances = new WeakSet(), _SpoPageSetCommand_initTelemetry = function _SpoPageSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            layoutType: args.options.layoutType,
            promoteAs: args.options.promoteAs,
            commentsEnabled: args.options.commentsEnabled || false,
            publish: args.options.publish || false,
            publishMessage: typeof args.options.publishMessage !== 'undefined',
            description: typeof args.options.description !== 'undefined',
            title: typeof args.options.title !== 'undefined'
        });
    });
}, _SpoPageSetCommand_initOptions = function _SpoPageSetCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name <name>'
    }, {
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --layoutType [layoutType]',
        autocomplete: Page_1.supportedPageLayouts
    }, {
        option: '-p, --promoteAs [promoteAs]',
        autocomplete: Page_1.supportedPromoteAs
    }, {
        option: '--commentsEnabled [commentsEnabled]',
        autocomplete: ['true', 'false']
    }, {
        option: '--publish'
    }, {
        option: '--publishMessage [publishMessage]'
    }, {
        option: '--description [description]'
    }, {
        option: '--title [title]'
    });
}, _SpoPageSetCommand_initValidators = function _SpoPageSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.layoutType &&
            Page_1.supportedPageLayouts.indexOf(args.options.layoutType) < 0) {
            return `${args.options.layoutType} is not a valid option for layoutType. Allowed values ${Page_1.supportedPageLayouts.join(', ')}`;
        }
        if (args.options.promoteAs &&
            Page_1.supportedPromoteAs.indexOf(args.options.promoteAs) < 0) {
            return `${args.options.promoteAs} is not a valid option for promoteAs. Allowed values ${Page_1.supportedPromoteAs.join(', ')}`;
        }
        if (args.options.promoteAs === 'HomePage' && args.options.layoutType !== 'Home') {
            return 'You can only promote home pages as site home page';
        }
        if (args.options.promoteAs === 'NewsPage' && args.options.layoutType && args.options.layoutType !== 'Article') {
            return 'You can only promote article pages as news article';
        }
        if (typeof args.options.commentsEnabled !== 'undefined' &&
            args.options.commentsEnabled !== 'true' &&
            args.options.commentsEnabled !== 'false') {
            return `${args.options.commentsEnabled} is not a valid value for commentsEnabled. Allowed values true|false`;
        }
        return true;
    }));
};
module.exports = new SpoPageSetCommand();
//# sourceMappingURL=page-set.js.map