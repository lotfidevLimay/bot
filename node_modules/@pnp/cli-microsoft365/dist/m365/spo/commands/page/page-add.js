"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPageAddCommand_instances, _SpoPageAddCommand_initTelemetry, _SpoPageAddCommand_initOptions, _SpoPageAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Auth_1 = require("../../../../Auth");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const Page_1 = require("./Page");
class SpoPageAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoPageAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPageAddCommand_instances, "m", _SpoPageAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoPageAddCommand_instances, "m", _SpoPageAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPageAddCommand_instances, "m", _SpoPageAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PAGE_ADD;
    }
    get description() {
        return 'Creates modern page';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = Auth_1.Auth.getResourceFromUrl(args.options.webUrl);
            let requestDigest = '';
            let itemId = '';
            let pageName = args.options.name;
            const serverRelativeSiteUrl = urlUtil_1.urlUtil.getServerRelativeSiteUrl(args.options.webUrl);
            const fileNameWithoutExtension = pageName.replace('.aspx', '');
            let bannerImageUrl = '';
            let canvasContent1 = '';
            let layoutWebpartsContent = '';
            const pageTitle = args.options.title ? args.options.title : (args.options.name.indexOf('.aspx') > -1 ? args.options.name.substr(0, args.options.name.indexOf('.aspx')) : args.options.name);
            let pageId = null;
            const pageDescription = args.options.description || "";
            try {
                const reqDigest = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                requestDigest = reqDigest.FormDigestValue;
                if (!pageName.endsWith('.aspx')) {
                    pageName += '.aspx';
                }
                let requestOptions = {
                    url: `${args.options.webUrl}/_api/web/getfolderbyserverrelativeurl('${serverRelativeSiteUrl}/sitepages')/files/AddTemplateFile`,
                    headers: {
                        'X-RequestDigest': requestDigest,
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata'
                    },
                    data: {
                        urlOfFile: `${serverRelativeSiteUrl}/sitepages/${pageName}`,
                        templateFileType: 3
                    },
                    responseType: 'json'
                };
                const template = yield request_1.default.post(requestOptions);
                itemId = template.UniqueId;
                const layoutType = args.options.layoutType || 'Article';
                requestOptions = {
                    url: `${args.options.webUrl}/_api/web/getfilebyid('${itemId}')/ListItemAllFields`,
                    headers: {
                        'X-RequestDigest': requestDigest,
                        'X-HTTP-Method': 'MERGE',
                        'IF-MATCH': '*',
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata'
                    },
                    data: {
                        ContentTypeId: '0x0101009D1CB255DA76424F860D91F20E6C4118',
                        Title: pageTitle,
                        ClientSideApplicationId: 'b6917cb1-93a0-4b97-a84d-7cf49975d4ec',
                        PageLayoutType: layoutType
                    },
                    responseType: 'json'
                };
                if (layoutType === 'Article') {
                    requestOptions.data.PromotedState = 0;
                    requestOptions.data.BannerImageUrl = {
                        Description: '/_layouts/15/images/sitepagethumbnail.png',
                        Url: `${resource}/_layouts/15/images/sitepagethumbnail.png`
                    };
                }
                yield request_1.default.post(requestOptions);
                const pageProps = yield Page_1.Page.checkout(pageName, args.options.webUrl, logger, this.debug, this.verbose);
                if (pageProps) {
                    pageId = pageProps.Id;
                    bannerImageUrl = pageProps.BannerImageUrl;
                    canvasContent1 = pageProps.CanvasContent1;
                    layoutWebpartsContent = pageProps.LayoutWebpartsContent;
                }
                if (args.options.promoteAs) {
                    const requestOptions = {
                        responseType: 'json'
                    };
                    switch (args.options.promoteAs) {
                        case 'HomePage':
                            requestOptions.url = `${args.options.webUrl}/_api/web/rootfolder`;
                            requestOptions.headers = {
                                'X-RequestDigest': requestDigest,
                                'X-HTTP-Method': 'MERGE',
                                'IF-MATCH': '*',
                                'content-type': 'application/json;odata=nometadata',
                                accept: 'application/json;odata=nometadata'
                            };
                            requestOptions.data = {
                                WelcomePage: `SitePages/${pageName}`
                            };
                            break;
                        case 'NewsPage':
                            requestOptions.url = `${args.options.webUrl}/_api/web/getfilebyid('${itemId}')/ListItemAllFields`;
                            requestOptions.headers = {
                                'X-RequestDigest': requestDigest,
                                'X-HTTP-Method': 'MERGE',
                                'IF-MATCH': '*',
                                'content-type': 'application/json;odata=nometadata',
                                accept: 'application/json;odata=nometadata'
                            };
                            requestOptions.data = {
                                PromotedState: 2,
                                FirstPublishedDate: new Date().toISOString().replace('Z', '')
                            };
                            break;
                        case 'Template':
                            requestOptions.url = `${args.options.webUrl}/_api/web/getfilebyid('${itemId}')/ListItemAllFields`;
                            requestOptions.headers = {
                                'X-RequestDigest': requestDigest,
                                'content-type': 'application/json;odata=nometadata',
                                accept: 'application/json;odata=nometadata'
                            };
                            break;
                    }
                    const res = yield request_1.default.post(requestOptions);
                    if (args.options.promoteAs === 'Template') {
                        let requestOptions = {
                            responseType: 'json',
                            url: `${args.options.webUrl}/_api/SitePages/Pages(${res.Id})/SavePageAsTemplate`,
                            headers: {
                                'X-RequestDigest': requestDigest,
                                'content-type': 'application/json;odata=nometadata',
                                'X-HTTP-Method': 'POST',
                                'IF-MATCH': '*',
                                accept: 'application/json;odata=nometadata'
                            }
                        };
                        const tmpl = yield request_1.default.post(requestOptions);
                        bannerImageUrl = tmpl.BannerImageUrl;
                        canvasContent1 = tmpl.CanvasContent1;
                        layoutWebpartsContent = tmpl.LayoutWebpartsContent;
                        pageId = tmpl.Id;
                        requestOptions = {
                            url: `${args.options.webUrl}/_api/web/getfilebyid('${tmpl.UniqueId}')/ListItemAllFields/SetCommentsDisabled(${!args.options.commentsEnabled})`,
                            headers: {
                                'X-RequestDigest': requestDigest,
                                'content-type': 'application/json;odata=nometadata',
                                accept: 'application/json;odata=nometadata'
                            },
                            responseType: 'json'
                        };
                        yield request_1.default.post(requestOptions);
                    }
                }
                requestOptions = {
                    responseType: 'json',
                    url: `${args.options.webUrl}/_api/SitePages/Pages(${pageId})/SavePage`,
                    headers: {
                        'X-RequestDigest': requestDigest,
                        'X-HTTP-Method': 'MERGE',
                        'IF-MATCH': '*',
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata'
                    },
                    data: {
                        BannerImageUrl: bannerImageUrl,
                        CanvasContent1: canvasContent1,
                        LayoutWebpartsContent: layoutWebpartsContent,
                        Description: pageDescription
                    }
                };
                yield request_1.default.post(requestOptions);
                if (args.options.promoteAs === 'Template') {
                    const requestOptions = {
                        responseType: 'json',
                        url: `${args.options.webUrl}/_api/SitePages/Pages(${pageId})/SavePageAsDraft`,
                        headers: {
                            'X-RequestDigest': requestDigest,
                            'X-HTTP-Method': 'MERGE',
                            'IF-MATCH': '*',
                            'content-type': 'application/json;odata=nometadata',
                            accept: 'application/json;odata=nometadata'
                        },
                        data: {
                            Title: fileNameWithoutExtension,
                            BannerImageUrl: bannerImageUrl,
                            CanvasContent1: canvasContent1,
                            LayoutWebpartsContent: layoutWebpartsContent,
                            Description: pageDescription
                        }
                    };
                    yield request_1.default.post(requestOptions);
                }
                requestOptions = {
                    url: `${args.options.webUrl}/_api/web/getfilebyid('${itemId}')/ListItemAllFields/SetCommentsDisabled(${!args.options.commentsEnabled})`,
                    headers: {
                        'X-RequestDigest': requestDigest,
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                yield request_1.default.post(requestOptions);
                if (!args.options.publish) {
                    if (args.options.promoteAs !== 'Template' && pageId) {
                        requestOptions = {
                            responseType: 'json',
                            url: `${args.options.webUrl}/_api/SitePages/Pages(${pageId})/SavePageAsDraft`,
                            headers: {
                                'content-type': 'application/json;odata=nometadata',
                                'accept': 'application/json;odata=nometadata'
                            },
                            data: {
                                Title: pageTitle,
                                Description: pageDescription,
                                BannerImageUrl: bannerImageUrl,
                                CanvasContent1: canvasContent1,
                                LayoutWebpartsContent: layoutWebpartsContent
                            }
                        };
                    }
                }
                else {
                    requestOptions = {
                        url: `${args.options.webUrl}/_api/web/getfilebyid('${itemId}')/CheckIn(comment=@a1,checkintype=@a2)?@a1='${encodeURIComponent(args.options.publishMessage || '').replace(/'/g, '%39')}'&@a2=1`,
                        headers: {
                            'X-RequestDigest': requestDigest,
                            'content-type': 'application/json;odata=nometadata',
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                }
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoPageAddCommand_instances = new WeakSet(), _SpoPageAddCommand_initTelemetry = function _SpoPageAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            layoutType: args.options.layoutType,
            promoteAs: args.options.promoteAs,
            commentsEnabled: args.options.commentsEnabled || false,
            publish: args.options.publish || false,
            publishMessage: typeof args.options.publishMessage !== 'undefined',
            description: typeof args.options.description !== 'undefined'
        });
    });
}, _SpoPageAddCommand_initOptions = function _SpoPageAddCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name <name>'
    }, {
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-t, --title [title]'
    }, {
        option: '-l, --layoutType [layoutType]',
        autocomplete: Page_1.supportedPageLayouts
    }, {
        option: '-p, --promoteAs [promoteAs]',
        autocomplete: Page_1.supportedPromoteAs
    }, {
        option: '--commentsEnabled'
    }, {
        option: '--publish'
    }, {
        option: '--publishMessage [publishMessage]'
    }, {
        option: '--description [description]'
    });
}, _SpoPageAddCommand_initValidators = function _SpoPageAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.layoutType &&
            Page_1.supportedPageLayouts.indexOf(args.options.layoutType) < 0) {
            return `${args.options.layoutType} is not a valid option for layoutType. Allowed values ${Page_1.supportedPageLayouts.join(', ')}`;
        }
        if (args.options.promoteAs &&
            Page_1.supportedPromoteAs.indexOf(args.options.promoteAs) < 0) {
            return `${args.options.promoteAs} is not a valid option for promoteAs. Allowed values ${Page_1.supportedPromoteAs.join(', ')}`;
        }
        if (args.options.promoteAs === 'HomePage' && args.options.layoutType !== 'Home') {
            return 'You can only promote home pages as site home page';
        }
        if (args.options.promoteAs === 'NewsPage' && args.options.layoutType && args.options.layoutType !== 'Article') {
            return 'You can only promote article pages as news article';
        }
        return true;
    }));
};
module.exports = new SpoPageAddCommand();
//# sourceMappingURL=page-add.js.map