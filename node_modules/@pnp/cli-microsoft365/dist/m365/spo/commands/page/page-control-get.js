"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPageControlGetCommand_instances, _SpoPageControlGetCommand_initOptions, _SpoPageControlGetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const pageMethods_1 = require("./pageMethods");
class SpoPageControlGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoPageControlGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPageControlGetCommand_instances, "m", _SpoPageControlGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPageControlGetCommand_instances, "m", _SpoPageControlGetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PAGE_CONTROL_GET;
    }
    get description() {
        return 'Gets information about the specific control on a modern page';
    }
    commandAction(logger, args) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let pageName = args.options.name;
            if (args.options.name.indexOf('.aspx') < 0) {
                pageName += '.aspx';
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/SitePages/Pages/GetByUrl('sitepages/${encodeURIComponent(pageName)}')`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                const clientSidePage = yield request_1.default.get(requestOptions);
                const canvasData = clientSidePage.CanvasContent1 ? JSON.parse(clientSidePage.CanvasContent1) : [];
                const control = canvasData.find(c => { var _a; return ((_a = c.id) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === args.options.id.toLowerCase(); });
                if (control) {
                    const controlData = {
                        id: control.id,
                        type: (0, pageMethods_1.getControlTypeDisplayName)(control.controlType || 0),
                        title: (_a = control.webPartData) === null || _a === void 0 ? void 0 : _a.title,
                        controlType: control.controlType,
                        order: control.position.sectionIndex,
                        controlData: Object.assign({}, control)
                    };
                    logger.log(controlData);
                }
                else {
                    if (this.verbose) {
                        logger.logToStderr(`Control with ID ${args.options.id} not found on page ${args.options.name}`);
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoPageControlGetCommand_instances = new WeakSet(), _SpoPageControlGetCommand_initOptions = function _SpoPageControlGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '-n, --name <name>'
    }, {
        option: '-u, --webUrl <webUrl>'
    });
}, _SpoPageControlGetCommand_initValidators = function _SpoPageControlGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
};
module.exports = new SpoPageControlGetCommand();
//# sourceMappingURL=page-control-get.js.map