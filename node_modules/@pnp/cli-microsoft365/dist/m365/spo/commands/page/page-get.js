"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPageGetCommand_instances, _SpoPageGetCommand_initOptions, _SpoPageGetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoPageGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoPageGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPageGetCommand_instances, "m", _SpoPageGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPageGetCommand_instances, "m", _SpoPageGetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PAGE_GET;
    }
    get description() {
        return 'Gets information about the specific modern page';
    }
    defaultProperties() {
        return ['commentsDisabled', 'numSections', 'numControls', 'title', 'layoutType'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving information about the page...`);
            }
            let pageName = args.options.name;
            if (args.options.name.indexOf('.aspx') < 0) {
                pageName += '.aspx';
            }
            try {
                let requestOptions = {
                    url: `${args.options.webUrl}/_api/web/getfilebyserverrelativeurl('${urlUtil_1.urlUtil.getServerRelativeSiteUrl(args.options.webUrl)}/SitePages/${encodeURIComponent(pageName)}')?$expand=ListItemAllFields/ClientSideApplicationId,ListItemAllFields/PageLayoutType,ListItemAllFields/CommentsDisabled`,
                    headers: {
                        'content-type': 'application/json;charset=utf-8',
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const page = yield request_1.default.get(requestOptions);
                if (page.ListItemAllFields.ClientSideApplicationId !== 'b6917cb1-93a0-4b97-a84d-7cf49975d4ec') {
                    throw `Page ${args.options.name} is not a modern page.`;
                }
                let pageItemData = {};
                pageItemData = Object.assign({}, page);
                pageItemData.commentsDisabled = page.ListItemAllFields.CommentsDisabled;
                pageItemData.title = page.ListItemAllFields.Title;
                if (page.ListItemAllFields.PageLayoutType) {
                    pageItemData.layoutType = page.ListItemAllFields.PageLayoutType;
                }
                if (!args.options.metadataOnly) {
                    requestOptions = {
                        url: `${args.options.webUrl}/_api/SitePages/Pages(${page.ListItemAllFields.Id})`,
                        headers: {
                            'content-type': 'application/json;charset=utf-8',
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const res = yield request_1.default.get(requestOptions);
                    const canvasData = JSON.parse(res.CanvasContent1);
                    pageItemData.canvasContentJson = res.CanvasContent1;
                    if (canvasData && canvasData.length > 0) {
                        pageItemData.numControls = canvasData.length;
                        const sections = [...new Set(canvasData.filter(c => c.position).map(c => c.position.zoneIndex))];
                        pageItemData.numSections = sections.length;
                    }
                }
                logger.log(pageItemData);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoPageGetCommand_instances = new WeakSet(), _SpoPageGetCommand_initOptions = function _SpoPageGetCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name <name>'
    }, {
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--metadataOnly'
    });
}, _SpoPageGetCommand_initValidators = function _SpoPageGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoPageGetCommand();
//# sourceMappingURL=page-get.js.map