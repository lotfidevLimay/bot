"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPageHeaderSetCommand_instances, _SpoPageHeaderSetCommand_initTelemetry, _SpoPageHeaderSetCommand_initOptions, _SpoPageHeaderSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoPageHeaderSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoPageHeaderSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPageHeaderSetCommand_instances, "m", _SpoPageHeaderSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoPageHeaderSetCommand_instances, "m", _SpoPageHeaderSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPageHeaderSetCommand_instances, "m", _SpoPageHeaderSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PAGE_HEADER_SET;
    }
    get description() {
        return 'Sets modern page header';
    }
    getExcludedOptionsWithUrls() {
        return ['imageUrl'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const noPageHeader = {
                "id": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
                "instanceId": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
                "title": "Title Region",
                "description": "Title Region Description",
                "serverProcessedContent": {
                    "htmlStrings": {},
                    "searchablePlainTexts": {},
                    "imageSources": {},
                    "links": {}
                },
                "dataVersion": "1.4",
                "properties": {
                    "title": "",
                    "imageSourceType": 4,
                    "layoutType": "NoImage",
                    "textAlignment": "Left",
                    "showTopicHeader": false,
                    "showPublishDate": false,
                    "topicHeader": ""
                }
            };
            const defaultPageHeader = {
                "id": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
                "instanceId": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
                "title": "Title Region",
                "description": "Title Region Description",
                "serverProcessedContent": {
                    "htmlStrings": {},
                    "searchablePlainTexts": {},
                    "imageSources": {},
                    "links": {}
                },
                "dataVersion": "1.4",
                "properties": {
                    "title": "",
                    "imageSourceType": 4,
                    "layoutType": "FullWidthImage",
                    "textAlignment": "Left",
                    "showTopicHeader": false,
                    "showPublishDate": false,
                    "topicHeader": ""
                }
            };
            const customPageHeader = {
                "id": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
                "instanceId": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
                "title": "Title Region",
                "description": "Title Region Description",
                "serverProcessedContent": {
                    "htmlStrings": {},
                    "searchablePlainTexts": {},
                    "imageSources": {
                        "imageSource": ""
                    },
                    "links": {},
                    "customMetadata": {
                        "imageSource": {
                            "siteId": "",
                            "webId": "",
                            "listId": "",
                            "uniqueId": ""
                        }
                    }
                },
                "dataVersion": "1.4",
                "properties": {
                    "title": "",
                    "imageSourceType": 2,
                    "layoutType": "FullWidthImage",
                    "textAlignment": "Left",
                    "showTopicHeader": false,
                    "showPublishDate": false,
                    "topicHeader": "",
                    "authors": [],
                    "altText": "",
                    "webId": "",
                    "siteId": "",
                    "listId": "",
                    "uniqueId": "",
                    "translateX": 0,
                    "translateY": 0
                }
            };
            let header = defaultPageHeader;
            let pageFullName = args.options.pageName.toLowerCase();
            if (pageFullName.indexOf('.aspx') < 0) {
                pageFullName += '.aspx';
            }
            let canvasContent = "";
            let bannerImageUrl = "";
            let description = "";
            let title = "";
            let authorByline = args.options.authors ? args.options.authors.split(',').map(a => a.trim()) : [];
            let topicHeader = args.options.topicHeader || "";
            if (this.verbose) {
                logger.logToStderr(`Retrieving information about the page...`);
            }
            try {
                let requestOptions = {
                    url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageFullName)}')?$select=IsPageCheckedOutToCurrentUser,Title`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const page = yield request_1.default.get(requestOptions);
                title = page.Title;
                let pageData;
                if (page.IsPageCheckedOutToCurrentUser) {
                    const requestOptions = {
                        url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageFullName)}')?$expand=ListItemAllFields`,
                        headers: {
                            'accept': 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    pageData = yield request_1.default.get(requestOptions);
                }
                else {
                    const requestOptions = {
                        url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageFullName)}')/checkoutpage`,
                        headers: {
                            'accept': 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    pageData = yield request_1.default.post(requestOptions);
                }
                switch (args.options.type) {
                    case 'None':
                        header = noPageHeader;
                        break;
                    case 'Default':
                        header = defaultPageHeader;
                        break;
                    case 'Custom':
                        header = customPageHeader;
                        break;
                    default:
                        header = defaultPageHeader;
                }
                if (pageData) {
                    canvasContent = pageData.CanvasContent1;
                    authorByline = authorByline.length > 0 ? authorByline : pageData.AuthorByline;
                    bannerImageUrl = pageData.BannerImageUrl;
                    description = pageData.Description;
                    title = pageData.Title;
                    topicHeader = topicHeader || pageData.TopicHeader || "";
                }
                header.properties.title = title;
                header.properties.textAlignment = args.options.textAlignment || 'Left';
                header.properties.showTopicHeader = args.options.showTopicHeader || false;
                header.properties.topicHeader = args.options.topicHeader || '';
                header.properties.showPublishDate = args.options.showPublishDate || false;
                if (args.options.type !== 'None') {
                    header.properties.layoutType = args.options.layout || 'FullWidthImage';
                }
                if (args.options.type === 'Custom') {
                    header.serverProcessedContent.imageSources = {
                        imageSource: args.options.imageUrl || ''
                    };
                    const properties = header.properties;
                    properties.altText = args.options.altText || '';
                    properties.translateX = args.options.translateX || 0;
                    properties.translateY = args.options.translateY || 0;
                    header.properties = properties;
                    if (!args.options.imageUrl) {
                        header.serverProcessedContent.customMetadata = {
                            imageSource: {
                                siteId: '',
                                webId: '',
                                listId: '',
                                uniqueId: ''
                            }
                        };
                        properties.listId = '';
                        properties.siteId = '';
                        properties.uniqueId = '';
                        properties.webId = '';
                        header.properties = properties;
                    }
                    else {
                        const res = yield Promise.all([
                            this.getSiteId(args.options.webUrl, this.verbose, logger),
                            this.getWebId(args.options.webUrl, this.verbose, logger),
                            this.getImageInfo(args.options.webUrl, args.options.imageUrl, this.verbose, logger)
                        ]);
                        header.serverProcessedContent.customMetadata = {
                            imageSource: {
                                siteId: res[0].Id,
                                webId: res[1].Id,
                                listId: res[2].ListId,
                                uniqueId: res[2].UniqueId
                            }
                        };
                        const properties = header.properties;
                        properties.listId = res[2].ListId;
                        properties.siteId = res[0].Id;
                        properties.uniqueId = res[2].UniqueId;
                        properties.webId = res[1].Id;
                        header.properties = properties;
                    }
                }
                const requestBody = {
                    LayoutWebpartsContent: JSON.stringify([header])
                };
                if (title) {
                    requestBody.Title = title;
                }
                if (topicHeader) {
                    requestBody.TopicHeader = topicHeader;
                }
                if (description) {
                    requestBody.Description = description;
                }
                if (authorByline) {
                    requestBody.AuthorByline = authorByline;
                }
                if (bannerImageUrl) {
                    requestBody.BannerImageUrl = bannerImageUrl;
                }
                if (canvasContent) {
                    requestBody.CanvasContent1 = canvasContent;
                }
                requestOptions = {
                    url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageFullName)}')/SavePageAsDraft`,
                    headers: {
                        'X-HTTP-Method': 'MERGE',
                        'IF-MATCH': '*',
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata'
                    },
                    data: requestBody,
                    responseType: 'json'
                };
                return request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getSiteId(siteUrl, verbose, logger) {
        if (verbose) {
            logger.logToStderr(`Retrieving information about the site collection...`);
        }
        const requestOptions = {
            url: `${siteUrl}/_api/site?$select=Id`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    getWebId(siteUrl, verbose, logger) {
        if (verbose) {
            logger.logToStderr(`Retrieving information about the site...`);
        }
        const requestOptions = {
            url: `${siteUrl}/_api/web?$select=Id`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    getImageInfo(siteUrl, imageUrl, verbose, logger) {
        if (verbose) {
            logger.logToStderr(`Retrieving information about the header image...`);
        }
        const requestOptions = {
            url: `${siteUrl}/_api/web/getfilebyserverrelativeurl('${encodeURIComponent(imageUrl)}')?$select=ListId,UniqueId`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
}
_SpoPageHeaderSetCommand_instances = new WeakSet(), _SpoPageHeaderSetCommand_initTelemetry = function _SpoPageHeaderSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            altText: typeof args.options.altText !== 'undefined',
            authors: typeof args.options.authors !== 'undefined',
            imageUrl: typeof args.options.imageUrl !== 'undefined',
            topicHeader: typeof args.options.topicHeader !== 'undefined',
            layout: args.options.layout,
            showTopicHeader: args.options.showTopicHeader,
            showPublishDate: args.options.showPublishDate,
            textAlignment: args.options.textAlignment,
            translateX: typeof args.options.translateX !== 'undefined',
            translateY: typeof args.options.translateY !== 'undefined',
            type: args.options.type
        });
    });
}, _SpoPageHeaderSetCommand_initOptions = function _SpoPageHeaderSetCommand_initOptions() {
    this.options.unshift({
        option: '-n, --pageName <pageName>'
    }, {
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-t, --type [type]',
        autocomplete: ['None', 'Default', 'Custom']
    }, {
        option: '--imageUrl [imageUrl]'
    }, {
        option: '--altText [altText]'
    }, {
        option: '-x, --translateX [translateX]'
    }, {
        option: '-y, --translateY [translateY]'
    }, {
        option: '--layout [layout]',
        autocomplete: ['FullWidthImage', 'NoImage', 'ColorBlock', 'CutInShape']
    }, {
        option: '--textAlignment [textAlignment]',
        autocomplete: ['Left', 'Center']
    }, {
        option: '--showTopicHeader'
    }, {
        option: '--showPublishDate'
    }, {
        option: '--topicHeader [topicHeader]'
    }, {
        option: '--authors [authors]'
    });
}, _SpoPageHeaderSetCommand_initValidators = function _SpoPageHeaderSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.type &&
            args.options.type !== 'None' &&
            args.options.type !== 'Default' &&
            args.options.type !== 'Custom') {
            return `${args.options.type} is not a valid type value. Allowed values None|Default|Custom`;
        }
        if (args.options.translateX && isNaN(args.options.translateX)) {
            return `${args.options.translateX} is not a valid number`;
        }
        if (args.options.translateY && isNaN(args.options.translateY)) {
            return `${args.options.translateY} is not a valid number`;
        }
        if (args.options.layout &&
            args.options.layout !== 'FullWidthImage' &&
            args.options.layout !== 'NoImage' &&
            args.options.layout !== 'ColorBlock' &&
            args.options.layout !== 'CutInShape') {
            return `${args.options.layout} is not a valid layout value. Allowed values FullWidthImage|NoImage|ColorBlock|CutInShape`;
        }
        if (args.options.textAlignment &&
            args.options.textAlignment !== 'Left' &&
            args.options.textAlignment !== 'Center') {
            return `${args.options.textAlignment} is not a valid textAlignment value. Allowed values Left|Center`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
};
module.exports = new SpoPageHeaderSetCommand();
//# sourceMappingURL=page-header-set.js.map