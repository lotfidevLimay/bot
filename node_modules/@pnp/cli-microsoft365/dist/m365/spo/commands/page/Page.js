"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Page = exports.supportedPromoteAs = exports.supportedPageLayouts = void 0;
const request_1 = require("../../../../request");
const urlUtil_1 = require("../../../../utils/urlUtil");
const clientsidepages_1 = require("./clientsidepages");
const pageMethods_1 = require("./pageMethods");
exports.supportedPageLayouts = ['Article', 'Home', 'SingleWebPartAppPage', 'RepostPage', 'HeaderlessSearchResults', 'Spaces', 'Topic'];
exports.supportedPromoteAs = ['HomePage', 'NewsPage', 'Template'];
class Page {
    static getPage(name, webUrl, logger, debug, verbose) {
        return new Promise((resolve, reject) => {
            if (verbose) {
                logger.logToStderr(`Retrieving information about the page...`);
            }
            const pageName = this.getPageNameWithExtension(name);
            const requestOptions = {
                url: `${webUrl}/_api/web/getfilebyserverrelativeurl('${urlUtil_1.urlUtil.getServerRelativeSiteUrl(webUrl)}/SitePages/${encodeURIComponent(pageName)}')?$expand=ListItemAllFields/ClientSideApplicationId`,
                headers: {
                    'content-type': 'application/json;charset=utf-8',
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            request_1.default
                .get(requestOptions)
                .then((res) => {
                if (res.ListItemAllFields.ClientSideApplicationId !== 'b6917cb1-93a0-4b97-a84d-7cf49975d4ec') {
                    reject(`Page ${name} is not a modern page.`);
                    return;
                }
                try {
                    resolve(clientsidepages_1.ClientSidePage.fromHtml(res.ListItemAllFields.CanvasContent1));
                }
                catch (e) {
                    reject(e);
                }
            }, (error) => {
                reject(error);
            });
        });
    }
    static checkout(name, webUrl, logger, debug, verbose) {
        return new Promise((resolve, reject) => {
            if (verbose) {
                logger.log(`Checking out ${name} page...`);
            }
            const pageName = this.getPageNameWithExtension(name);
            const requestOptions = {
                url: `${webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageName)}')/checkoutpage`,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            request_1.default
                .post(requestOptions)
                .then((pageData) => {
                if (!pageData) {
                    reject(`Page ${name} information not retrieved with the checkout`);
                    return;
                }
                if (verbose) {
                    logger.log(`Page ${name} is now checked out`);
                }
                resolve(pageData);
            }, (error) => {
                reject(error);
            });
        });
    }
    static getControlsInformation(control, isJSONOutput) {
        // remove the column property to be able to serialize the object to JSON
        delete control.column;
        if (!isJSONOutput) {
            control.controlType = (0, pageMethods_1.getControlTypeDisplayName)(control.controlType);
        }
        if (!control.dynamicDataPaths) {
            delete control.dynamicDataPaths;
        }
        if (!control.dynamicDataValues) {
            delete control.dynamicDataValues;
        }
        return control;
    }
    static getColumnsInformation(column, isJSONOutput) {
        const output = {
            factor: column.factor,
            order: column.order
        };
        if (isJSONOutput) {
            output.dataVersion = column.dataVersion;
            output.jsonData = column.jsonData;
        }
        return output;
    }
    static getSectionInformation(section, isJSONOutput) {
        return {
            order: section.order,
            columns: section.columns.map(column => this.getColumnsInformation(column, isJSONOutput))
        };
    }
    static getPageNameWithExtension(name) {
        let pageName = name;
        if (pageName.indexOf('.aspx') < 0) {
            pageName += '.aspx';
        }
        return pageName;
    }
}
exports.Page = Page;
//# sourceMappingURL=Page.js.map