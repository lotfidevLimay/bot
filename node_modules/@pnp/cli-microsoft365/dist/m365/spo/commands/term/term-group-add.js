"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoTermGroupAddCommand_instances, _SpoTermGroupAddCommand_initTelemetry, _SpoTermGroupAddCommand_initOptions, _SpoTermGroupAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoTermGroupAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoTermGroupAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoTermGroupAddCommand_instances, "m", _SpoTermGroupAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoTermGroupAddCommand_instances, "m", _SpoTermGroupAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoTermGroupAddCommand_instances, "m", _SpoTermGroupAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.TERM_GROUP_ADD;
    }
    get description() {
        return 'Adds taxonomy term group';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let formDigest = '';
            let termGroup;
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                const res = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                formDigest = res.FormDigestValue;
                if (this.verbose) {
                    logger.logToStderr(`Getting taxonomy term store...`);
                }
                const requestOptionsPost = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': res.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="4" ObjectPathId="3" /><ObjectIdentityQuery Id="5" ObjectPathId="3" /><ObjectPath Id="7" ObjectPathId="6" /><ObjectIdentityQuery Id="8" ObjectPathId="6" /><Query Id="9" ObjectPathId="6"><Query SelectAllProperties="true"><Properties /></Query></Query></Actions><ObjectPaths><StaticMethod Id="3" Name="GetTaxonomySession" TypeId="{981cbc68-9edc-4f8d-872f-71146fcbb84f}" /><Method Id="6" ParentId="3" Name="GetDefaultSiteCollectionTermStore" /></ObjectPaths></Request>`
                };
                const processQuery = yield request_1.default.post(requestOptionsPost);
                const json = JSON.parse(processQuery);
                const response = json[0];
                if (response.ErrorInfo) {
                    throw response.ErrorInfo.ErrorMessage;
                }
                const termStore = json[json.length - 1];
                const termGroupId = args.options.id || (0, uuid_1.v4)();
                if (this.verbose) {
                    logger.logToStderr(`Adding taxonomy term group...`);
                }
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': formDigest
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="14" ObjectPathId="13" /><ObjectIdentityQuery Id="15" ObjectPathId="13" /><Query Id="16" ObjectPathId="13"><Query SelectAllProperties="false"><Properties><Property Name="Name" ScalarProperty="true" /><Property Name="Id" ScalarProperty="true" /><Property Name="Description" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Method Id="13" ParentId="6" Name="CreateGroup"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.name)}</Parameter><Parameter Type="Guid">{${termGroupId}}</Parameter></Parameters></Method><Identity Id="6" Name="${termStore._ObjectIdentity_}" /></ObjectPaths></Request>`
                };
                const terms = yield request_1.default.post(requestOptions);
                const json2 = JSON.parse(terms);
                const response2 = json2[0];
                if (response2.ErrorInfo) {
                    throw response2.ErrorInfo.ErrorMessage;
                }
                termGroup = json2[json2.length - 1];
                let termGroups = undefined;
                if (args.options.description) {
                    if (this.verbose) {
                        logger.logToStderr(`Setting taxonomy term group description...`);
                    }
                    const requestOptionsQuery = {
                        url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                        headers: {
                            'X-RequestDigest': formDigest
                        },
                        data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><SetProperty Id="51" ObjectPathId="45" Name="Description"><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.description)}</Parameter></SetProperty></Actions><ObjectPaths><Identity Id="45" Name="${termGroup._ObjectIdentity_}" /></ObjectPaths></Request>`
                    };
                    termGroups = yield request_1.default.post(requestOptionsQuery);
                }
                if (termGroups) {
                    const json = JSON.parse(termGroups);
                    const response = json[0];
                    if (response.ErrorInfo) {
                        throw response.ErrorInfo.ErrorMessage;
                    }
                }
                delete termGroup._ObjectIdentity_;
                delete termGroup._ObjectType_;
                termGroup.Id = termGroup.Id.replace('/Guid(', '').replace(')/', '');
                termGroup.Description = args.options.description || '';
                logger.log(termGroup);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoTermGroupAddCommand_instances = new WeakSet(), _SpoTermGroupAddCommand_initTelemetry = function _SpoTermGroupAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            description: typeof args.options.id !== 'undefined',
            id: typeof args.options.id !== 'undefined'
        });
    });
}, _SpoTermGroupAddCommand_initOptions = function _SpoTermGroupAddCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name <name>'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '-d, --description [description]'
    });
}, _SpoTermGroupAddCommand_initValidators = function _SpoTermGroupAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id) {
            if (!validation_1.validation.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
        }
        return true;
    }));
};
module.exports = new SpoTermGroupAddCommand();
//# sourceMappingURL=term-group-add.js.map