"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPropertyBagListCommand_instances, _SpoPropertyBagListCommand_initTelemetry, _SpoPropertyBagListCommand_initOptions, _SpoPropertyBagListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const commands_1 = require("../../commands");
const propertybag_base_1 = require("./propertybag-base");
class SpoPropertyBagListCommand extends propertybag_base_1.SpoPropertyBagBaseCommand {
    constructor() {
        super();
        _SpoPropertyBagListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPropertyBagListCommand_instances, "m", _SpoPropertyBagListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoPropertyBagListCommand_instances, "m", _SpoPropertyBagListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPropertyBagListCommand_instances, "m", _SpoPropertyBagListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PROPERTYBAG_LIST;
    }
    get description() {
        return 'Gets property bag values';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const contextResponse = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                this.formDigestValue = contextResponse.FormDigestValue;
                const identityResp = yield spo_1.spo.getCurrentWebIdentity(args.options.webUrl, this.formDigestValue);
                let propertyBagData;
                const opts = args.options;
                if (opts.folder) {
                    propertyBagData = yield this.getFolderPropertyBag(identityResp, opts.webUrl, opts.folder, logger);
                }
                else {
                    propertyBagData = yield this.getWebPropertyBag(identityResp, opts.webUrl, logger);
                }
                logger.log(this.formatOutput(propertyBagData));
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
    /**
     * The property bag data returned from the client.svc/ProcessQuery response
     * has to be formatted before displayed since the key, value objects
     * carry extra information.
     * @param propertyBag client.svc property bag javascript object
     */
    formatOutput(propertyBag) {
        const result = [];
        const keys = Object.keys(propertyBag);
        for (let i = 0; i < keys.length; i++) {
            if (keys[i] === '_ObjectType_') {
                // this is system data, do not include it
                continue;
            }
            const formattedProp = this.formatProperty(keys[i], propertyBag[keys[i]]);
            result.push(formattedProp);
        }
        return result;
    }
}
_SpoPropertyBagListCommand_instances = new WeakSet(), _SpoPropertyBagListCommand_initTelemetry = function _SpoPropertyBagListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            folder: typeof args.options.folder !== 'undefined'
        });
    });
}, _SpoPropertyBagListCommand_initOptions = function _SpoPropertyBagListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-f, --folder [folder]'
    });
}, _SpoPropertyBagListCommand_initValidators = function _SpoPropertyBagListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoPropertyBagListCommand();
//# sourceMappingURL=propertybag-list.js.map