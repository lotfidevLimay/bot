"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoPropertyBagSetCommand_instances, _SpoPropertyBagSetCommand_initTelemetry, _SpoPropertyBagSetCommand_initOptions, _SpoPropertyBagSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const commands_1 = require("../../commands");
const propertybag_base_1 = require("./propertybag-base");
class SpoPropertyBagSetCommand extends propertybag_base_1.SpoPropertyBagBaseCommand {
    constructor() {
        super();
        _SpoPropertyBagSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoPropertyBagSetCommand_instances, "m", _SpoPropertyBagSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoPropertyBagSetCommand_instances, "m", _SpoPropertyBagSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoPropertyBagSetCommand_instances, "m", _SpoPropertyBagSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.PROPERTYBAG_SET;
    }
    get description() {
        return 'Sets the value of the specified property in the property bag. Adds the property if it does not exist';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const contextResponse = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                this.formDigestValue = contextResponse.FormDigestValue;
                let identityResp = yield spo_1.spo.getCurrentWebIdentity(args.options.webUrl, this.formDigestValue);
                const webIdentityResp = identityResp;
                // Check if web no script enabled or not
                // Cannot set property bag value if no script is enabled
                const isNoScriptSite = yield this.isNoScriptSite(identityResp, args.options, logger);
                if (isNoScriptSite) {
                    throw 'Site has NoScript enabled, and setting property bag values is not supported';
                }
                const opts = args.options;
                if (opts.folder) {
                    // get the folder guid instead of the web guid
                    identityResp = yield spo_1.spo.getFolderIdentity(webIdentityResp.objectIdentity, opts.webUrl, opts.folder, this.formDigestValue);
                }
                yield this.setProperty(identityResp, args.options, logger);
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
    setProperty(identityResp, options, logger) {
        return propertybag_base_1.SpoPropertyBagBaseCommand.setProperty(options.key, options.value, options.webUrl, this.formDigestValue, identityResp, logger, this.debug, options.folder);
    }
    isNoScriptSite(webIdentityResp, options, logger) {
        return propertybag_base_1.SpoPropertyBagBaseCommand.isNoScriptSite(options.webUrl, this.formDigestValue, webIdentityResp, logger, this.debug);
    }
}
_SpoPropertyBagSetCommand_instances = new WeakSet(), _SpoPropertyBagSetCommand_initTelemetry = function _SpoPropertyBagSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            folder: typeof args.options.folder !== 'undefined'
        });
    });
}, _SpoPropertyBagSetCommand_initOptions = function _SpoPropertyBagSetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-k, --key <key>'
    }, {
        option: '-v, --value <value>'
    }, {
        option: '-f, --folder [folder]'
    });
}, _SpoPropertyBagSetCommand_initValidators = function _SpoPropertyBagSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoPropertyBagSetCommand();
//# sourceMappingURL=propertybag-set.js.map