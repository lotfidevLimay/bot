"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoCustomActionListCommand_instances, _SpoCustomActionListCommand_initTelemetry, _SpoCustomActionListCommand_initOptions, _SpoCustomActionListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoCustomActionListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoCustomActionListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoCustomActionListCommand_instances, "m", _SpoCustomActionListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoCustomActionListCommand_instances, "m", _SpoCustomActionListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoCustomActionListCommand_instances, "m", _SpoCustomActionListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.CUSTOMACTION_LIST;
    }
    get description() {
        return 'Lists all user custom actions at the given scope';
    }
    defaultProperties() {
        return ['Name', 'Location', 'Scope', 'Id'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const scope = args.options.scope ? args.options.scope : 'All';
                if (this.debug) {
                    logger.logToStderr(`Attempt to get custom actions list with scope: ${scope}`);
                    logger.logToStderr('');
                }
                let customActions;
                if (scope && scope.toLowerCase() !== "all") {
                    customActions = yield this.getCustomActions(args.options);
                }
                else {
                    customActions = yield this.searchAllScopes(args.options);
                }
                if (customActions.length === 0) {
                    if (this.verbose) {
                        logger.logToStderr(`Custom actions not found`);
                    }
                }
                else {
                    if (args.options.output !== 'json') {
                        customActions.forEach(a => a.Scope = this.humanizeScope(a.Scope));
                    }
                    logger.log(customActions);
                }
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
    getCustomActions(options) {
        const requestOptions = {
            url: `${options.url}/_api/${options.scope}/UserCustomActions`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return new Promise((resolve, reject) => {
            request_1.default
                .get(requestOptions)
                .then((response) => {
                resolve(response.value);
            })
                .catch((error) => {
                reject(error);
            });
        });
    }
    /**
     * Two REST GET requests with `web` and `site` scope are sent.
     * The results are combined in one array.
     */
    searchAllScopes(options) {
        return new Promise((resolve, reject) => {
            options.scope = "Web";
            let webCustomActions = [];
            this
                .getCustomActions(options)
                .then((customActions) => {
                webCustomActions = customActions;
                options.scope = "Site";
                return this.getCustomActions(options);
            })
                .then((siteCustomActions) => {
                resolve(siteCustomActions.concat(webCustomActions));
            }, (err) => {
                reject(err);
            });
        });
    }
    humanizeScope(scope) {
        switch (scope) {
            case 2:
                return "Site";
            case 3:
                return "Web";
        }
        return `${scope}`;
    }
}
_SpoCustomActionListCommand_instances = new WeakSet(), _SpoCustomActionListCommand_initTelemetry = function _SpoCustomActionListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            scope: args.options.scope || 'All'
        });
    });
}, _SpoCustomActionListCommand_initOptions = function _SpoCustomActionListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '-s, --scope [scope]',
        autocomplete: ['Site', 'Web', 'All']
    });
}, _SpoCustomActionListCommand_initValidators = function _SpoCustomActionListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (validation_1.validation.isValidSharePointUrl(args.options.url) !== true) {
            return 'Missing required option url';
        }
        if (args.options.scope) {
            if (args.options.scope !== 'Site' &&
                args.options.scope !== 'Web' &&
                args.options.scope !== 'All') {
                return `${args.options.scope} is not a valid custom action scope. Allowed values are Site|Web|All`;
            }
        }
        return true;
    }));
};
module.exports = new SpoCustomActionListCommand();
//# sourceMappingURL=customaction-list.js.map