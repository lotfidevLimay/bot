"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoCustomActionRemoveCommand_instances, _SpoCustomActionRemoveCommand_initTelemetry, _SpoCustomActionRemoveCommand_initOptions, _SpoCustomActionRemoveCommand_initValidators, _SpoCustomActionRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoCustomActionRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoCustomActionRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoCustomActionRemoveCommand_instances, "m", _SpoCustomActionRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoCustomActionRemoveCommand_instances, "m", _SpoCustomActionRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoCustomActionRemoveCommand_instances, "m", _SpoCustomActionRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoCustomActionRemoveCommand_instances, "m", _SpoCustomActionRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.CUSTOMACTION_REMOVE;
    }
    get description() {
        return 'Removes the specified custom action';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeCustomAction = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    let customAction;
                    if (args.options.scope && args.options.scope.toLowerCase() !== "all") {
                        customAction = yield this.removeScopedCustomAction(args.options);
                    }
                    else {
                        customAction = yield this.searchAllScopes(args.options);
                    }
                    if (this.verbose) {
                        if (customAction && customAction["odata.null"] === true) {
                            logger.logToStderr(`Custom action with id ${args.options.id} not found`);
                        }
                    }
                }
                catch (err) {
                    this.handleRejectedPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeCustomAction();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the ${args.options.id} user custom action?`
                });
                if (result.continue) {
                    yield removeCustomAction();
                }
            }
        });
    }
    getCustomActionId(options) {
        if (options.id) {
            return Promise.resolve(options.id);
        }
        const customActionRequestOptions = {
            url: `${options.url}/_api/${options.scope}/UserCustomActions?$filter=Title eq '${encodeURIComponent(options.title)}'`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(customActionRequestOptions)
            .then((res) => {
            if (res.value.length === 1) {
                return Promise.resolve(res.value[0].Id);
            }
            if (res.value.length === 0) {
                return Promise.reject(`No user custom action with title '${options.title}' found`);
            }
            return Promise.reject(`Multiple user custom actions with title '${options.title}' found. Please disambiguate using IDs: ${res.value.map(a => a.Id).join(', ')}`);
        });
    }
    removeScopedCustomAction(options) {
        return this
            .getCustomActionId(options)
            .then((customActionId) => {
            const requestOptions = {
                url: `${options.url}/_api/${options.scope}/UserCustomActions('${encodeURIComponent(customActionId)}')')`,
                headers: {
                    accept: 'application/json;odata=nometadata',
                    'X-HTTP-Method': 'DELETE'
                },
                responseType: 'json'
            };
            return request_1.default.post(requestOptions);
        });
    }
    /**
     * Remove request with `web` scope is send first.
     * If custom action not found then
     * another get request is send with `site` scope.
     */
    searchAllScopes(options) {
        return new Promise((resolve, reject) => {
            options.scope = "Web";
            this
                .removeScopedCustomAction(options)
                .then((webResult) => {
                if (webResult === undefined) {
                    return resolve(webResult);
                }
                options.scope = "Site";
                this
                    .removeScopedCustomAction(options)
                    .then((siteResult) => {
                    return resolve(siteResult);
                }, (err) => {
                    reject(err);
                });
            }, (err) => {
                reject(err);
            });
        });
    }
}
_SpoCustomActionRemoveCommand_instances = new WeakSet(), _SpoCustomActionRemoveCommand_initTelemetry = function _SpoCustomActionRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            scope: args.options.scope || 'All',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SpoCustomActionRemoveCommand_initOptions = function _SpoCustomActionRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-t, --title [title]'
    }, {
        option: '-u, --url <url>'
    }, {
        option: '-s, --scope [scope]',
        autocomplete: ['Site', 'Web', 'All']
    }, {
        option: '--confirm'
    });
}, _SpoCustomActionRemoveCommand_initValidators = function _SpoCustomActionRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id && validation_1.validation.isValidGuid(args.options.id) === false) {
            return `${args.options.id} is not valid. Custom action Id (GUID) expected.`;
        }
        if (validation_1.validation.isValidSharePointUrl(args.options.url) !== true) {
            return 'Missing required option url';
        }
        if (args.options.scope) {
            if (args.options.scope !== 'Site' &&
                args.options.scope !== 'Web' &&
                args.options.scope !== 'All') {
                return `${args.options.scope} is not a valid custom action scope. Allowed values are Site|Web|All`;
            }
        }
        return true;
    }));
}, _SpoCustomActionRemoveCommand_initOptionSets = function _SpoCustomActionRemoveCommand_initOptionSets() {
    this.optionSets.push(['id', 'title']);
};
module.exports = new SpoCustomActionRemoveCommand();
//# sourceMappingURL=customaction-remove.js.map