"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoCustomActionClearCommand_instances, _SpoCustomActionClearCommand_initTelemetry, _SpoCustomActionClearCommand_initOptions, _SpoCustomActionClearCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoCustomActionClearCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoCustomActionClearCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoCustomActionClearCommand_instances, "m", _SpoCustomActionClearCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoCustomActionClearCommand_instances, "m", _SpoCustomActionClearCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoCustomActionClearCommand_instances, "m", _SpoCustomActionClearCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.CUSTOMACTION_CLEAR;
    }
    get description() {
        return 'Deletes all custom actions in the collection';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const clearCustomActions = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (args.options.scope && args.options.scope.toLowerCase() !== "all") {
                        yield this.clearScopedCustomActions(args.options);
                    }
                    else {
                        yield this.clearAllScopes(args.options);
                    }
                }
                catch (err) {
                    this.handleRejectedPromise(err);
                }
            });
            if (args.options.confirm) {
                yield clearCustomActions();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to clear all the user custom actions with scope ${chalk.yellow(args.options.scope || 'All')}?`
                });
                if (result.continue) {
                    yield clearCustomActions();
                }
            }
        });
    }
    clearScopedCustomActions(options) {
        const requestOptions = {
            url: `${options.url}/_api/${options.scope}/UserCustomActions/clear`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default.post(requestOptions);
    }
    /**
     * Clear request with `web` scope is send first.
     * Another clear request is send with `site` scope after.
     */
    clearAllScopes(options) {
        return new Promise((resolve, reject) => {
            options.scope = "Web";
            this
                .clearScopedCustomActions(options)
                .then(() => {
                options.scope = "Site";
                return this.clearScopedCustomActions(options);
            })
                .then(() => {
                return resolve();
            }, (err) => {
                reject(err);
            });
        });
    }
}
_SpoCustomActionClearCommand_instances = new WeakSet(), _SpoCustomActionClearCommand_initTelemetry = function _SpoCustomActionClearCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            scope: args.options.scope || 'All',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SpoCustomActionClearCommand_initOptions = function _SpoCustomActionClearCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '-s, --scope [scope]',
        autocomplete: ['Site', 'Web', 'All']
    }, {
        option: '--confirm'
    });
}, _SpoCustomActionClearCommand_initValidators = function _SpoCustomActionClearCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidUrl = validation_1.validation.isValidSharePointUrl(args.options.url);
        if (typeof isValidUrl === 'string') {
            return isValidUrl;
        }
        if (args.options.scope &&
            args.options.scope !== 'Site' &&
            args.options.scope !== 'Web' &&
            args.options.scope !== 'All') {
            return `${args.options.scope} is not a valid custom action scope. Allowed values are Site|Web|All`;
        }
        return true;
    }));
};
module.exports = new SpoCustomActionClearCommand();
//# sourceMappingURL=customaction-clear.js.map