"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoMailSendCommand_instances, _SpoMailSendCommand_initTelemetry, _SpoMailSendCommand_initOptions, _SpoMailSendCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoMailSendCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoMailSendCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoMailSendCommand_instances, "m", _SpoMailSendCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoMailSendCommand_instances, "m", _SpoMailSendCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoMailSendCommand_instances, "m", _SpoMailSendCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.MAIL_SEND;
    }
    get description() {
        return 'Sends an e-mail from SharePoint';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                properties: {
                    __metadata: { "type": "SP.Utilities.EmailProperties" },
                    Body: args.options.body,
                    Subject: args.options.subject,
                    To: { results: args.options.to.replace(/\s+/g, '').split(',') }
                }
            };
            if (args.options.from && args.options.from.length > 0) {
                params.properties.From = args.options.from;
            }
            if (args.options.cc && args.options.cc.length > 0) {
                params.properties.CC = { results: args.options.cc.replace(/\s+/g, '').split(',') };
            }
            if (args.options.bcc && args.options.bcc.length > 0) {
                params.properties.BCC = { results: args.options.bcc.replace(/\s+/g, '').split(',') };
            }
            if (args.options.additionalHeaders) {
                const h = JSON.parse(args.options.additionalHeaders);
                params.properties.AdditionalHeaders = {
                    __metadata: { "type": "Collection(SP.KeyValue)" },
                    results: Object.keys(h).map(key => {
                        return {
                            __metadata: {
                                type: 'SP.KeyValue'
                            },
                            Key: key,
                            Value: h[key],
                            ValueType: 'Edm.String'
                        };
                    })
                };
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/SP.Utilities.Utility.SendEmail`,
                headers: {
                    'content-type': 'application/json;odata=verbose'
                },
                responseType: 'json',
                data: params
            };
            try {
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoMailSendCommand_instances = new WeakSet(), _SpoMailSendCommand_initTelemetry = function _SpoMailSendCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            from: typeof args.options.from !== 'undefined',
            cc: typeof args.options.cc !== 'undefined',
            bcc: typeof args.options.bcc !== 'undefined',
            additionalHeaders: typeof args.options.additionalHeaders !== 'undefined'
        });
    });
}, _SpoMailSendCommand_initOptions = function _SpoMailSendCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--to <to>'
    }, {
        option: '--subject <subject>'
    }, {
        option: '--body <body>'
    }, {
        option: '--from [from]'
    }, {
        option: '--cc [cc]'
    }, {
        option: '--bcc [bcc]'
    }, {
        option: '--additionalHeaders [additionalHeaders]'
    });
}, _SpoMailSendCommand_initValidators = function _SpoMailSendCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoMailSendCommand();
//# sourceMappingURL=mail-send.js.map