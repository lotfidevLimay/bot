"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoContentTypeHubGetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.CONTENTTYPEHUB_GET;
    }
    get description() {
        return 'Returns the URL of the SharePoint Content Type Hub of the Tenant';
    }
    commandAction(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                const reqDigest = yield spo_1.spo.getRequestDigest(spoUrl);
                if (this.verbose) {
                    logger.logToStderr(`Retrieving Content Type Hub URL`);
                }
                const requestOptions = {
                    url: `${spoUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': reqDigest.FormDigestValue
                    },
                    data: `<Request xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009" AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}">
<Actions>
  <ObjectPath Id="2" ObjectPathId="1" />
  <ObjectIdentityQuery Id="3" ObjectPathId="1" />
  <ObjectPath Id="5" ObjectPathId="4" />
  <ObjectIdentityQuery Id="6" ObjectPathId="4" />
  <Query Id="7" ObjectPathId="4">
    <Query SelectAllProperties="false">
      <Properties>
        <Property Name="ContentTypePublishingHub" ScalarProperty="true" />
      </Properties>
    </Query>
  </Query>
</Actions>
<ObjectPaths>
  <StaticMethod Id="1" Name="GetTaxonomySession" TypeId="{981cbc68-9edc-4f8d-872f-71146fcbb84f}" />
  <Method Id="4" ParentId="1" Name="GetDefaultSiteCollectionTermStore" />
</ObjectPaths>
</Request>`
                };
                const res = yield request_1.default.post(requestOptions);
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    throw response.ErrorInfo.ErrorMessage;
                }
                const result = {
                    ContentTypePublishingHub: json[json.length - 1]["ContentTypePublishingHub"]
                };
                logger.log(result);
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
}
module.exports = new SpoContentTypeHubGetCommand();
//# sourceMappingURL=contenttypehub-get.js.map