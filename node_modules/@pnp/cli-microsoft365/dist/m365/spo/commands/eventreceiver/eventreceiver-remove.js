"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoEventreceiverRemoveCommand_instances, _SpoEventreceiverRemoveCommand_initTelemetry, _SpoEventreceiverRemoveCommand_initOptions, _SpoEventreceiverRemoveCommand_initValidators, _SpoEventreceiverRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const getCommand = require('./eventreceiver-get');
class SpoEventreceiverRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoEventreceiverRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoEventreceiverRemoveCommand_instances, "m", _SpoEventreceiverRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoEventreceiverRemoveCommand_instances, "m", _SpoEventreceiverRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoEventreceiverRemoveCommand_instances, "m", _SpoEventreceiverRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoEventreceiverRemoveCommand_instances, "m", _SpoEventreceiverRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.EVENTRECEIVER_REMOVE;
    }
    get description() {
        return 'Removes event receivers for the specified web, site, or list.';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const getEventReceiversOutput = yield this.getEventReceivers(args.options);
                const eventReceivers = JSON.parse(getEventReceiversOutput.stdout);
                if (!eventReceivers.length) {
                    throw Error(`Specified event receiver with ${args.options.id !== undefined ? `id ${args.options.id}` : `name ${args.options.name}`} cannot be found`);
                }
                if (eventReceivers.length > 1) {
                    throw Error(`Multiple eventreceivers with ${args.options.id !== undefined ? `id ${args.options.id} found` : `name ${args.options.name}, ids: ${eventReceivers.map(x => x.ReceiverId)} found`}`);
                }
                if (args.options.confirm) {
                    yield this.removeEventReceiver(args.options);
                }
                else {
                    const result = yield Cli_1.Cli.prompt({
                        type: 'confirm',
                        name: 'continue',
                        default: false,
                        message: `Are you sure you want to remove event receiver with ${args.options.id !== undefined ? `id ${args.options.id}` : `name ${args.options.name}`}?`
                    });
                    if (result.continue) {
                        yield this.removeEventReceiver(args.options);
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    removeEventReceiver(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let requestUrl = `${options.webUrl}/_api/`;
            let listUrl = '';
            let filter = '?$filter=';
            if (options.listId) {
                listUrl = `lists(guid'${formatting_1.formatting.encodeQueryParameter(options.listId)}')/`;
            }
            else if (options.listTitle) {
                listUrl = `lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(options.listTitle)}')/`;
            }
            else if (options.listUrl) {
                const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(options.webUrl, options.listUrl);
                listUrl = `GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')/`;
            }
            if (!options.scope || options.scope === 'web') {
                requestUrl += `web/${listUrl}eventreceivers`;
            }
            else {
                requestUrl += 'site/eventreceivers';
            }
            if (options.id) {
                filter += `receiverid eq (guid'${options.id}')`;
            }
            else {
                filter += `receivername eq '${options.name}'`;
            }
            const requestOptions = {
                url: requestUrl + filter,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            yield request_1.default.delete(requestOptions);
        });
    }
    getEventReceivers(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const getOptions = {
                webUrl: options.webUrl,
                listId: options.listId,
                listTitle: options.listTitle,
                listUrl: options.listUrl,
                scope: options.scope,
                id: options.id,
                name: options.name,
                debug: this.debug,
                verbose: this.verbose
            };
            return yield Cli_1.Cli.executeCommandWithOutput(getCommand, { options: Object.assign(Object.assign({}, getOptions), { _: [] }) });
        });
    }
}
_SpoEventreceiverRemoveCommand_instances = new WeakSet(), _SpoEventreceiverRemoveCommand_initTelemetry = function _SpoEventreceiverRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            scope: typeof args.options.scope !== 'undefined',
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SpoEventreceiverRemoveCommand_initOptions = function _SpoEventreceiverRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--listTitle [listTitle]'
    }, {
        option: '--listId  [listId]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '-s, --scope [scope]',
        autocomplete: ['web', 'site']
    }, {
        option: '--confirm'
    });
}, _SpoEventreceiverRemoveCommand_initValidators = function _SpoEventreceiverRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        const listOptions = [args.options.listId, args.options.listTitle, args.options.listUrl];
        if (listOptions.some(item => item !== undefined) && listOptions.filter(item => item !== undefined).length > 1) {
            return `Specify either list id or title or list url`;
        }
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} is not a valid GUID`;
        }
        if (args.options.scope && ['web', 'site'].indexOf(args.options.scope) === -1) {
            return `${args.options.scope} is not a valid type value. Allowed values web|site.`;
        }
        if (args.options.scope && args.options.scope === 'site' && (args.options.listId || args.options.listUrl || args.options.listTitle)) {
            return 'Scope cannot be set to site when retrieving list event receivers.';
        }
        return true;
    }));
}, _SpoEventreceiverRemoveCommand_initOptionSets = function _SpoEventreceiverRemoveCommand_initOptionSets() {
    this.optionSets.push(['name', 'id']);
};
module.exports = new SpoEventreceiverRemoveCommand();
//# sourceMappingURL=eventreceiver-remove.js.map