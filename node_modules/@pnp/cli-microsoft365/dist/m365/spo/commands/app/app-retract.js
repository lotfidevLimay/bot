"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoAppRetractCommand_instances, _SpoAppRetractCommand_initTelemetry, _SpoAppRetractCommand_initOptions, _SpoAppRetractCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const commands_1 = require("../../commands");
const SpoAppBaseCommand_1 = require("./SpoAppBaseCommand");
class SpoAppRetractCommand extends SpoAppBaseCommand_1.SpoAppBaseCommand {
    constructor() {
        super();
        _SpoAppRetractCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoAppRetractCommand_instances, "m", _SpoAppRetractCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoAppRetractCommand_instances, "m", _SpoAppRetractCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoAppRetractCommand_instances, "m", _SpoAppRetractCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.APP_RETRACT;
    }
    get description() {
        return 'Retracts the specified app from the specified app catalog';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const scope = (args.options.scope) ? args.options.scope.toLowerCase() : 'tenant';
            const retractApp = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const spoUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                    const appCatalogSiteUrl = yield this.getAppCatalogSiteUrl(logger, spoUrl, args);
                    if (this.verbose) {
                        logger.logToStderr(`Retracting app...`);
                    }
                    const requestOptions = {
                        url: `${appCatalogSiteUrl}/_api/web/${scope}appcatalog/AvailableApps/GetById('${encodeURIComponent(args.options.id)}')/retract`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        }
                    };
                    yield request_1.default.post(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataPromise(err);
                }
            });
            if (args.options.confirm) {
                yield retractApp();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to retract the app ${args.options.id} from the app catalog?`
                });
                if (result.continue) {
                    yield retractApp();
                }
            }
        });
    }
}
_SpoAppRetractCommand_instances = new WeakSet(), _SpoAppRetractCommand_initTelemetry = function _SpoAppRetractCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appCatalogUrl: (!(!args.options.appCatalogUrl)).toString(),
            confirm: (!(!args.options.confirm)).toString(),
            scope: args.options.scope || 'tenant'
        });
    });
}, _SpoAppRetractCommand_initOptions = function _SpoAppRetractCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '-u, --appCatalogUrl [appCatalogUrl]'
    }, {
        option: '-s, --scope [scope]',
        autocomplete: ['tenant', 'sitecollection']
    }, {
        option: '--confirm'
    });
}, _SpoAppRetractCommand_initValidators = function _SpoAppRetractCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.scope) {
            const testScope = args.options.scope.toLowerCase();
            if (!(testScope === 'tenant' || testScope === 'sitecollection')) {
                return `Scope must be either 'tenant' or 'sitecollection' if specified`;
            }
            if (testScope === 'sitecollection' && !args.options.appCatalogUrl) {
                return `You must specify appCatalogUrl when the scope is sitecollection`;
            }
        }
        if (!validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        if (args.options.appCatalogUrl) {
            return validation_1.validation.isValidSharePointUrl(args.options.appCatalogUrl);
        }
        return true;
    }));
};
module.exports = new SpoAppRetractCommand();
//# sourceMappingURL=app-retract.js.map