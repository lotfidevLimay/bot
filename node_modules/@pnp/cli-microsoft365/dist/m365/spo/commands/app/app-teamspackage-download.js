"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoAppTeamsPackageDownloadCommand_instances, _SpoAppTeamsPackageDownloadCommand_initTelemetry, _SpoAppTeamsPackageDownloadCommand_initOptions, _SpoAppTeamsPackageDownloadCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const commands_1 = require("../../commands");
const SpoAppBaseCommand_1 = require("./SpoAppBaseCommand");
class SpoAppTeamsPackageDownloadCommand extends SpoAppBaseCommand_1.SpoAppBaseCommand {
    constructor() {
        super();
        _SpoAppTeamsPackageDownloadCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoAppTeamsPackageDownloadCommand_instances, "m", _SpoAppTeamsPackageDownloadCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoAppTeamsPackageDownloadCommand_instances, "m", _SpoAppTeamsPackageDownloadCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoAppTeamsPackageDownloadCommand_instances, "m", _SpoAppTeamsPackageDownloadCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.APP_TEAMSPACKAGE_DOWNLOAD;
    }
    get description() {
        return 'Downloads Teams app package for an SPFx solution deployed to tenant app catalog';
    }
    commandAction(logger, args) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.appCatalogUrl = args.options.appCatalogUrl;
                const appInfo = {
                    id: (_a = args.options.appItemId) !== null && _a !== void 0 ? _a : undefined,
                    packageFileName: (_b = args.options.fileName) !== null && _b !== void 0 ? _b : undefined
                };
                if (this.debug) {
                    logger.logToStderr(`appInfo: ${JSON.stringify(appInfo)}`);
                }
                yield this.ensureAppInfo(logger, args, appInfo);
                if (this.debug) {
                    logger.logToStderr(`ensureAppInfo: ${JSON.stringify(appInfo)}`);
                }
                yield this.loadAppCatalogUrl(logger, args);
                const requestOptions = {
                    url: `${this.appCatalogUrl}/_api/web/tenantappcatalog/downloadteamssolution(${appInfo.id})/$value`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'stream'
                };
                const file = yield request_1.default.get(requestOptions);
                // Not possible to use async/await for this promise
                yield new Promise((resolve, reject) => {
                    const writer = fs.createWriteStream(appInfo.packageFileName);
                    file.data.pipe(writer);
                    writer.on('error', err => {
                        return reject(err);
                    });
                    writer.on('close', () => {
                        const fileName = appInfo.packageFileName;
                        if (this.verbose) {
                            logger.logToStderr(`Package saved to ${fileName}`);
                        }
                        return resolve();
                    });
                });
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    ensureAppInfo(logger, args, appInfo) {
        if (appInfo.id && appInfo.packageFileName) {
            return Promise.resolve();
        }
        if (args.options.appName && !appInfo.packageFileName) {
            appInfo.packageFileName = this.getPackageNameFromFileName(args.options.appName);
        }
        return this
            .loadAppCatalogUrl(logger, args)
            .then(_ => {
            const appCatalogListName = 'AppCatalog';
            const serverRelativeAppCatalogListUrl = `${urlUtil_1.urlUtil.getServerRelativeSiteUrl(this.appCatalogUrl)}/${appCatalogListName}`;
            let url = `${this.appCatalogUrl}/_api/web/`;
            if (args.options.appItemUniqueId) {
                url += `GetList('${serverRelativeAppCatalogListUrl}')/GetItemByUniqueId('${args.options.appItemUniqueId}')?$expand=File&$select=Id,File/Name`;
            }
            else if (args.options.appItemId) {
                url += `GetList('${serverRelativeAppCatalogListUrl}')/GetItemById(${args.options.appItemId})?$expand=File&$select=File/Name`;
            }
            else if (args.options.appName) {
                url += `getfolderbyserverrelativeurl('${appCatalogListName}')/files('${encodeURIComponent(args.options.appName)}')/ListItemAllFields?$select=Id`;
            }
            const requestOptions = {
                url,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        })
            .then(res => {
            if (args.options.appItemUniqueId) {
                appInfo.id = parseInt(res.Id);
                if (!appInfo.packageFileName) {
                    appInfo.packageFileName = this.getPackageNameFromFileName(res.File.Name);
                }
                return Promise.resolve();
            }
            if (args.options.appItemId) {
                if (!appInfo.packageFileName) {
                    appInfo.packageFileName = this.getPackageNameFromFileName(res.File.Name);
                }
                return Promise.resolve();
            }
            // if (args.options.appName)
            // skipped 'if' clause to provide a default code branch
            appInfo.id = parseInt(res.Id);
            return Promise.resolve();
        });
    }
    getPackageNameFromFileName(fileName) {
        return `${path.basename(fileName, path.extname(fileName))}.zip`;
    }
    loadAppCatalogUrl(logger, args) {
        if (this.appCatalogUrl) {
            return Promise.resolve();
        }
        return spo_1.spo
            .getSpoUrl(logger, this.debug)
            .then(spoUrl => this.getAppCatalogSiteUrl(logger, spoUrl, args))
            .then(appCatalogUrl => {
            this.appCatalogUrl = appCatalogUrl;
        });
    }
}
_SpoAppTeamsPackageDownloadCommand_instances = new WeakSet(), _SpoAppTeamsPackageDownloadCommand_initTelemetry = function _SpoAppTeamsPackageDownloadCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appCatalogUrl: typeof args.options.appCatalogUrl !== 'undefined',
            appItemUniqueId: typeof args.options.appItemUniqueId !== 'undefined',
            appItemId: typeof args.options.appItemId !== 'undefined',
            appName: typeof args.options.appName !== 'undefined',
            fileName: typeof args.options.fileName !== 'undefined'
        });
    });
}, _SpoAppTeamsPackageDownloadCommand_initOptions = function _SpoAppTeamsPackageDownloadCommand_initOptions() {
    this.options.unshift({ option: '--appItemId [appItemId]' }, { option: '--appItemUniqueId [appItemUniqueId]' }, { option: '--appName [appName]' }, { option: '--fileName [fileName]' }, { option: '-u, --appCatalogUrl [appCatalogUrl]' });
}, _SpoAppTeamsPackageDownloadCommand_initValidators = function _SpoAppTeamsPackageDownloadCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!args.options.appItemUniqueId &&
            !args.options.appItemId &&
            !args.options.appName) {
            return `Specify appItemUniqueId, appItemId or appName`;
        }
        if ((args.options.appItemUniqueId && args.options.appItemId) ||
            (args.options.appItemUniqueId && args.options.appName) ||
            (args.options.appItemId && args.options.appName)) {
            return `Specify appItemUniqueId, appItemId or appName but not multiple`;
        }
        if (args.options.appItemUniqueId &&
            !validation_1.validation.isValidGuid(args.options.appItemUniqueId)) {
            return `${args.options.appItemUniqueId} is not a valid GUID`;
        }
        if (args.options.appItemId &&
            isNaN(args.options.appItemId)) {
            return `${args.options.appItemId} is not a number`;
        }
        if (args.options.fileName &&
            fs.existsSync(args.options.fileName)) {
            return `File ${args.options.fileName} already exists`;
        }
        if (args.options.appCatalogUrl) {
            return validation_1.validation.isValidSharePointUrl(args.options.appCatalogUrl);
        }
        return true;
    }));
};
module.exports = new SpoAppTeamsPackageDownloadCommand();
//# sourceMappingURL=app-teamspackage-download.js.map