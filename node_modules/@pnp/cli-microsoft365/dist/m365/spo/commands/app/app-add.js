"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoAppAddCommand_instances, _SpoAppAddCommand_initTelemetry, _SpoAppAddCommand_initOptions, _SpoAppAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const commands_1 = require("../../commands");
const SpoAppBaseCommand_1 = require("./SpoAppBaseCommand");
class SpoAppAddCommand extends SpoAppBaseCommand_1.SpoAppBaseCommand {
    constructor() {
        super();
        _SpoAppAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoAppAddCommand_instances, "m", _SpoAppAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoAppAddCommand_instances, "m", _SpoAppAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoAppAddCommand_instances, "m", _SpoAppAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.APP_ADD;
    }
    get description() {
        return 'Adds an app to the specified SharePoint Online app catalog';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const scope = (args.options.scope) ? args.options.scope.toLowerCase() : 'tenant';
            const overwrite = args.options.overwrite || false;
            try {
                const spoUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                const appCatalogUrl = yield this.getAppCatalogSiteUrl(logger, spoUrl, args);
                const fullPath = path.resolve(args.options.filePath);
                if (this.verbose) {
                    logger.logToStderr(`Adding app '${fullPath}' to app catalog...`);
                }
                const fileName = path.basename(fullPath);
                const requestOptions = {
                    url: `${appCatalogUrl}/_api/web/${scope}appcatalog/Add(overwrite=${(overwrite.toString().toLowerCase())}, url='${fileName}')`,
                    headers: {
                        accept: 'application/json;odata=nometadata',
                        binaryStringRequestBody: 'true'
                    },
                    data: fs.readFileSync(fullPath)
                };
                const res = yield request_1.default.post(requestOptions);
                const json = JSON.parse(res);
                if (args.options.output === 'json') {
                    logger.log(json);
                }
                else {
                    logger.log(json.UniqueId);
                }
            }
            catch (err) {
                this.handleRejectedODataPromise(err);
            }
        });
    }
}
_SpoAppAddCommand_instances = new WeakSet(), _SpoAppAddCommand_initTelemetry = function _SpoAppAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            overwrite: (!(!args.options.overwrite)).toString(),
            scope: args.options.scope || 'tenant',
            appCatalogUrl: (!(!args.options.appCatalogUrl)).toString()
        });
    });
}, _SpoAppAddCommand_initOptions = function _SpoAppAddCommand_initOptions() {
    this.options.unshift({
        option: '-p, --filePath <filePath>'
    }, {
        option: '-s, --scope [scope]',
        autocomplete: ['tenant', 'sitecollection']
    }, {
        option: '-u, --appCatalogUrl [appCatalogUrl]'
    }, {
        option: '--overwrite [overwrite]'
    });
}, _SpoAppAddCommand_initValidators = function _SpoAppAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        // verify either 'tenant' or 'sitecollection' specified if scope provided
        if (args.options.scope) {
            const testScope = args.options.scope.toLowerCase();
            if (!(testScope === 'tenant' || testScope === 'sitecollection')) {
                return `Scope must be either 'tenant' or 'sitecollection'`;
            }
            if (testScope === 'sitecollection' && !args.options.appCatalogUrl) {
                return `You must specify appCatalogUrl when the scope is sitecollection`;
            }
        }
        const fullPath = path.resolve(args.options.filePath);
        if (!fs.existsSync(fullPath)) {
            return `File '${fullPath}' not found`;
        }
        if (fs.lstatSync(fullPath).isDirectory()) {
            return `Path '${fullPath}' points to a directory`;
        }
        if (args.options.appCatalogUrl) {
            return validation_1.validation.isValidSharePointUrl(args.options.appCatalogUrl);
        }
        return true;
    }));
};
module.exports = new SpoAppAddCommand();
//# sourceMappingURL=app-add.js.map