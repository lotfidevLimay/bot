"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoAppGetCommand_instances, _SpoAppGetCommand_initTelemetry, _SpoAppGetCommand_initOptions, _SpoAppGetCommand_initValidators, _SpoAppGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const commands_1 = require("../../commands");
const SpoAppBaseCommand_1 = require("./SpoAppBaseCommand");
class SpoAppGetCommand extends SpoAppBaseCommand_1.SpoAppBaseCommand {
    constructor() {
        super();
        _SpoAppGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoAppGetCommand_instances, "m", _SpoAppGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoAppGetCommand_instances, "m", _SpoAppGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoAppGetCommand_instances, "m", _SpoAppGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoAppGetCommand_instances, "m", _SpoAppGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.APP_GET;
    }
    get description() {
        return 'Gets information about the specific app from the specified app catalog';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const scope = (args.options.scope) ? args.options.scope.toLowerCase() : 'tenant';
                const spoUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                const appCatalogSiteUrl = yield this.getAppCatalogSiteUrl(logger, spoUrl, args);
                let appId;
                if (args.options.id) {
                    appId = args.options.id;
                }
                else {
                    if (this.verbose) {
                        logger.logToStderr(`Looking up app id for app named ${args.options.name}...`);
                    }
                    const requestOptions = {
                        url: `${appCatalogSiteUrl}/_api/web/getfolderbyserverrelativeurl('AppCatalog')/files('${args.options.name}')?$select=UniqueId`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const app = yield request_1.default.get(requestOptions);
                    appId = app.UniqueId;
                }
                if (this.verbose) {
                    logger.logToStderr(`Retrieving information for app ${appId}...`);
                }
                const requestOptions = {
                    url: `${appCatalogSiteUrl}/_api/web/${scope}appcatalog/AvailableApps/GetById('${encodeURIComponent(appId)}')`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.get(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoAppGetCommand_instances = new WeakSet(), _SpoAppGetCommand_initTelemetry = function _SpoAppGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: (!(!args.options.id)).toString(),
            name: (!(!args.options.name)).toString(),
            appCatalogUrl: (!(!args.options.appCatalogUrl)).toString(),
            scope: args.options.scope || 'tenant'
        });
    });
}, _SpoAppGetCommand_initOptions = function _SpoAppGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '-u, --appCatalogUrl [appCatalogUrl]'
    }, {
        option: '-s, --scope [scope]',
        autocomplete: ['tenant', 'sitecollection']
    });
}, _SpoAppGetCommand_initValidators = function _SpoAppGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        // verify either 'tenant' or 'sitecollection' specified if scope provided
        if (args.options.scope) {
            const testScope = args.options.scope.toLowerCase();
            if (!(testScope === 'tenant' || testScope === 'sitecollection')) {
                return `Scope must be either 'tenant' or 'sitecollection'`;
            }
            if (testScope === 'sitecollection' && !args.options.appCatalogUrl) {
                return `You must specify appCatalogUrl when the scope is sitecollection`;
            }
        }
        if (args.options.id && !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        if (args.options.appCatalogUrl) {
            return validation_1.validation.isValidSharePointUrl(args.options.appCatalogUrl);
        }
        return true;
    }));
}, _SpoAppGetCommand_initOptionSets = function _SpoAppGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
};
module.exports = new SpoAppGetCommand();
//# sourceMappingURL=app-get.js.map