"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoServicePrincipalSetCommand_instances, _SpoServicePrincipalSetCommand_initTelemetry, _SpoServicePrincipalSetCommand_initOptions, _SpoServicePrincipalSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoServicePrincipalSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoServicePrincipalSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoServicePrincipalSetCommand_instances, "m", _SpoServicePrincipalSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoServicePrincipalSetCommand_instances, "m", _SpoServicePrincipalSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoServicePrincipalSetCommand_instances, "m", _SpoServicePrincipalSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SERVICEPRINCIPAL_SET;
    }
    get description() {
        return 'Enable or disable the service principal';
    }
    alias() {
        return [commands_1.default.SP_SET];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const enabled = args.options.enabled === 'true';
            const toggleServicePrincipal = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                    const reqDigest = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                    if (this.verbose) {
                        logger.logToStderr(`${(enabled ? 'Enabling' : 'Disabling')} service principal...`);
                    }
                    const requestOptions = {
                        url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                        headers: {
                            'X-RequestDigest': reqDigest.FormDigestValue
                        },
                        data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="28" ObjectPathId="27" /><SetProperty Id="29" ObjectPathId="27" Name="AccountEnabled"><Parameter Type="Boolean">${enabled}</Parameter></SetProperty><Method Name="Update" Id="30" ObjectPathId="27" /><Query Id="31" ObjectPathId="27"><Query SelectAllProperties="true"><Properties><Property Name="AccountEnabled" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Constructor Id="27" TypeId="{104e8f06-1e00-4675-99c6-1b9b504ed8d8}" /></ObjectPaths></Request>`
                    };
                    const res = yield request_1.default.post(requestOptions);
                    const json = JSON.parse(res);
                    const response = json[0];
                    if (response.ErrorInfo) {
                        throw response.ErrorInfo.ErrorMessage;
                    }
                    else {
                        const output = json[json.length - 1];
                        delete output._ObjectType_;
                        logger.log(output);
                    }
                }
                catch (err) {
                    this.handleRejectedPromise(err);
                }
            });
            if (args.options.confirm) {
                yield toggleServicePrincipal();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to ${enabled ? 'enable' : 'disable'} the service principal?`
                });
                if (result.continue) {
                    yield toggleServicePrincipal();
                }
            }
        });
    }
}
_SpoServicePrincipalSetCommand_instances = new WeakSet(), _SpoServicePrincipalSetCommand_initTelemetry = function _SpoServicePrincipalSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            enabled: args.options.enabled === 'true'
        });
    });
}, _SpoServicePrincipalSetCommand_initOptions = function _SpoServicePrincipalSetCommand_initOptions() {
    this.options.unshift({
        option: '-e, --enabled <enabled>',
        autocomplete: ['true', 'false']
    }, {
        option: '--confirm'
    });
}, _SpoServicePrincipalSetCommand_initValidators = function _SpoServicePrincipalSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const enabled = args.options.enabled.toLowerCase();
        if (enabled !== 'true' &&
            enabled !== 'false') {
            return `${args.options.enabled} is not a valid boolean value. Allowed values are true|false`;
        }
        return true;
    }));
};
module.exports = new SpoServicePrincipalSetCommand();
//# sourceMappingURL=serviceprincipal-set.js.map