"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoServicePrincipalPermissionRequestDenyCommand_instances, _SpoServicePrincipalPermissionRequestDenyCommand_initOptions, _SpoServicePrincipalPermissionRequestDenyCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoServicePrincipalPermissionRequestDenyCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoServicePrincipalPermissionRequestDenyCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoServicePrincipalPermissionRequestDenyCommand_instances, "m", _SpoServicePrincipalPermissionRequestDenyCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoServicePrincipalPermissionRequestDenyCommand_instances, "m", _SpoServicePrincipalPermissionRequestDenyCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SERVICEPRINCIPAL_PERMISSIONREQUEST_DENY;
    }
    alias() {
        return [commands_1.default.SP_PERMISSIONREQUEST_DENY];
    }
    get description() {
        return 'Denies the specified permission request';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                if (this.verbose) {
                    logger.logToStderr(`Retrieving request digest...`);
                }
                const reqDigest = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': reqDigest.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="160" ObjectPathId="159" /><ObjectPath Id="162" ObjectPathId="161" /><ObjectPath Id="164" ObjectPathId="163" /><Method Name="Deny" Id="165" ObjectPathId="163" /></Actions><ObjectPaths><Constructor Id="159" TypeId="{104e8f06-1e00-4675-99c6-1b9b504ed8d8}" /><Property Id="161" ParentId="159" Name="PermissionRequests" /><Method Id="163" ParentId="161" Name="GetById"><Parameters><Parameter Type="Guid">{${formatting_1.formatting.escapeXml(args.options.requestId)}}</Parameter></Parameters></Method></ObjectPaths></Request>`
                };
                const res = yield request_1.default.post(requestOptions);
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    throw response.ErrorInfo.ErrorMessage;
                }
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
}
_SpoServicePrincipalPermissionRequestDenyCommand_instances = new WeakSet(), _SpoServicePrincipalPermissionRequestDenyCommand_initOptions = function _SpoServicePrincipalPermissionRequestDenyCommand_initOptions() {
    this.options.unshift({
        option: '-i, --requestId <requestId>'
    });
}, _SpoServicePrincipalPermissionRequestDenyCommand_initValidators = function _SpoServicePrincipalPermissionRequestDenyCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.requestId)) {
            return `${args.options.requestId} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new SpoServicePrincipalPermissionRequestDenyCommand();
//# sourceMappingURL=serviceprincipal-permissionrequest-deny.js.map