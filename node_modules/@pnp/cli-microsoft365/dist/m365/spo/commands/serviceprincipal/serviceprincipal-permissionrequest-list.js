"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoServicePrincipalPermissionRequestListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.SERVICEPRINCIPAL_PERMISSIONREQUEST_LIST;
    }
    get description() {
        return 'Lists pending permission requests';
    }
    alias() {
        return [commands_1.default.SP_PERMISSIONREQUEST_LIST];
    }
    commandAction(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                if (this.verbose) {
                    logger.logToStderr(`Retrieving request digest...`);
                }
                const reqDigest = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': reqDigest.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="10" ObjectPathId="9" /><ObjectPath Id="12" ObjectPathId="11" /><Query Id="13" ObjectPathId="11"><Query SelectAllProperties="true"><Properties /></Query><ChildItemQuery SelectAllProperties="true"><Properties /></ChildItemQuery></Query></Actions><ObjectPaths><Constructor Id="9" TypeId="{104e8f06-1e00-4675-99c6-1b9b504ed8d8}" /><Property Id="11" ParentId="9" Name="PermissionRequests" /></ObjectPaths></Request>`
                };
                const res = yield request_1.default.post(requestOptions);
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    throw response.ErrorInfo.ErrorMessage;
                }
                else {
                    const result = json[json.length - 1]._Child_Items_;
                    logger.log(result.map(r => {
                        return {
                            Id: r.Id.replace('/Guid(', '').replace(')/', ''),
                            Resource: r.Resource,
                            ResourceId: r.ResourceId,
                            Scope: r.Scope
                        };
                    }));
                }
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
}
module.exports = new SpoServicePrincipalPermissionRequestListCommand();
//# sourceMappingURL=serviceprincipal-permissionrequest-list.js.map