"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFieldRemoveCommand_instances, _SpoFieldRemoveCommand_initTelemetry, _SpoFieldRemoveCommand_initOptions, _SpoFieldRemoveCommand_initValidators, _SpoFieldRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoFieldRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFieldRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFieldRemoveCommand_instances, "m", _SpoFieldRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFieldRemoveCommand_instances, "m", _SpoFieldRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFieldRemoveCommand_instances, "m", _SpoFieldRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoFieldRemoveCommand_instances, "m", _SpoFieldRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.FIELD_REMOVE;
    }
    get description() {
        return 'Removes the specified list- or site column';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.fieldTitle) {
                args.options.title = args.options.fieldTitle;
                this.warn(logger, `Option 'fieldTitle' is deprecated. Please use 'title' instead.`);
            }
            let messageEnd;
            if (args.options.listId || args.options.listTitle) {
                messageEnd = `in list ${args.options.listId || args.options.listTitle}`;
            }
            else {
                messageEnd = `in site ${args.options.webUrl}`;
            }
            const removeField = (listRestUrl, fieldId, title) => __awaiter(this, void 0, void 0, function* () {
                if (this.verbose) {
                    logger.logToStderr(`Removing field ${fieldId || title} ${messageEnd}...`);
                }
                let fieldRestUrl = '';
                if (fieldId) {
                    fieldRestUrl = `/getbyid('${formatting_1.formatting.encodeQueryParameter(fieldId)}')`;
                }
                else {
                    fieldRestUrl = `/getbyinternalnameortitle('${formatting_1.formatting.encodeQueryParameter(title)}')`;
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/web/${listRestUrl}fields${fieldRestUrl}`,
                    method: 'POST',
                    headers: {
                        'X-HTTP-Method': 'DELETE',
                        'If-Match': '*',
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                yield request_1.default.post(requestOptions);
            });
            const prepareRemoval = () => __awaiter(this, void 0, void 0, function* () {
                let listRestUrl = '';
                if (args.options.listId) {
                    listRestUrl = `lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')/`;
                }
                else if (args.options.listTitle) {
                    listRestUrl = `lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')/`;
                }
                else if (args.options.listUrl) {
                    const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                    listRestUrl = `GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')/`;
                }
                if (args.options.group) {
                    if (this.verbose) {
                        logger.logToStderr(`Retrieving fields assigned to group ${args.options.group}...`);
                    }
                    const requestOptions = {
                        url: `${args.options.webUrl}/_api/web/${listRestUrl}fields`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    try {
                        const res = yield request_1.default.get(requestOptions);
                        const filteredResults = res.value.filter((field) => field.Group === args.options.group);
                        if (this.verbose) {
                            logger.logToStderr(`${filteredResults.length} matches found...`);
                        }
                        const promises = [];
                        for (let index = 0; index < filteredResults.length; index++) {
                            promises.push(removeField(listRestUrl, filteredResults[index].Id, undefined));
                        }
                        yield Promise.all(promises);
                    }
                    catch (err) {
                        this.handleRejectedODataJsonPromise(err);
                    }
                }
                else {
                    try {
                        yield removeField(listRestUrl, args.options.id, args.options.title);
                        // REST post call doesn't return anything
                    }
                    catch (err) {
                        this.handleRejectedODataJsonPromise(err);
                    }
                }
            });
            if (args.options.confirm) {
                yield prepareRemoval();
            }
            else {
                const confirmMessage = `Are you sure you want to remove the ${args.options.group ? 'fields' : 'field'} ${args.options.id || args.options.title || 'from group ' + args.options.group} ${messageEnd}?`;
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: confirmMessage
                });
                if (result.continue) {
                    yield prepareRemoval();
                }
            }
        });
    }
}
_SpoFieldRemoveCommand_instances = new WeakSet(), _SpoFieldRemoveCommand_initTelemetry = function _SpoFieldRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            id: typeof args.options.id !== 'undefined',
            group: typeof args.options.group !== 'undefined',
            title: typeof args.options.title !== 'undefined',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SpoFieldRemoveCommand_initOptions = function _SpoFieldRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --listTitle [listTitle]'
    }, {
        option: '--listId [listId]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '--fieldTitle [fieldTitle]'
    }, {
        option: '-t, --title [title]'
    }, {
        option: '-g, --group [group]'
    }, {
        option: '--confirm'
    });
}, _SpoFieldRemoveCommand_initValidators = function _SpoFieldRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.id && !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} is not a valid GUID`;
        }
        return true;
    }));
}, _SpoFieldRemoveCommand_initOptionSets = function _SpoFieldRemoveCommand_initOptionSets() {
    this.optionSets.push(['id', 'title', 'fieldTitle', 'group']);
};
module.exports = new SpoFieldRemoveCommand();
//# sourceMappingURL=field-remove.js.map