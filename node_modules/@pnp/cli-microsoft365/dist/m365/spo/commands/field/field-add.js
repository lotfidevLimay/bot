"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFieldAddCommand_instances, _SpoFieldAddCommand_initTelemetry, _SpoFieldAddCommand_initOptions, _SpoFieldAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoFieldAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFieldAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFieldAddCommand_instances, "m", _SpoFieldAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFieldAddCommand_instances, "m", _SpoFieldAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFieldAddCommand_instances, "m", _SpoFieldAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.FIELD_ADD;
    }
    get description() {
        return 'Adds a new list or site column using the CAML field definition';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let requestUrl = `${args.options.webUrl}/_api/web`;
                if (args.options.listId) {
                    requestUrl += `/lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')`;
                }
                else if (args.options.listTitle) {
                    requestUrl += `/lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')`;
                }
                else if (args.options.listUrl) {
                    const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                    requestUrl += `/GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')`;
                }
                const reqDigest = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                const requestOptions = {
                    url: `${requestUrl}/fields/CreateFieldAsXml`,
                    headers: {
                        'X-RequestDigest': reqDigest.FormDigestValue,
                        accept: 'application/json;odata=nometadata'
                    },
                    data: {
                        parameters: {
                            SchemaXml: args.options.xml,
                            Options: this.getOptions(args.options.options)
                        }
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.post(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getOptions(options) {
        let optionsValue = 0;
        if (!options) {
            return optionsValue;
        }
        options.split(',').forEach(o => {
            o = o.trim();
            switch (o) {
                case 'DefaultValue':
                    optionsValue += 0;
                    break;
                case 'AddToDefaultContentType':
                    optionsValue += 1;
                    break;
                case 'AddToNoContentType':
                    optionsValue += 2;
                    break;
                case 'AddToAllContentTypes':
                    optionsValue += 4;
                    break;
                case 'AddFieldInternalNameHint':
                    optionsValue += 8;
                    break;
                case 'AddFieldToDefaultView':
                    optionsValue += 16;
                    break;
                case 'AddFieldCheckDisplayName':
                    optionsValue += 32;
                    break;
            }
        });
        return optionsValue;
    }
}
_SpoFieldAddCommand_instances = new WeakSet(), _SpoFieldAddCommand_initTelemetry = function _SpoFieldAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listTitle: typeof args.options.listTitle !== 'undefined',
            listId: typeof args.options.listId !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            options: typeof args.options.options !== 'undefined'
        });
    });
}, _SpoFieldAddCommand_initOptions = function _SpoFieldAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --listTitle [listTitle]'
    }, {
        option: '--listId [listId]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-x, --xml <xml>'
    }, {
        option: '--options [options]'
    });
}, _SpoFieldAddCommand_initValidators = function _SpoFieldAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        const listOptions = [args.options.listId, args.options.listTitle, args.options.listUrl];
        if (listOptions.some(item => item !== undefined) && listOptions.filter(item => item !== undefined).length > 1) {
            return `Specify either list id or title or list url, but not multiple`;
        }
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} in option listId is not a valid GUID`;
        }
        if (args.options.options) {
            let optionsError = true;
            const options = ['DefaultValue', 'AddToDefaultContentType', 'AddToNoContentType', 'AddToAllContentTypes', 'AddFieldInternalNameHint', 'AddFieldToDefaultView', 'AddFieldCheckDisplayName'];
            args.options.options.split(',').forEach(o => {
                o = o.trim();
                if (options.indexOf(o) < 0) {
                    optionsError = `${o} is not a valid value for the options argument. Allowed values are DefaultValue|AddToDefaultContentType|AddToNoContentType|AddToAllContentTypes|AddFieldInternalNameHint|AddFieldToDefaultView|AddFieldCheckDisplayName`;
                }
            });
            return optionsError;
        }
        return true;
    }));
};
module.exports = new SpoFieldAddCommand();
//# sourceMappingURL=field-add.js.map