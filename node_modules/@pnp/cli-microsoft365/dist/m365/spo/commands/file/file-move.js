"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFileMoveCommand_instances, _SpoFileMoveCommand_initTelemetry, _SpoFileMoveCommand_initOptions, _SpoFileMoveCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const removeCommand = require('./file-remove');
class SpoFileMoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFileMoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFileMoveCommand_instances, "m", _SpoFileMoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFileMoveCommand_instances, "m", _SpoFileMoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFileMoveCommand_instances, "m", _SpoFileMoveCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.FILE_MOVE;
    }
    get description() {
        return 'Moves a file to another location';
    }
    getExcludedOptionsWithUrls() {
        return ['targetUrl'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const webUrl = args.options.webUrl;
            const parsedUrl = url.parse(webUrl);
            const tenantUrl = `${parsedUrl.protocol}//${parsedUrl.hostname}`;
            try {
                // Check if the source file exists.
                // Called on purpose, we explicitly check if user specified file
                // in the sourceUrl option.
                // The CreateCopyJobs endpoint accepts file, folder or batch from both.
                // A user might enter folder instead of file as source url by mistake
                // then there are edge cases when deleteIfAlreadyExists flag is set
                // the user can receive misleading error message.
                this.fileExists(tenantUrl, webUrl, args.options.sourceUrl);
                if (args.options.deleteIfAlreadyExists) {
                    // try delete target file, if deleteIfAlreadyExists flag is set
                    const filename = args.options.sourceUrl.replace(/^.*[\\\/]/, '');
                    yield this.recycleFile(tenantUrl, args.options.targetUrl, filename, logger);
                }
                // all preconditions met, now create copy job
                const sourceAbsoluteUrl = urlUtil_1.urlUtil.urlCombine(webUrl, args.options.sourceUrl);
                const allowSchemaMismatch = args.options.allowSchemaMismatch || false;
                const requestUrl = urlUtil_1.urlUtil.urlCombine(webUrl, '/_api/site/CreateCopyJobs');
                const requestOptions = {
                    url: requestUrl,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    data: {
                        exportObjectUris: [sourceAbsoluteUrl],
                        destinationUri: urlUtil_1.urlUtil.urlCombine(tenantUrl, args.options.targetUrl),
                        options: {
                            "AllowSchemaMismatch": allowSchemaMismatch,
                            "IgnoreVersionHistory": true,
                            "IsMoveMode": true
                        }
                    },
                    responseType: 'json'
                };
                const jobInfo = yield request_1.default.post(requestOptions);
                this.dots = '';
                const copyJobInfo = jobInfo.value[0];
                const progressPollInterval = 1800; // 30 * 60; //used previously implemented interval. The API does not provide guidance on what value should be used.
                yield new Promise((resolve, reject) => {
                    setTimeout(() => {
                        spo_1.spo.waitUntilCopyJobFinished({
                            copyJobInfo,
                            siteUrl: webUrl,
                            pollingInterval: progressPollInterval,
                            resolve,
                            reject,
                            logger,
                            dots: this.dots,
                            debug: this.debug,
                            verbose: this.verbose
                        });
                    }, progressPollInterval);
                });
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    /**
     * Checks if a file exists on the server relative url
     */
    fileExists(tenantUrl, webUrl, sourceUrl) {
        const webServerRelativeUrl = webUrl.replace(tenantUrl, '');
        const fileServerRelativeUrl = `${webServerRelativeUrl}${sourceUrl}`;
        const requestUrl = `${webUrl}/_api/web/GetFileByServerRelativeUrl('${encodeURIComponent(fileServerRelativeUrl)}')/`;
        const requestOptions = {
            url: requestUrl,
            method: 'GET',
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    /**
     * Moves file in the site recycle bin
     */
    recycleFile(tenantUrl, targetUrl, filename, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            const targetFolderAbsoluteUrl = urlUtil_1.urlUtil.urlCombine(tenantUrl, targetUrl);
            // since the target WebFullUrl is unknown we can use getRequestDigest
            // to get it from target folder absolute url.
            // Similar approach used here Microsoft.SharePoint.Client.Web.WebUrlFromFolderUrlDirect
            const contextResponse = yield spo_1.spo.getRequestDigest(targetFolderAbsoluteUrl);
            if (this.debug) {
                logger.logToStderr(`contextResponse.WebFullUrl: ${contextResponse.WebFullUrl}`);
            }
            const targetFileServerRelativeUrl = `${urlUtil_1.urlUtil.getServerRelativePath(contextResponse.WebFullUrl, targetUrl)}/${filename}`;
            const removeOptions = {
                webUrl: contextResponse.WebFullUrl,
                url: targetFileServerRelativeUrl,
                recycle: true,
                confirm: true,
                debug: this.debug,
                verbose: this.verbose
            };
            try {
                yield Cli_1.Cli.executeCommand(removeCommand, { options: Object.assign(Object.assign({}, removeOptions), { _: [] }) });
            }
            catch (err) {
                if (err.error !== undefined && err.error.message !== undefined && err.error.message.includes('does not exist')) {
                }
                else {
                    throw err;
                }
            }
        });
    }
}
_SpoFileMoveCommand_instances = new WeakSet(), _SpoFileMoveCommand_initTelemetry = function _SpoFileMoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            deleteIfAlreadyExists: args.options.deleteIfAlreadyExists || false,
            allowSchemaMismatch: args.options.allowSchemaMismatch || false
        });
    });
}, _SpoFileMoveCommand_initOptions = function _SpoFileMoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-s, --sourceUrl <sourceUrl>'
    }, {
        option: '-t, --targetUrl <targetUrl>'
    }, {
        option: '--deleteIfAlreadyExists'
    }, {
        option: '--allowSchemaMismatch'
    });
}, _SpoFileMoveCommand_initValidators = function _SpoFileMoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoFileMoveCommand();
//# sourceMappingURL=file-move.js.map