"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFileSharinginfoGetCommand_instances, _SpoFileSharinginfoGetCommand_initTelemetry, _SpoFileSharinginfoGetCommand_initOptions, _SpoFileSharinginfoGetCommand_initValidators, _SpoFileSharinginfoGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const FileSharingPrincipalType_1 = require("./FileSharingPrincipalType");
class SpoFileSharinginfoGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFileSharinginfoGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFileSharinginfoGetCommand_instances, "m", _SpoFileSharinginfoGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFileSharinginfoGetCommand_instances, "m", _SpoFileSharinginfoGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFileSharinginfoGetCommand_instances, "m", _SpoFileSharinginfoGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoFileSharinginfoGetCommand_instances, "m", _SpoFileSharinginfoGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.FILE_SHARINGINFO_GET;
    }
    get description() {
        return 'Generates a sharing information report for the specified file';
    }
    getExcludedOptionsWithUrls() {
        return ['url'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving sharing information report for the file...`);
            }
            try {
                const fileInformation = yield this.getNeededFileInformation(args);
                if (this.verbose) {
                    logger.logToStderr(`Retrieving sharing information report for the file with item Id  ${fileInformation.fileItemId}`);
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/web/lists/getbytitle('${formatting_1.formatting.encodeQueryParameter(fileInformation.libraryName)}')/items(${fileInformation.fileItemId})/GetSharingInformation?$select=permissionsInformation&$Expand=permissionsInformation`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.post(requestOptions);
                // typically, we don't do this, but in this case, we need to due to
                // the complexity of the retrieved object and the fact that we can't
                // use the generic way of simplifying the output
                if (args.options.output === 'json') {
                    logger.log(res);
                }
                else {
                    const fileSharingInfoCollection = [];
                    res.permissionsInformation.links.forEach(link => {
                        link.linkDetails.Invitations.forEach(linkInvite => {
                            fileSharingInfoCollection.push({
                                SharedWith: linkInvite.invitee.name,
                                IsActive: linkInvite.invitee.isActive,
                                IsExternal: linkInvite.invitee.isExternal,
                                PrincipalType: FileSharingPrincipalType_1.FileSharingPrincipalType[parseInt(linkInvite.invitee.principalType)]
                            });
                        });
                    });
                    res.permissionsInformation.principals.forEach(principal => {
                        fileSharingInfoCollection.push({
                            SharedWith: principal.principal.name,
                            IsActive: principal.principal.isActive,
                            IsExternal: principal.principal.isExternal,
                            PrincipalType: FileSharingPrincipalType_1.FileSharingPrincipalType[parseInt(principal.principal.principalType)]
                        });
                    });
                    logger.log(fileSharingInfoCollection);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getNeededFileInformation(args) {
        let requestUrl = '';
        if (args.options.id) {
            requestUrl = `${args.options.webUrl}/_api/web/GetFileById('${escape(args.options.id)}')/?$select=ListItemAllFields/Id,ListItemAllFields/ParentList/Title&$expand=ListItemAllFields/ParentList`;
        }
        else {
            requestUrl = `${args.options.webUrl}/_api/web/GetFileByServerRelativePath(decodedUrl='${encodeURIComponent(args.options.url)}')?$select=ListItemAllFields/Id,ListItemAllFields/ParentList/Title&$expand=ListItemAllFields/ParentList`;
        }
        const requestOptions = {
            url: requestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions)
            .then((res) => Promise.resolve({
            fileItemId: parseInt(res.ListItemAllFields.Id),
            libraryName: res.ListItemAllFields.ParentList.Title
        }));
    }
}
_SpoFileSharinginfoGetCommand_instances = new WeakSet(), _SpoFileSharinginfoGetCommand_initTelemetry = function _SpoFileSharinginfoGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: (!(!args.options.id)).toString(),
            url: (!(!args.options.url)).toString()
        });
    });
}, _SpoFileSharinginfoGetCommand_initOptions = function _SpoFileSharinginfoGetCommand_initOptions() {
    this.options.unshift({
        option: '-w, --webUrl <webUrl>'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '-u, --url [url]'
    });
}, _SpoFileSharinginfoGetCommand_initValidators = function _SpoFileSharinginfoGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.id) {
            if (!validation_1.validation.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
        }
        return true;
    }));
}, _SpoFileSharinginfoGetCommand_initOptionSets = function _SpoFileSharinginfoGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'url']);
};
module.exports = new SpoFileSharinginfoGetCommand();
//# sourceMappingURL=file-sharinginfo-get.js.map