"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFileRenameCommand_instances, _SpoFileRenameCommand_initTelemetry, _SpoFileRenameCommand_initOptions, _SpoFileRenameCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const removeCommand = require('./file-remove');
class SpoFileRenameCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFileRenameCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFileRenameCommand_instances, "m", _SpoFileRenameCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFileRenameCommand_instances, "m", _SpoFileRenameCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFileRenameCommand_instances, "m", _SpoFileRenameCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.FILE_RENAME;
    }
    get description() {
        return 'Renames a file';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const webUrl = args.options.webUrl;
            const originalFileServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.sourceUrl);
            try {
                yield this.getFile(originalFileServerRelativeUrl, webUrl);
                if (args.options.force) {
                    yield this.deleteFile(webUrl, args.options.sourceUrl, args.options.targetFileName);
                }
                const requestBody = {
                    formValues: [{
                            FieldName: 'FileLeafRef',
                            FieldValue: args.options.targetFileName
                        }]
                };
                const requestOptions = {
                    url: `${webUrl}/_api/web/GetFileByServerRelativeUrl('${encodeURIComponent(originalFileServerRelativeUrl)}')/ListItemAllFields/ValidateUpdateListItem()`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    data: requestBody,
                    responseType: 'json'
                };
                const resp = yield request_1.default.post(requestOptions);
                logger.log(resp.value);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getFile(originalFileServerRelativeUrl, webUrl) {
        const requestUrl = `${webUrl}/_api/web/GetFileByServerRelativeUrl('${encodeURIComponent(originalFileServerRelativeUrl)}')?$select=UniqueId`;
        const requestOptions = {
            url: requestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    deleteFile(webUrl, sourceUrl, targetFileName) {
        return __awaiter(this, void 0, void 0, function* () {
            const targetFileServerRelativeUrl = `${urlUtil_1.urlUtil.getServerRelativePath(webUrl, sourceUrl.substring(0, sourceUrl.lastIndexOf('/')))}/${targetFileName}`;
            const removeOptions = {
                webUrl: webUrl,
                url: targetFileServerRelativeUrl,
                recycle: true,
                confirm: true,
                debug: this.debug,
                verbose: this.verbose
            };
            try {
                yield Cli_1.Cli.executeCommand(removeCommand, { options: Object.assign(Object.assign({}, removeOptions), { _: [] }) });
            }
            catch (err) {
                if (err.error !== undefined && err.error.message !== undefined && err.error.message.includes('does not exist')) {
                }
                else {
                    throw err;
                }
            }
        });
    }
}
_SpoFileRenameCommand_instances = new WeakSet(), _SpoFileRenameCommand_initTelemetry = function _SpoFileRenameCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            force: !!args.options.force
        });
    });
}, _SpoFileRenameCommand_initOptions = function _SpoFileRenameCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-s, --sourceUrl <sourceUrl>'
    }, {
        option: '-t, --targetFileName <targetFileName>'
    }, {
        option: '--force'
    });
}, _SpoFileRenameCommand_initValidators = function _SpoFileRenameCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoFileRenameCommand();
//# sourceMappingURL=file-rename.js.map