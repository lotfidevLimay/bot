"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFileListCommand_instances, _SpoFileListCommand_initTelemetry, _SpoFileListCommand_initOptions, _SpoFileListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoFileListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFileListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFileListCommand_instances, "m", _SpoFileListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFileListCommand_instances, "m", _SpoFileListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFileListCommand_instances, "m", _SpoFileListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.FILE_LIST;
    }
    get description() {
        return 'Lists all available files in the specified folder and site';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving all files in folder ${args.options.folder} at site ${args.options.webUrl}...`);
            }
            try {
                const files = yield this.getFiles(args.options.folder, args);
                logger.log(files.value);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    // Gets files from a folder recursively.
    getFiles(folderUrl, args, files = { value: [] }) {
        // If --recursive option is specified, retrieve both Files and Folder details, otherwise only Files.
        const expandParameters = args.options.recursive ? 'Files,Folders' : 'Files';
        let requestUrl = `${args.options.webUrl}/_api/web/GetFolderByServerRelativeUrl('${formatting_1.formatting.encodeQueryParameter(folderUrl)}')?$expand=${expandParameters}`;
        if (args.options.output !== 'json') {
            requestUrl += '&$select=Files/UniqueId,Files/Name,Files/ServerRelativeUrl';
        }
        const requestOptions = {
            url: requestUrl,
            method: 'GET',
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((filesAndFoldersResult) => {
            filesAndFoldersResult.Files.forEach((file) => files.value.push(file));
            // If the request is --recursive, call this method for other folders.
            if (args.options.recursive &&
                filesAndFoldersResult.Folders !== undefined &&
                filesAndFoldersResult.Folders.length !== 0) {
                return Promise.all(filesAndFoldersResult.Folders.map((folder) => this.getFiles(folder.ServerRelativeUrl, args, files)));
            }
            else {
                return;
            }
        }).then(() => files);
    }
}
_SpoFileListCommand_instances = new WeakSet(), _SpoFileListCommand_initTelemetry = function _SpoFileListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            recursive: args.options.recursive
        });
    });
}, _SpoFileListCommand_initOptions = function _SpoFileListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-f, --folder <folder>'
    }, {
        option: '-r, --recursive'
    });
}, _SpoFileListCommand_initValidators = function _SpoFileListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoFileListCommand();
//# sourceMappingURL=file-list.js.map