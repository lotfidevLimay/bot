"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFileGetCommand_instances, _SpoFileGetCommand_initTelemetry, _SpoFileGetCommand_initOptions, _SpoFileGetCommand_initValidators, _SpoFileGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoFileGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFileGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFileGetCommand_instances, "m", _SpoFileGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFileGetCommand_instances, "m", _SpoFileGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFileGetCommand_instances, "m", _SpoFileGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoFileGetCommand_instances, "m", _SpoFileGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.FILE_GET;
    }
    get description() {
        return 'Gets information about the specified file';
    }
    getExcludedOptionsWithUrls() {
        return ['url'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving file from site ${args.options.webUrl}...`);
            }
            let requestUrl = '';
            let options = '';
            if (args.options.id) {
                requestUrl = `${args.options.webUrl}/_api/web/GetFileById('${encodeURIComponent(args.options.id)}')`;
            }
            else if (args.options.url) {
                requestUrl = `${args.options.webUrl}/_api/web/GetFileByServerRelativePath(DecodedUrl=@f)`;
            }
            if (args.options.asListItem) {
                options = '?$expand=ListItemAllFields';
            }
            else if (args.options.asFile || args.options.asString) {
                options = '/$value';
            }
            if (args.options.url) {
                if (options.indexOf('?') < 0) {
                    options += '?';
                }
                else {
                    options += '&';
                }
                options += `@f='${encodeURIComponent(args.options.url)}'`;
            }
            const requestOptions = {
                url: requestUrl + options,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                // Set responseType to arraybuffer, otherwise binary data will be encoded
                // to utf8 and binary data is corrupt
                responseType: args.options.asFile ? 'stream' : 'json'
            };
            try {
                const file = yield request_1.default.get(requestOptions);
                if (args.options.asFile && args.options.path) {
                    // Not possible to use async/await for this promise
                    yield new Promise((resolve, reject) => {
                        const writer = fs.createWriteStream(args.options.path);
                        file.data.pipe(writer);
                        writer.on('error', err => {
                            reject(err);
                        });
                        writer.on('close', () => {
                            const filePath = args.options.path;
                            if (this.verbose) {
                                logger.logToStderr(`File saved to path ${filePath}`);
                            }
                            return resolve();
                        });
                    });
                }
                else {
                    if (args.options.asString) {
                        logger.log(file.toString());
                    }
                    else {
                        const fileProperties = JSON.parse(JSON.stringify(file));
                        logger.log(args.options.asListItem ? fileProperties.ListItemAllFields : fileProperties);
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoFileGetCommand_instances = new WeakSet(), _SpoFileGetCommand_initTelemetry = function _SpoFileGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: (!(!args.options.id)).toString(),
            url: (!(!args.options.url)).toString(),
            asString: args.options.asString || false,
            asListItem: args.options.asListItem || false,
            asFile: args.options.asFile || false,
            path: (!(!args.options.path)).toString()
        });
    });
}, _SpoFileGetCommand_initOptions = function _SpoFileGetCommand_initOptions() {
    this.options.unshift({
        option: '-w, --webUrl <webUrl>'
    }, {
        option: '-u, --url [url]'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '--asString'
    }, {
        option: '--asListItem'
    }, {
        option: '--asFile'
    }, {
        option: '-p, --path [path]'
    });
}, _SpoFileGetCommand_initValidators = function _SpoFileGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.id) {
            if (!validation_1.validation.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
        }
        if (args.options.asFile && !args.options.path) {
            return 'The path should be specified when the --asFile option is used';
        }
        if (args.options.path && !fs.existsSync(path.dirname(args.options.path))) {
            return 'Specified path where to save the file does not exits';
        }
        if (args.options.asFile) {
            if (args.options.asListItem || args.options.asString) {
                return 'Specify to retrieve the file either as file, list item or string but not multiple';
            }
        }
        if (args.options.asListItem) {
            if (args.options.asFile || args.options.asString) {
                return 'Specify to retrieve the file either as file, list item or string but not multiple';
            }
        }
        return true;
    }));
}, _SpoFileGetCommand_initOptionSets = function _SpoFileGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'url']);
};
module.exports = new SpoFileGetCommand();
//# sourceMappingURL=file-get.js.map