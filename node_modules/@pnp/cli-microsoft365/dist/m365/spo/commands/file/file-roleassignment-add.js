"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFileRoleAssignmentAddCommand_instances, _SpoFileRoleAssignmentAddCommand_initTelemetry, _SpoFileRoleAssignmentAddCommand_initOptions, _SpoFileRoleAssignmentAddCommand_initValidators, _SpoFileRoleAssignmentAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const SpoUserGetCommand = require("../user/user-get");
const SpoGroupGetCommand = require("../group/group-get");
const SpoRoleDefinitionListCommand = require("../roledefinition/roledefinition-list");
const SpoFileGetCommand = require("./file-get");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const formatting_1 = require("../../../../utils/formatting");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoFileRoleAssignmentAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFileRoleAssignmentAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFileRoleAssignmentAddCommand_instances, "m", _SpoFileRoleAssignmentAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFileRoleAssignmentAddCommand_instances, "m", _SpoFileRoleAssignmentAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFileRoleAssignmentAddCommand_instances, "m", _SpoFileRoleAssignmentAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoFileRoleAssignmentAddCommand_instances, "m", _SpoFileRoleAssignmentAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.FILE_ROLEASSIGNMENT_ADD;
    }
    get description() {
        return 'Adds a role assignment to the specified file.';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Adding role assignment to file in site at ${args.options.webUrl}...`);
            }
            try {
                const fileUrl = yield this.getFileURL(args);
                const roleDefinitionId = yield this.getRoleDefinitionId(args.options);
                if (args.options.upn) {
                    const upnPrincipalId = yield this.getUserPrincipalId(args.options);
                    yield this.addRoleAssignment(fileUrl, args.options.webUrl, upnPrincipalId, roleDefinitionId);
                }
                else if (args.options.groupName) {
                    const groupPrincipalId = yield this.getGroupPrincipalId(args.options);
                    yield this.addRoleAssignment(fileUrl, args.options.webUrl, groupPrincipalId, roleDefinitionId);
                }
                else {
                    yield this.addRoleAssignment(fileUrl, args.options.webUrl, args.options.principalId, roleDefinitionId);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    addRoleAssignment(fileUrl, webUrl, principalId, roleDefinitionId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const requestOptions = {
                    url: `${webUrl}/_api/web/GetFileByServerRelativeUrl('${formatting_1.formatting.encodeQueryParameter(fileUrl)}')/ListItemAllFields/roleassignments/addroleassignment(principalid='${principalId}',roledefid='${roleDefinitionId}')`,
                    method: 'POST',
                    headers: {
                        'accept': 'application/json;odata=nometadata',
                        'content-type': 'application/json'
                    },
                    responseType: 'json'
                };
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    getRoleDefinitionId(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!options.roleDefinitionName) {
                return options.roleDefinitionId;
            }
            try {
                const roleDefinitionListCommandOptions = {
                    webUrl: options.webUrl,
                    output: 'json',
                    debug: this.debug,
                    verbose: this.verbose
                };
                const output = yield Cli_1.Cli.executeCommandWithOutput(SpoRoleDefinitionListCommand, { options: Object.assign(Object.assign({}, roleDefinitionListCommandOptions), { _: [] }) });
                const getRoleDefinitionListOutput = JSON.parse(output.stdout);
                const roleDefinitionId = getRoleDefinitionListOutput.find((role) => role.Name === options.roleDefinitionName).Id;
                return roleDefinitionId;
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    getGroupPrincipalId(options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const groupGetCommandOptions = {
                    webUrl: options.webUrl,
                    name: options.groupName,
                    output: 'json',
                    debug: this.debug,
                    verbose: this.verbose
                };
                const output = yield Cli_1.Cli.executeCommandWithOutput(SpoGroupGetCommand, { options: Object.assign(Object.assign({}, groupGetCommandOptions), { _: [] }) });
                const getGroupOutput = JSON.parse(output.stdout);
                return getGroupOutput.Id;
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    getUserPrincipalId(options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const userGetCommandOptions = {
                    webUrl: options.webUrl,
                    email: options.upn,
                    id: undefined,
                    output: 'json',
                    debug: this.debug,
                    verbose: this.verbose
                };
                const output = yield Cli_1.Cli.executeCommandWithOutput(SpoUserGetCommand, { options: Object.assign(Object.assign({}, userGetCommandOptions), { _: [] }) });
                const getUserOutput = JSON.parse(output.stdout);
                return getUserOutput.Id;
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    getFileURL(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.fileUrl) {
                return args.options.fileUrl;
            }
            const options = {
                webUrl: args.options.webUrl,
                id: args.options.fileId,
                output: 'json',
                debug: this.debug,
                verbose: this.verbose
            };
            const output = yield Cli_1.Cli.executeCommandWithOutput(SpoFileGetCommand, { options: Object.assign(Object.assign({}, options), { _: [] }) });
            const getFileOutput = JSON.parse(output.stdout);
            return getFileOutput.ServerRelativeUrl;
        });
    }
}
_SpoFileRoleAssignmentAddCommand_instances = new WeakSet(), _SpoFileRoleAssignmentAddCommand_initTelemetry = function _SpoFileRoleAssignmentAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            fileUrl: typeof args.options.fileUrl !== 'undefined',
            fileId: typeof args.options.fileId !== 'undefined',
            principalId: typeof args.options.principalId !== 'undefined',
            upn: typeof args.options.upn !== 'undefined',
            groupName: typeof args.options.groupName !== 'undefined',
            roleDefinitionId: typeof args.options.roleDefinitionId !== 'undefined',
            roleDefinitionName: typeof args.options.roleDefinitionName !== 'undefined'
        });
    });
}, _SpoFileRoleAssignmentAddCommand_initOptions = function _SpoFileRoleAssignmentAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--fileUrl [fileUrl]'
    }, {
        option: 'i, --fileId [fileId]'
    }, {
        option: '--principalId [principalId]'
    }, {
        option: '--upn [upn]'
    }, {
        option: '--groupName [groupName]'
    }, {
        option: '--roleDefinitionId [roleDefinitionId]'
    }, {
        option: '--roleDefinitionName [roleDefinitionName]'
    });
}, _SpoFileRoleAssignmentAddCommand_initValidators = function _SpoFileRoleAssignmentAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.fileId && !validation_1.validation.isValidGuid(args.options.fileId)) {
            return `${args.options.fileId} is not a valid GUID`;
        }
        if (args.options.principalId && isNaN(args.options.principalId)) {
            return `Specified principalId ${args.options.principalId} is not a number`;
        }
        if (args.options.roleDefinitionId && isNaN(args.options.roleDefinitionId)) {
            return `Specified roleDefinitionId ${args.options.roleDefinitionId} is not a number`;
        }
        const principalOptions = [args.options.principalId, args.options.upn, args.options.groupName];
        if (!principalOptions.some(item => item !== undefined)) {
            return `Specify either principalId, upn or groupName`;
        }
        if (principalOptions.filter(item => item !== undefined).length > 1) {
            return `Specify either principalId, upn or groupName but not multiple`;
        }
        const roleDefinitionOptions = [args.options.roleDefinitionId, args.options.roleDefinitionName];
        if (!roleDefinitionOptions.some(item => item !== undefined)) {
            return `Specify either roleDefinitionId or roleDefinitionName`;
        }
        if (roleDefinitionOptions.filter(item => item !== undefined).length > 1) {
            return `Specify either roleDefinitionId or roleDefinitionName but not multiple`;
        }
        return true;
    }));
}, _SpoFileRoleAssignmentAddCommand_initOptionSets = function _SpoFileRoleAssignmentAddCommand_initOptionSets() {
    this.optionSets.push(['fileId', 'fileUrl']);
};
module.exports = new SpoFileRoleAssignmentAddCommand();
//# sourceMappingURL=file-roleassignment-add.js.map