"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFileCheckinCommand_instances, _SpoFileCheckinCommand_initTelemetry, _SpoFileCheckinCommand_initOptions, _SpoFileCheckinCommand_initValidators, _SpoFileCheckinCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
var CheckinType;
(function (CheckinType) {
    CheckinType[CheckinType["Minor"] = 0] = "Minor";
    CheckinType[CheckinType["Major"] = 1] = "Major";
    CheckinType[CheckinType["Overwrite"] = 2] = "Overwrite";
})(CheckinType || (CheckinType = {}));
class SpoFileCheckinCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFileCheckinCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFileCheckinCommand_instances, "m", _SpoFileCheckinCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFileCheckinCommand_instances, "m", _SpoFileCheckinCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFileCheckinCommand_instances, "m", _SpoFileCheckinCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoFileCheckinCommand_instances, "m", _SpoFileCheckinCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.FILE_CHECKIN;
    }
    get description() {
        return 'Checks in specified file';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let type = CheckinType.Major;
            if (args.options.type) {
                switch (args.options.type.toLowerCase()) {
                    case 'minor':
                        type = CheckinType.Minor;
                        break;
                    case 'overwrite':
                        type = CheckinType.Overwrite;
                }
            }
            let comment = '';
            if (args.options.comment) {
                comment = encodeURIComponent(args.options.comment);
            }
            let requestUrl = '';
            if (args.options.id) {
                requestUrl = `${args.options.webUrl}/_api/web/GetFileById('${encodeURIComponent(args.options.id)}')/checkin(comment='${comment}',checkintype=${type})`;
            }
            if (args.options.fileUrl) {
                requestUrl = `${args.options.webUrl}/_api/web/GetFileByServerRelativeUrl('${encodeURIComponent(args.options.fileUrl)}')/checkin(comment='${comment}',checkintype=${type})`;
            }
            const requestOptions = {
                url: requestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoFileCheckinCommand_instances = new WeakSet(), _SpoFileCheckinCommand_initTelemetry = function _SpoFileCheckinCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: (!(!args.options.id)).toString(),
            url: (!(!args.options.fileUrl)).toString(),
            type: args.options.type || 'Major',
            comment: typeof args.options.comment !== 'undefined'
        });
    });
}, _SpoFileCheckinCommand_initOptions = function _SpoFileCheckinCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-f, --fileUrl [fileUrl]'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '-t, --type [type]',
        autocomplete: ['Minor', 'Major', 'Overwrite']
    }, {
        option: '--comment [comment]'
    });
}, _SpoFileCheckinCommand_initValidators = function _SpoFileCheckinCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.id) {
            if (!validation_1.validation.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
        }
        if (args.options.comment && args.options.comment.length > 1023) {
            return 'The length of the comment must be less than 1024 letters';
        }
        if (args.options.type) {
            const allowedValues = ['minor', 'major', 'overwrite'];
            const type = args.options.type.toLowerCase();
            if (allowedValues.indexOf(type) === -1) {
                return 'Wrong type specified. Available values are Minor|Major|Overwrite';
            }
        }
        return true;
    }));
}, _SpoFileCheckinCommand_initOptionSets = function _SpoFileCheckinCommand_initOptionSets() {
    this.optionSets.push(['fileUrl', 'id']);
};
module.exports = new SpoFileCheckinCommand();
//# sourceMappingURL=file-checkin.js.map