"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteScriptAddCommand_instances, _SpoSiteScriptAddCommand_initTelemetry, _SpoSiteScriptAddCommand_initOptions, _SpoSiteScriptAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteScriptAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteScriptAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteScriptAddCommand_instances, "m", _SpoSiteScriptAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteScriptAddCommand_instances, "m", _SpoSiteScriptAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteScriptAddCommand_instances, "m", _SpoSiteScriptAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITESCRIPT_ADD;
    }
    get description() {
        return 'Adds site script for use with site designs';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                const requestDigest = yield spo_1.spo.getRequestDigest(spoUrl);
                const requestOptions = {
                    url: `${spoUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.CreateSiteScript(Title=@title, Description=@description)?@title='${encodeURIComponent(args.options.title)}'&@description='${encodeURIComponent(args.options.description || '')}'`,
                    headers: {
                        'X-RequestDigest': requestDigest.FormDigestValue,
                        'content-type': 'application/json;charset=utf-8',
                        accept: 'application/json;odata=nometadata'
                    },
                    data: JSON.parse(args.options.content),
                    responseType: 'json'
                };
                const res = yield request_1.default.post(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoSiteScriptAddCommand_instances = new WeakSet(), _SpoSiteScriptAddCommand_initTelemetry = function _SpoSiteScriptAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            description: typeof args.options.description !== 'undefined'
        });
    });
}, _SpoSiteScriptAddCommand_initOptions = function _SpoSiteScriptAddCommand_initOptions() {
    this.options.unshift({
        option: '-t, --title <title>'
    }, {
        option: '-c, --content <content>'
    }, {
        option: '-d, --description [description]'
    });
}, _SpoSiteScriptAddCommand_initValidators = function _SpoSiteScriptAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        try {
            JSON.parse(args.options.content);
        }
        catch (e) {
            return `Specified content value is not a valid JSON string. Error: ${e}`;
        }
        return true;
    }));
};
module.exports = new SpoSiteScriptAddCommand();
//# sourceMappingURL=sitescript-add.js.map