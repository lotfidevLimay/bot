"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteScriptRemoveCommand_instances, _SpoSiteScriptRemoveCommand_initTelemetry, _SpoSiteScriptRemoveCommand_initOptions, _SpoSiteScriptRemoveCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteScriptRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteScriptRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteScriptRemoveCommand_instances, "m", _SpoSiteScriptRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteScriptRemoveCommand_instances, "m", _SpoSiteScriptRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteScriptRemoveCommand_instances, "m", _SpoSiteScriptRemoveCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITESCRIPT_REMOVE;
    }
    get description() {
        return 'Removes the specified site script';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeSiteScript = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const spoUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                    const formDigest = yield spo_1.spo.getRequestDigest(spoUrl);
                    const requestOptions = {
                        url: `${spoUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.DeleteSiteScript`,
                        headers: {
                            'X-RequestDigest': formDigest.FormDigestValue,
                            'content-type': 'application/json;charset=utf-8',
                            accept: 'application/json;odata=nometadata'
                        },
                        data: { id: args.options.id },
                        responseType: 'json'
                    };
                    yield request_1.default.post(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeSiteScript();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the site script ${args.options.id}?`
                });
                if (result.continue) {
                    yield removeSiteScript();
                }
            }
        });
    }
}
_SpoSiteScriptRemoveCommand_instances = new WeakSet(), _SpoSiteScriptRemoveCommand_initTelemetry = function _SpoSiteScriptRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            confirm: args.options.confirm || false
        });
    });
}, _SpoSiteScriptRemoveCommand_initOptions = function _SpoSiteScriptRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '--confirm'
    });
}, _SpoSiteScriptRemoveCommand_initValidators = function _SpoSiteScriptRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new SpoSiteScriptRemoveCommand();
//# sourceMappingURL=sitescript-remove.js.map