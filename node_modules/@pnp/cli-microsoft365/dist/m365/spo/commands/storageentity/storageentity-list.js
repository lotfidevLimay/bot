"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoStorageEntityListCommand_instances, _SpoStorageEntityListCommand_initOptions, _SpoStorageEntityListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoStorageEntityListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoStorageEntityListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoStorageEntityListCommand_instances, "m", _SpoStorageEntityListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoStorageEntityListCommand_instances, "m", _SpoStorageEntityListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.STORAGEENTITY_LIST;
    }
    get description() {
        return 'Lists tenant properties stored on the specified SharePoint Online app catalog';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving details for all tenant properties in ${args.options.appCatalogUrl}...`);
            }
            const requestOptions = {
                url: `${args.options.appCatalogUrl}/_api/web/AllProperties?$select=storageentitiesindex`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                const web = yield request_1.default.get(requestOptions);
                if (!web.storageentitiesindex ||
                    web.storageentitiesindex.trim().length === 0) {
                    if (this.verbose) {
                        logger.logToStderr('No tenant properties found');
                    }
                }
                else {
                    const properties = JSON.parse(web.storageentitiesindex);
                    const keys = Object.keys(properties);
                    if (keys.length === 0) {
                        if (this.verbose) {
                            logger.logToStderr('No tenant properties found');
                        }
                    }
                    else {
                        logger.log(keys.map((key) => {
                            const property = properties[key];
                            return {
                                Key: key,
                                Value: property.Value,
                                Description: property.Description,
                                Comment: property.Comment
                            };
                        }));
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoStorageEntityListCommand_instances = new WeakSet(), _SpoStorageEntityListCommand_initOptions = function _SpoStorageEntityListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --appCatalogUrl <appCatalogUrl>'
    });
}, _SpoStorageEntityListCommand_initValidators = function _SpoStorageEntityListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.appCatalogUrl); }));
};
module.exports = new SpoStorageEntityListCommand();
//# sourceMappingURL=storageentity-list.js.map