"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoStorageEntitySetCommand_instances, _SpoStorageEntitySetCommand_initTelemetry, _SpoStorageEntitySetCommand_initOptions, _SpoStorageEntitySetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoStorageEntitySetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoStorageEntitySetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoStorageEntitySetCommand_instances, "m", _SpoStorageEntitySetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoStorageEntitySetCommand_instances, "m", _SpoStorageEntitySetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoStorageEntitySetCommand_instances, "m", _SpoStorageEntitySetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.STORAGEENTITY_SET;
    }
    get description() {
        return 'Sets tenant property on the specified SharePoint Online app catalog';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                const res = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                if (this.verbose) {
                    logger.logToStderr(`Setting tenant property ${args.options.key} in ${args.options.appCatalogUrl}...`);
                }
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': res.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="24" ObjectPathId="23" /><ObjectPath Id="26" ObjectPathId="25" /><ObjectPath Id="28" ObjectPathId="27" /><Method Name="SetStorageEntity" Id="29" ObjectPathId="27"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.key)}</Parameter><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.value)}</Parameter><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.description || '')}</Parameter><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.comment || '')}</Parameter></Parameters></Method></Actions><ObjectPaths><Constructor Id="23" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /><Method Id="25" ParentId="23" Name="GetSiteByUrl"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.appCatalogUrl)}</Parameter></Parameters></Method><Property Id="27" ParentId="25" Name="RootWeb" /></ObjectPaths></Request>`
                };
                const processQuery = yield request_1.default.post(requestOptions);
                const json = JSON.parse(processQuery);
                const response = json[0];
                if (response.ErrorInfo) {
                    if (this.verbose && response.ErrorInfo.ErrorMessage.indexOf('Access denied.') > -1) {
                        logger.logToStderr('');
                        logger.logToStderr(`This error is often caused by invalid URL of the app catalog site. Verify, that the URL you specified as an argument of the ${commands_1.default.STORAGEENTITY_SET} command is a valid app catalog URL and try again.`);
                        logger.logToStderr('');
                    }
                    throw response.ErrorInfo.ErrorMessage;
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoStorageEntitySetCommand_instances = new WeakSet(), _SpoStorageEntitySetCommand_initTelemetry = function _SpoStorageEntitySetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            description: (!(!args.options.description)).toString(),
            comment: (!(!args.options.comment)).toString()
        });
    });
}, _SpoStorageEntitySetCommand_initOptions = function _SpoStorageEntitySetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --appCatalogUrl <appCatalogUrl>'
    }, {
        option: '-k, --key <key>'
    }, {
        option: '-v, --value <value>'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '-c, --comment [comment]'
    });
}, _SpoStorageEntitySetCommand_initValidators = function _SpoStorageEntitySetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.appCatalogUrl); }));
};
module.exports = new SpoStorageEntitySetCommand();
//# sourceMappingURL=storageentity-set.js.map