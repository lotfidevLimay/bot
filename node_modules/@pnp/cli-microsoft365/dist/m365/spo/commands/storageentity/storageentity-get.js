"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoStorageEntityGetCommand_instances, _SpoStorageEntityGetCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoStorageEntityGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoStorageEntityGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoStorageEntityGetCommand_instances, "m", _SpoStorageEntityGetCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.STORAGEENTITY_GET;
    }
    get description() {
        return 'Get details for the specified tenant property';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                const requestOptions = {
                    url: `${spoUrl}/_api/web/GetStorageEntity('${encodeURIComponent(args.options.key)}')`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const property = yield request_1.default.get(requestOptions);
                if (property["odata.null"] === true) {
                    if (this.verbose) {
                        logger.logToStderr(`Property with key ${args.options.key} not found`);
                    }
                }
                else {
                    logger.log({
                        Key: args.options.key,
                        Value: property.Value,
                        Description: property.Description,
                        Comment: property.Comment
                    });
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoStorageEntityGetCommand_instances = new WeakSet(), _SpoStorageEntityGetCommand_initOptions = function _SpoStorageEntityGetCommand_initOptions() {
    this.options.unshift({
        option: '-k, --key <key>'
    });
};
module.exports = new SpoStorageEntityGetCommand();
//# sourceMappingURL=storageentity-get.js.map