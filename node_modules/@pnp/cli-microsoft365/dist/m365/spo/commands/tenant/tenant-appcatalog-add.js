"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoTenantAppCatalogAddCommand_instances, _SpoTenantAppCatalogAddCommand_initTelemetry, _SpoTenantAppCatalogAddCommand_initOptions, _SpoTenantAppCatalogAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const Command_1 = require("../../../../Command");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const spoSiteAddCommand = require("../site/site-add");
const spoSiteGetCommand = require("../site/site-get");
const spoSiteRemoveCommand = require("../site/site-remove");
const spoTenantAppCatalogUrlGetCommand = require("./tenant-appcatalogurl-get");
class SpoTenantAppCatalogAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoTenantAppCatalogAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoTenantAppCatalogAddCommand_instances, "m", _SpoTenantAppCatalogAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoTenantAppCatalogAddCommand_instances, "m", _SpoTenantAppCatalogAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoTenantAppCatalogAddCommand_instances, "m", _SpoTenantAppCatalogAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.TENANT_APPCATALOG_ADD;
    }
    get description() {
        return 'Creates new tenant app catalog site';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr('Checking for existing app catalog URL...');
            }
            const spoTenantAppCatalogUrlGetCommandOutput = yield Cli_1.Cli.executeCommandWithOutput(spoTenantAppCatalogUrlGetCommand, { options: { output: 'text', _: [] } });
            const appCatalogUrl = spoTenantAppCatalogUrlGetCommandOutput.stdout;
            if (!appCatalogUrl) {
                if (this.verbose) {
                    logger.logToStderr('No app catalog URL found');
                }
            }
            else {
                if (this.verbose) {
                    logger.logToStderr(`Found app catalog URL ${appCatalogUrl}`);
                }
                //Using JSON.parse
                yield this.ensureNoExistingSite(appCatalogUrl, args.options.force, logger);
            }
            yield this.ensureNoExistingSite(args.options.url, args.options.force, logger);
            yield this.createAppCatalog(args.options, logger);
        });
    }
    ensureNoExistingSite(url, force, logger) {
        return new Promise((resolve, reject) => {
            if (this.verbose) {
                logger.logToStderr(`Checking if site ${url} exists...`);
            }
            const siteGetOptions = {
                options: {
                    url: url,
                    verbose: this.verbose,
                    debug: this.debug,
                    _: []
                }
            };
            Cli_1.Cli
                .executeCommandWithOutput(spoSiteGetCommand, siteGetOptions)
                .then(() => {
                if (this.verbose) {
                    logger.logToStderr(`Found site ${url}`);
                }
                if (!force) {
                    return reject(new Command_1.CommandError(`Another site exists at ${url}`));
                }
                if (this.verbose) {
                    logger.logToStderr(`Deleting site ${url}...`);
                }
                const siteRemoveOptions = {
                    url: url,
                    skipRecycleBin: true,
                    wait: true,
                    confirm: true,
                    verbose: this.verbose,
                    debug: this.debug
                };
                Cli_1.Cli
                    .executeCommand(spoSiteRemoveCommand, { options: Object.assign(Object.assign({}, siteRemoveOptions), { _: [] }) })
                    .then(() => resolve(), (err) => reject(err));
            }, (err) => {
                if (err.error.message !== 'File Not Found.' && err.error.message !== '404 FILE NOT FOUND') {
                    // some other error occurred
                    return reject(err.error);
                }
                if (this.verbose) {
                    logger.logToStderr(`No site found at ${url}`);
                }
                // site not found. continue
                resolve();
            });
        });
    }
    createAppCatalog(options, logger) {
        if (this.verbose) {
            logger.logToStderr(`Creating app catalog at ${options.url}...`);
        }
        const siteAddOptions = {
            webTemplate: 'APPCATALOG#0',
            title: 'App catalog',
            type: 'ClassicSite',
            url: options.url,
            timeZone: options.timeZone,
            owners: options.owner,
            wait: options.wait,
            verbose: this.verbose,
            debug: this.debug,
            removeDeletedSite: false
        };
        return Cli_1.Cli.executeCommand(spoSiteAddCommand, { options: Object.assign(Object.assign({}, siteAddOptions), { _: [] }) });
    }
}
_SpoTenantAppCatalogAddCommand_instances = new WeakSet(), _SpoTenantAppCatalogAddCommand_initTelemetry = function _SpoTenantAppCatalogAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            wait: args.options.wait || false,
            force: args.options.force || false
        });
    });
}, _SpoTenantAppCatalogAddCommand_initOptions = function _SpoTenantAppCatalogAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '--owner <owner>'
    }, {
        option: '-z, --timeZone <timeZone>'
    }, {
        option: '--wait'
    }, {
        option: '--force'
    });
}, _SpoTenantAppCatalogAddCommand_initValidators = function _SpoTenantAppCatalogAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.url);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (typeof args.options.timeZone !== 'number') {
            return `${args.options.timeZone} is not a number`;
        }
        return true;
    }));
};
module.exports = new SpoTenantAppCatalogAddCommand();
//# sourceMappingURL=tenant-appcatalog-add.js.map