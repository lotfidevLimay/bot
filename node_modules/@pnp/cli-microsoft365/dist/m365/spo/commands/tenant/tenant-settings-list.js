"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoTenantSettingsListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.TENANT_SETTINGS_LIST;
    }
    get description() {
        return 'Lists the global tenant settings';
    }
    commandAction(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                const res = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': res.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="4" ObjectPathId="3" /><Query Id="5" ObjectPathId="3"><Query SelectAllProperties="true"><Properties><Property Name="HideDefaultThemes" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Constructor Id="3" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                };
                const processQuery = yield request_1.default.post(requestOptions);
                const json = JSON.parse(processQuery);
                const response = json[0];
                if (response.ErrorInfo) {
                    throw response.ErrorInfo.ErrorMessage;
                }
                const result = json[4];
                delete result['_ObjectIdentity_'];
                delete result['_ObjectType_'];
                // map integers to their enums
                const sharingLinkType = ['None', 'Direct', 'Internal', 'AnonymousAccess'];
                const sharingCapabilities = ['Disabled', 'ExternalUserSharingOnly', 'ExternalUserAndGuestSharing', 'ExistingExternalUserSharingOnly'];
                const sharingDomainRestrictionModes = ['None', 'AllowList', 'BlockList'];
                const sharingState = ['Unspecified', 'On', 'Off'];
                const anonymousLinkType = ['None', 'View', 'Edit'];
                const sharingPermissionType = ['None', 'View', 'Edit'];
                const sPOConditionalAccessPolicyType = ['AllowFullAccess', 'AllowLimitedAccess', 'BlockAccess'];
                const specialCharactersState = ['NoPreference', 'Allowed', 'Disallowed'];
                const sPOLimitedAccessFileType = ['OfficeOnlineFilesOnly', 'WebPreviewableFiles', 'OtherFiles'];
                result['SharingCapability'] = sharingCapabilities[result['SharingCapability']];
                result['SharingDomainRestrictionMode'] = sharingDomainRestrictionModes[result['SharingDomainRestrictionMode']];
                result['ODBMembersCanShare'] = sharingState[result['ODBMembersCanShare']];
                result['ODBAccessRequests'] = sharingState[result['ODBAccessRequests']];
                result['DefaultSharingLinkType'] = sharingLinkType[result['DefaultSharingLinkType']];
                result['FileAnonymousLinkType'] = anonymousLinkType[result['FileAnonymousLinkType']];
                result['FolderAnonymousLinkType'] = anonymousLinkType[result['FolderAnonymousLinkType']];
                result['DefaultLinkPermission'] = sharingPermissionType[result['DefaultLinkPermission']];
                result['ConditionalAccessPolicy'] = sPOConditionalAccessPolicyType[result['ConditionalAccessPolicy']];
                result['SpecialCharactersStateInFileFolderNames'] = specialCharactersState[result['SpecialCharactersStateInFileFolderNames']];
                result['LimitedAccessFileType'] = sPOLimitedAccessFileType[result['LimitedAccessFileType']];
                logger.log(result);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
module.exports = new SpoTenantSettingsListCommand();
//# sourceMappingURL=tenant-settings-list.js.map