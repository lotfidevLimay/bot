"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoTenantRecycleBinItemListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.TENANT_RECYCLEBINITEM_LIST;
    }
    get description() {
        return 'Returns all modern and classic site collections in the tenant scoped recycle bin';
    }
    defaultProperties() {
        return ['DaysRemaining', 'DeletionTime', 'Url'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                const res = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': res.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="2" ObjectPathId="1" /><ObjectPath Id="4" ObjectPathId="3" /><Query Id="5" ObjectPathId="3"><Query SelectAllProperties="false"><Properties /></Query><ChildItemQuery SelectAllProperties="true"><Properties><Property Name="Url" ScalarProperty="true" /><Property Name="SiteId" ScalarProperty="true" /><Property Name="DaysRemaining" ScalarProperty="true" /><Property Name="Status" ScalarProperty="true" /></Properties></ChildItemQuery></Query></Actions><ObjectPaths><Constructor Id="1" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /><Method Id="3" ParentId="1" Name="GetDeletedSitePropertiesFromSharePoint"><Parameters><Parameter Type="String">0</Parameter></Parameters></Method></ObjectPaths></Request>`
                };
                const processQuery = yield request_1.default.post(requestOptions);
                const json = JSON.parse(processQuery);
                const response = json[0];
                if (response.ErrorInfo) {
                    throw response.ErrorInfo.ErrorMessage;
                }
                const results = json[json.length - 1];
                if (args.options.output !== 'json') {
                    results._Child_Items_.forEach(s => {
                        s.DaysRemaining = Number(s.DaysRemaining);
                        s.DeletionTime = this.dateParser(s.DeletionTime);
                    });
                }
                logger.log(results._Child_Items_);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    dateParser(dateString) {
        const d = dateString.replace('/Date(', '').replace(')/', '').split(',').map(Number);
        return new Date(d[0], d[1], d[2], d[3], d[4], d[5], d[6]);
    }
}
module.exports = new SpoTenantRecycleBinItemListCommand();
//# sourceMappingURL=tenant-recyclebinitem-list.js.map