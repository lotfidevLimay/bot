"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoTenantRecycleBinItemRemoveCommand_instances, _SpoTenantRecycleBinItemRemoveCommand_initTelemetry, _SpoTenantRecycleBinItemRemoveCommand_initOptions, _SpoTenantRecycleBinItemRemoveCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoTenantRecycleBinItemRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoTenantRecycleBinItemRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoTenantRecycleBinItemRemoveCommand_instances, "m", _SpoTenantRecycleBinItemRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoTenantRecycleBinItemRemoveCommand_instances, "m", _SpoTenantRecycleBinItemRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoTenantRecycleBinItemRemoveCommand_instances, "m", _SpoTenantRecycleBinItemRemoveCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.TENANT_RECYCLEBINITEM_REMOVE;
    }
    get description() {
        return 'Removes the specified deleted site collection from tenant recycle bin';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeDeletedSite = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const adminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                    const res = yield spo_1.spo.ensureFormDigest(adminUrl, logger, this.context, this.debug);
                    if (this.verbose) {
                        logger.logToStderr(`Removing deleted site collection ${args.options.url}...`);
                    }
                    const requestOptions = {
                        url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                        headers: {
                            'X-RequestDigest': res.FormDigestValue
                        },
                        data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="16" ObjectPathId="15" /><Query Id="17" ObjectPathId="15"><Query SelectAllProperties="false"><Properties><Property Name="PollingInterval" ScalarProperty="true" /><Property Name="IsComplete" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Method Id="15" ParentId="1" Name="RemoveDeletedSite"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.url)}</Parameter></Parameters></Method><Constructor Id="1" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                    };
                    const processQuery = yield request_1.default.post(requestOptions);
                    const json = JSON.parse(processQuery);
                    const response = json[0];
                    if (response.ErrorInfo) {
                        throw response.ErrorInfo.ErrorMessage;
                    }
                    else {
                        const operation = json[json.length - 1];
                        const isComplete = operation.IsComplete;
                        if (!args.options.wait || isComplete) {
                            return;
                        }
                        yield new Promise((resolve, reject) => {
                            setTimeout(() => {
                                spo_1.spo.waitUntilFinished({
                                    operationId: JSON.stringify(operation._ObjectIdentity_),
                                    siteUrl: this.spoAdminUrl,
                                    resolve,
                                    reject,
                                    logger,
                                    currentContext: this.context,
                                    dots: this.dots,
                                    debug: this.debug,
                                    verbose: this.verbose
                                });
                            }, operation.PollingInterval);
                        });
                    }
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeDeletedSite();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the deleted site collection ${args.options.url} from tenant recycle bin?`
                });
                if (result.continue) {
                    yield removeDeletedSite();
                }
            }
        });
    }
}
_SpoTenantRecycleBinItemRemoveCommand_instances = new WeakSet(), _SpoTenantRecycleBinItemRemoveCommand_initTelemetry = function _SpoTenantRecycleBinItemRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            wait: typeof args.options.wait !== 'undefined',
            confirm: typeof args.options.confirm !== 'undefined'
        });
    });
}, _SpoTenantRecycleBinItemRemoveCommand_initOptions = function _SpoTenantRecycleBinItemRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '--wait'
    }, {
        option: '--confirm'
    });
}, _SpoTenantRecycleBinItemRemoveCommand_initValidators = function _SpoTenantRecycleBinItemRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.url); }));
};
module.exports = new SpoTenantRecycleBinItemRemoveCommand();
//# sourceMappingURL=tenant-recyclebinitem-remove.js.map