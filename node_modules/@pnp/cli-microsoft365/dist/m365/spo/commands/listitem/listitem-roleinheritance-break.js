"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListItemRoleInheritanceBreakCommand_instances, _SpoListItemRoleInheritanceBreakCommand_initTelemetry, _SpoListItemRoleInheritanceBreakCommand_initOptions, _SpoListItemRoleInheritanceBreakCommand_initValidators, _SpoListItemRoleInheritanceBreakCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListItemRoleInheritanceBreakCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListItemRoleInheritanceBreakCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListItemRoleInheritanceBreakCommand_instances, "m", _SpoListItemRoleInheritanceBreakCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListItemRoleInheritanceBreakCommand_instances, "m", _SpoListItemRoleInheritanceBreakCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListItemRoleInheritanceBreakCommand_instances, "m", _SpoListItemRoleInheritanceBreakCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListItemRoleInheritanceBreakCommand_instances, "m", _SpoListItemRoleInheritanceBreakCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LISTITEM_ROLEINHERITANCE_BREAK;
    }
    get description() {
        return 'Break inheritance of list item';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Breaking role inheritance of list item in site at ${args.options.webUrl}...`);
            }
            let requestUrl = `${args.options.webUrl}/_api/web`;
            if (args.options.listId) {
                requestUrl += `/lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')`;
            }
            else if (args.options.listTitle) {
                requestUrl += `/lists/getbytitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')`;
            }
            else if (args.options.listUrl) {
                const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                requestUrl += `/GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')`;
            }
            let keepExistingPermissions = true;
            if (args.options.clearExistingPermissions) {
                keepExistingPermissions = !args.options.clearExistingPermissions;
            }
            const requestOptions = {
                url: `${requestUrl}/items(${args.options.listItemId})/breakroleinheritance(${keepExistingPermissions})`,
                method: 'POST',
                headers: {
                    'accept': 'application/json;odata=nometadata',
                    'content-type': 'application/json'
                },
                responseType: 'json'
            };
            try {
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoListItemRoleInheritanceBreakCommand_instances = new WeakSet(), _SpoListItemRoleInheritanceBreakCommand_initTelemetry = function _SpoListItemRoleInheritanceBreakCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            clearExistingPermissions: args.options.clearExistingPermissions === true
        });
    });
}, _SpoListItemRoleInheritanceBreakCommand_initOptions = function _SpoListItemRoleInheritanceBreakCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--listItemId <listItemId>'
    }, {
        option: '-l, --listId [listId]'
    }, {
        option: '-t, --listTitle [listTitle]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-c, --clearExistingPermissions'
    });
}, _SpoListItemRoleInheritanceBreakCommand_initValidators = function _SpoListItemRoleInheritanceBreakCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} is not a valid GUID`;
        }
        if (isNaN(args.options.listItemId)) {
            return `${args.options.listItemId} is not a number`;
        }
        return true;
    }));
}, _SpoListItemRoleInheritanceBreakCommand_initOptionSets = function _SpoListItemRoleInheritanceBreakCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listTitle', 'listUrl']);
};
module.exports = new SpoListItemRoleInheritanceBreakCommand();
//# sourceMappingURL=listitem-roleinheritance-break.js.map