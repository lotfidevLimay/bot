"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListItemSetCommand_instances, _SpoListItemSetCommand_initTelemetry, _SpoListItemSetCommand_initOptions, _SpoListItemSetCommand_initValidators, _SpoListItemSetCommand_initTypes, _SpoListItemSetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListItemSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListItemSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListItemSetCommand_instances, "m", _SpoListItemSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListItemSetCommand_instances, "m", _SpoListItemSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListItemSetCommand_instances, "m", _SpoListItemSetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListItemSetCommand_instances, "m", _SpoListItemSetCommand_initTypes).call(this);
        __classPrivateFieldGet(this, _SpoListItemSetCommand_instances, "m", _SpoListItemSetCommand_initOptionSets).call(this);
    }
    allowUnknownOptions() {
        return true;
    }
    get name() {
        return commands_1.default.LISTITEM_SET;
    }
    get description() {
        return 'Updates a list item in the specified list';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let contentTypeName = '';
            let listId = '';
            try {
                let requestUrl = `${args.options.webUrl}/_api/web`;
                if (args.options.listId) {
                    listId = args.options.listId;
                    requestUrl += `/lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')`;
                }
                else if (args.options.listTitle) {
                    requestUrl += `/lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')`;
                }
                else if (args.options.listUrl) {
                    const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                    requestUrl += `/GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')`;
                }
                if (args.options.systemUpdate && !args.options.listId) {
                    if (this.verbose) {
                        logger.logToStderr(`Getting list id...`);
                    }
                    const listRequestOptions = {
                        url: `${requestUrl}?$select=Id`,
                        headers: {
                            'accept': 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const list = yield request_1.default.get(listRequestOptions);
                    listId = list.Id;
                }
                if (args.options.contentType) {
                    if (this.verbose) {
                        logger.logToStderr(`Getting content types for list...`);
                    }
                    const requestOptions = {
                        url: `${requestUrl}/contenttypes?$select=Name,Id`,
                        headers: {
                            'accept': 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const contentTypes = yield request_1.default.get(requestOptions);
                    if (this.debug) {
                        logger.logToStderr('content type lookup response...');
                        logger.logToStderr(contentTypes);
                    }
                    const foundContentType = contentTypes.value.filter((ct) => {
                        const contentTypeMatch = ct.Id.StringValue === args.options.contentType || ct.Name === args.options.contentType;
                        if (this.debug) {
                            logger.logToStderr(`Checking content type value [${ct.Name}]: ${contentTypeMatch}`);
                        }
                        return contentTypeMatch;
                    });
                    if (this.debug) {
                        logger.logToStderr('content type filter output...');
                        logger.logToStderr(foundContentType);
                    }
                    if (foundContentType.length > 0) {
                        contentTypeName = foundContentType[0].Name;
                    }
                    // After checking for content types, throw an error if the name is blank
                    if (!contentTypeName || contentTypeName === '') {
                        throw `Specified content type '${args.options.contentType}' doesn't exist on the target list`;
                    }
                    if (this.debug) {
                        logger.logToStderr(`using content type name: ${contentTypeName}`);
                    }
                }
                let res = undefined;
                if (args.options.systemUpdate) {
                    if (this.debug) {
                        logger.logToStderr(`getting request digest for systemUpdate request`);
                    }
                    res = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                }
                if (this.verbose) {
                    logger.logToStderr(`Updating item in list ${args.options.listId || args.options.listTitle || args.options.listUrl} in site ${args.options.webUrl}...`);
                }
                const formDigestValue = args.options.systemUpdate ? res['FormDigestValue'] : '';
                let objectIdentity = '';
                if (args.options.systemUpdate) {
                    objectIdentity = yield this.requestObjectIdentity(args.options.webUrl, logger, formDigestValue);
                }
                const additionalContentType = (args.options.systemUpdate && args.options.contentType && contentTypeName !== '') ? `
            <Parameters>
              <Parameter Type="String">ContentType</Parameter>
              <Parameter Type="String">${contentTypeName}</Parameter>
            </Parameters>`
                    : ``;
                const requestBody = args.options.systemUpdate ?
                    `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009">
          <Actions>
            <Method Name="ParseAndSetFieldValue" Id="1" ObjectPathId="147">${this.mapRequestBody(args.options).join()}${additionalContentType}
            </Method>
            <Method Name="SystemUpdate" Id="2" ObjectPathId="147" />
          </Actions>
          <ObjectPaths>
            <Identity Id="147" Name="${objectIdentity}:list:${listId}:item:${args.options.id},1" />
          </ObjectPaths>
        </Request>`
                    : {
                        formValues: this.mapRequestBody(args.options)
                    };
                if (args.options.contentType && contentTypeName !== '' && !args.options.systemUpdate) {
                    if (this.debug) {
                        logger.logToStderr(`Specifying content type name [${contentTypeName}] in request body`);
                    }
                    requestBody.formValues.push({
                        FieldName: 'ContentType',
                        FieldValue: contentTypeName
                    });
                }
                const requestOptions = args.options.systemUpdate ?
                    {
                        url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                        headers: {
                            'Content-Type': 'text/xml',
                            'X-RequestDigest': formDigestValue
                        },
                        data: requestBody
                    } :
                    {
                        url: `${requestUrl}/items(${args.options.id})/ValidateUpdateListItem()`,
                        headers: {
                            'accept': 'application/json;odata=nometadata'
                        },
                        data: requestBody,
                        responseType: 'json'
                    };
                const response = yield request_1.default.post(requestOptions);
                let itemId = 0;
                if (args.options.systemUpdate) {
                    if (response.indexOf("ErrorMessage") > -1) {
                        throw `Error occurred in systemUpdate operation - ${response}`;
                    }
                    else {
                        itemId = Number(args.options.id);
                    }
                }
                else {
                    // Response is from /ValidateUpdateListItem POST call, perform get on updated item to get all field values
                    const returnedData = response.value;
                    if (!returnedData[0].ItemId) {
                        throw `Item didn't update successfully`;
                    }
                    else {
                        itemId = returnedData[0].ItemId;
                    }
                }
                const requestOptionsItems = {
                    url: `${requestUrl}/items(${itemId})`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const itemsResponse = yield request_1.default.get(requestOptionsItems);
                logger.log(itemsResponse);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    mapRequestBody(options) {
        const requestBody = [];
        const excludeOptions = [
            'listTitle',
            'listId',
            'listUrl',
            'webUrl',
            'id',
            'contentType',
            'systemUpdate',
            'debug',
            'verbose',
            'output',
            's',
            'i',
            'o',
            'u',
            't',
            '_'
        ];
        Object.keys(options).forEach(key => {
            if (excludeOptions.indexOf(key) === -1) {
                if (options.systemUpdate) {
                    requestBody.push(`
            <Parameters>
              <Parameter Type="String">${key}</Parameter>
              <Parameter Type="String">${options[key].toString()}</Parameter>
            </Parameters>`);
                }
                else {
                    requestBody.push({ FieldName: key, FieldValue: options[key].toString() });
                }
            }
        });
        return requestBody;
    }
    /**
     * Requests web object identity for the current web.
     * This request has to be send before we can construct the property bag request.
     * The response data looks like:
     * _ObjectIdentity_=<GUID>|<GUID>:site:<GUID>:web:<GUID>
     * _ObjectType_=SP.Web
     * ServerRelativeUrl=/sites/contoso
     * The ObjectIdentity is needed to create another request to retrieve the property bag or set property.
     * @param webUrl web url
     * @param cmd command cmd
     */
    requestObjectIdentity(webUrl, logger, formDigestValue) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: `${webUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': formDigestValue
                },
                data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><Query Id="1" ObjectPathId="5"><Query SelectAllProperties="false"><Properties><Property Name="ServerRelativeUrl" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Property Id="5" ParentId="3" Name="Web" /><StaticProperty Id="3" TypeId="{3747adcd-a3c3-41b9-bfab-4a64dd2f1e0a}" Name="Current" /></ObjectPaths></Request>`
            };
            const response = yield request_1.default.post(requestOptions);
            if (this.debug) {
                logger.logToStderr('Attempt to get _ObjectIdentity_ key values');
            }
            const json = JSON.parse(response);
            const contents = json.find(x => { return x['ErrorInfo']; });
            if (contents && contents.ErrorInfo) {
                throw contents.ErrorInfo.ErrorMessage || 'ClientSvc unknown error';
            }
            const identityObject = json.find(x => { return x['_ObjectIdentity_']; });
            if (identityObject) {
                return identityObject['_ObjectIdentity_'];
            }
            throw 'Cannot proceed. _ObjectIdentity_ not found'; // this is not supposed to happen
        });
    }
}
_SpoListItemSetCommand_instances = new WeakSet(), _SpoListItemSetCommand_initTelemetry = function _SpoListItemSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            contentType: typeof args.options.contentType !== 'undefined',
            systemUpdate: typeof args.options.systemUpdate !== 'undefined'
        });
    });
}, _SpoListItemSetCommand_initOptions = function _SpoListItemSetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-i, --id <id>'
    }, {
        option: '-l, --listId [listId]'
    }, {
        option: '-t, --listTitle [listTitle]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-c, --contentType [contentType]'
    }, {
        option: '-s, --systemUpdate'
    });
}, _SpoListItemSetCommand_initValidators = function _SpoListItemSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId &&
            !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} in option listId is not a valid GUID`;
        }
        return true;
    }));
}, _SpoListItemSetCommand_initTypes = function _SpoListItemSetCommand_initTypes() {
    this.types.string.push('webUrl', 'listId', 'listTitle', 'listUrl', 'id', 'contentType');
    this.types.boolean.push('systemUpdate');
}, _SpoListItemSetCommand_initOptionSets = function _SpoListItemSetCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listTitle', 'listUrl']);
};
module.exports = new SpoListItemSetCommand();
//# sourceMappingURL=listitem-set.js.map