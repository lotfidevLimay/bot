"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListItemListCommand_instances, _SpoListItemListCommand_initTelemetry, _SpoListItemListCommand_initOptions, _SpoListItemListCommand_initValidators, _SpoListItemListCommand_initTypes;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListItemListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListItemListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListItemListCommand_instances, "m", _SpoListItemListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListItemListCommand_instances, "m", _SpoListItemListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListItemListCommand_instances, "m", _SpoListItemListCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListItemListCommand_instances, "m", _SpoListItemListCommand_initTypes).call(this);
    }
    get name() {
        return commands_1.default.LISTITEM_LIST;
    }
    get description() {
        return 'Gets a list of items from the specified list';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.options.id) {
                this.warn(logger, `Option 'id' is deprecated. Please use 'listId' instead.`);
            }
            if (args.options.title) {
                this.warn(logger, `Option 'title' is deprecated. Please use 'listTitle' instead.`);
            }
            let requestUrl = `${args.options.webUrl}/_api/web`;
            if (args.options.listId) {
                requestUrl += `/lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')`;
            }
            else if (args.options.listTitle) {
                requestUrl += `/lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')`;
            }
            else if (args.options.id) {
                requestUrl += `/lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.id)}')`;
            }
            else if (args.options.title) {
                requestUrl += `/lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.title)}')`;
            }
            else if (args.options.listUrl) {
                const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                requestUrl += `/GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')`;
            }
            let formDigestValue = '';
            const fieldsArray = args.options.fields ? args.options.fields.split(",")
                : (!args.options.output || args.options.output === "text") ? ["Title", "Id"] : [];
            const fieldsWithSlash = fieldsArray.filter(item => item.includes('/'));
            const fieldsToExpand = fieldsWithSlash.map(e => e.split('/')[0]);
            const expandFieldsArray = fieldsToExpand.filter((item, pos) => fieldsToExpand.indexOf(item) === pos);
            try {
                if (args.options.camlQuery) {
                    if (this.debug) {
                        logger.logToStderr(`getting request digest for query request`);
                    }
                    const res = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                    formDigestValue = res.FormDigestValue;
                }
                let res;
                if (args.options.pageNumber && Number(args.options.pageNumber) > 0) {
                    const rowLimit = `$top=${Number(args.options.pageSize) * Number(args.options.pageNumber)}`;
                    const filter = args.options.filter ? `$filter=${encodeURIComponent(args.options.filter)}` : ``;
                    const fieldSelect = `?$select=Id&${rowLimit}&${filter}`;
                    const requestOptions = {
                        url: `${requestUrl}/items${fieldSelect}`,
                        headers: {
                            'accept': 'application/json;odata=nometadata',
                            'X-RequestDigest': formDigestValue
                        },
                        responseType: 'json'
                    };
                    res = yield request_1.default.get(requestOptions);
                }
                const skipTokenId = (res && res.value && res.value.length && res.value[res.value.length - 1]) ? res.value[res.value.length - 1].Id : 0;
                const skipToken = (args.options.pageNumber && Number(args.options.pageNumber) > 0 && skipTokenId > 0) ? `$skiptoken=Paged=TRUE%26p_ID=${res.value[res.value.length - 1].Id}` : ``;
                const rowLimit = args.options.pageSize ? `$top=${args.options.pageSize}` : ``;
                const filter = args.options.filter ? `$filter=${encodeURIComponent(args.options.filter)}` : ``;
                const fieldExpand = expandFieldsArray.length > 0 ? `&$expand=${expandFieldsArray.join(",")}` : ``;
                const fieldSelect = fieldsArray.length > 0 ?
                    `?$select=${encodeURIComponent(fieldsArray.join(","))}${fieldExpand}&${rowLimit}&${skipToken}&${filter}` :
                    `?${rowLimit}&${skipToken}&${filter}`;
                const requestBody = args.options.camlQuery ?
                    {
                        "query": {
                            "ViewXml": args.options.camlQuery
                        }
                    }
                    : ``;
                const requestOptions = {
                    url: `${requestUrl}/${args.options.camlQuery ? `GetItems` : `items${fieldSelect}`}`,
                    headers: {
                        'accept': 'application/json;odata=nometadata',
                        'X-RequestDigest': formDigestValue
                    },
                    responseType: 'json',
                    data: requestBody
                };
                const listItemInstances = args.options.camlQuery ? yield request_1.default.post(requestOptions) : yield request_1.default.get(requestOptions);
                listItemInstances.value.forEach(v => delete v['ID']);
                logger.log(listItemInstances.value);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoListItemListCommand_instances = new WeakSet(), _SpoListItemListCommand_initTelemetry = function _SpoListItemListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            title: typeof args.options.title !== 'undefined',
            fields: typeof args.options.fields !== 'undefined',
            filter: typeof args.options.filter !== 'undefined',
            pageNumber: typeof args.options.pageNumber !== 'undefined',
            pageSize: typeof args.options.pageSize !== 'undefined',
            camlQuery: typeof args.options.camlQuery !== 'undefined'
        });
    });
}, _SpoListItemListCommand_initOptions = function _SpoListItemListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--id [id]'
    }, {
        option: '--title [title]'
    }, {
        option: '-i, --listId [listId]'
    }, {
        option: '-t, --listTitle [listTitle]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-s, --pageSize [pageSize]'
    }, {
        option: '-n, --pageNumber [pageNumber]'
    }, {
        option: '-q, --camlQuery [camlQuery]'
    }, {
        option: '-f, --fields [fields]'
    }, {
        option: '-l, --filter [filter]'
    });
}, _SpoListItemListCommand_initValidators = function _SpoListItemListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (!args.options.id && !args.options.title && !args.options.listId && !args.options.listTitle && !args.options.listUrl) {
            return `Specify listId or listTitle or listUrl`;
        }
        if (args.options.id && args.options.title) {
            return `Specify list id or title but not both`;
        }
        // Check if only one of the 4 options is specified
        if ([args.options.id, args.options.title, args.options.listId, args.options.listTitle, args.options.listUrl].filter(o => o).length > 1) {
            return 'Specify listId or listTitle or listUrl but not multiple';
        }
        if (args.options.camlQuery && args.options.fields) {
            return `Specify camlQuery or fields but not both`;
        }
        if (args.options.camlQuery && args.options.pageSize) {
            return `Specify camlQuery or pageSize but not both`;
        }
        if (args.options.camlQuery && args.options.pageNumber) {
            return `Specify camlQuery or pageNumber but not both`;
        }
        if (args.options.pageSize && isNaN(Number(args.options.pageSize))) {
            return `pageSize must be numeric`;
        }
        if (args.options.pageNumber && !args.options.pageSize) {
            return `pageSize must be specified if pageNumber is specified`;
        }
        if (args.options.pageNumber && isNaN(Number(args.options.pageNumber))) {
            return `pageNumber must be numeric`;
        }
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} is not a valid GUID`;
        }
        if (args.options.id && !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} in option id is not a valid GUID`;
        }
        return true;
    }));
}, _SpoListItemListCommand_initTypes = function _SpoListItemListCommand_initTypes() {
    this.types.string.push('webUrl', 'id', 'title', 'camlQuery', 'pageSize', 'pageNumber', 'fields', 'filter');
};
module.exports = new SpoListItemListCommand();
//# sourceMappingURL=listitem-list.js.map