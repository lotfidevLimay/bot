"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListItemAddCommand_instances, _SpoListItemAddCommand_initTelemetry, _SpoListItemAddCommand_initOptions, _SpoListItemAddCommand_initValidators, _SpoListItemAddCommand_initTypes, _SpoListItemAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListItemAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListItemAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListItemAddCommand_instances, "m", _SpoListItemAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListItemAddCommand_instances, "m", _SpoListItemAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListItemAddCommand_instances, "m", _SpoListItemAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListItemAddCommand_instances, "m", _SpoListItemAddCommand_initTypes).call(this);
        __classPrivateFieldGet(this, _SpoListItemAddCommand_instances, "m", _SpoListItemAddCommand_initOptionSets).call(this);
    }
    allowUnknownOptions() {
        return true;
    }
    get name() {
        return commands_1.default.LISTITEM_ADD;
    }
    get description() {
        return 'Creates a list item in the specified list';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let requestUrl = `${args.options.webUrl}/_api/web`;
                if (args.options.listId) {
                    requestUrl += `/lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')`;
                }
                else if (args.options.listTitle) {
                    requestUrl += `/lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')`;
                }
                else if (args.options.listUrl) {
                    const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                    requestUrl += `/GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')`;
                }
                let contentTypeName = '';
                let targetFolderServerRelativeUrl = '';
                if (this.verbose) {
                    logger.logToStderr(`Getting content types for list ${args.options.listId || args.options.listTitle || args.options.listUrl}...`);
                }
                let requestOptions = {
                    url: `${requestUrl}/contenttypes?$select=Name,Id`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const ctypes = yield request_1.default.get(requestOptions);
                if (args.options.contentType) {
                    const foundContentType = ctypes.value.filter((ct) => {
                        const contentTypeMatch = ct.Id.StringValue === args.options.contentType || ct.Name === args.options.contentType;
                        if (this.debug) {
                            logger.logToStderr(`Checking content type value [${ct.Name}]: ${contentTypeMatch}`);
                        }
                        return contentTypeMatch;
                    });
                    if (this.debug) {
                        logger.logToStderr('content type filter output...');
                        logger.logToStderr(foundContentType);
                    }
                    if (foundContentType.length > 0) {
                        contentTypeName = foundContentType[0].Name;
                    }
                    // After checking for content types, throw an error if the name is blank
                    if (!contentTypeName || contentTypeName === '') {
                        throw `Specified content type '${args.options.contentType}' doesn't exist on the target list`;
                    }
                    if (this.debug) {
                        logger.logToStderr(`using content type name: ${contentTypeName}`);
                    }
                }
                if (args.options.folder) {
                    if (this.debug) {
                        logger.logToStderr('setting up folder lookup response ...');
                    }
                    requestOptions = {
                        url: `${requestUrl}/rootFolder`,
                        headers: {
                            'accept': 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const rootFolderResponse = yield request_1.default.get(requestOptions);
                    targetFolderServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(rootFolderResponse["ServerRelativeUrl"], args.options.folder);
                    yield spo_1.spo.ensureFolder(args.options.webUrl, targetFolderServerRelativeUrl, logger, this.debug);
                }
                if (this.verbose) {
                    logger.logToStderr(`Creating item in list ${args.options.listId || args.options.listTitle || args.options.listUrl} in site ${args.options.webUrl}...`);
                }
                const requestBody = {
                    formValues: this.mapRequestBody(args.options)
                };
                if (args.options.folder) {
                    requestBody.listItemCreateInfo = {
                        FolderPath: {
                            DecodedUrl: targetFolderServerRelativeUrl
                        }
                    };
                }
                if (args.options.contentType && contentTypeName !== '') {
                    if (this.debug) {
                        logger.logToStderr(`Specifying content type name [${contentTypeName}] in request body`);
                    }
                    requestBody.formValues.push({
                        FieldName: 'ContentType',
                        FieldValue: contentTypeName
                    });
                }
                requestOptions = {
                    url: `${requestUrl}/AddValidateUpdateItemUsingPath()`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    data: requestBody,
                    responseType: 'json'
                };
                const response = yield request_1.default.post(requestOptions);
                // Response is from /AddValidateUpdateItemUsingPath POST call, perform get on added item to get all field values
                const fieldValues = response.value;
                const idField = fieldValues.filter((thisField) => {
                    return (thisField.FieldName === "Id");
                });
                if (this.debug) {
                    logger.logToStderr(`field values returned:`);
                    logger.logToStderr(fieldValues);
                    logger.logToStderr(`Id returned by AddValidateUpdateItemUsingPath: ${idField}`);
                }
                if (idField.length === 0) {
                    throw `Item didn't add successfully`;
                }
                requestOptions = {
                    url: `${requestUrl}/items(${idField[0].FieldValue})`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const item = yield request_1.default.get(requestOptions);
                logger.log(item);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    mapRequestBody(options) {
        const requestBody = [];
        const excludeOptions = [
            'listTitle',
            'listId',
            'listUrl',
            'webUrl',
            'contentType',
            'folder',
            'debug',
            'verbose',
            'output'
        ];
        Object.keys(options).forEach(key => {
            if (excludeOptions.indexOf(key) === -1) {
                requestBody.push({ FieldName: key, FieldValue: `${options[key]}` });
            }
        });
        return requestBody;
    }
}
_SpoListItemAddCommand_instances = new WeakSet(), _SpoListItemAddCommand_initTelemetry = function _SpoListItemAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            contentType: typeof args.options.contentType !== 'undefined',
            folder: typeof args.options.folder !== 'undefined'
        });
    });
}, _SpoListItemAddCommand_initOptions = function _SpoListItemAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --listId [listId]'
    }, {
        option: '-t, --listTitle [listTitle]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-c, --contentType [contentType]'
    }, {
        option: '-f, --folder [folder]'
    });
}, _SpoListItemAddCommand_initValidators = function _SpoListItemAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId &&
            !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} in option listId is not a valid GUID`;
        }
        return true;
    }));
}, _SpoListItemAddCommand_initTypes = function _SpoListItemAddCommand_initTypes() {
    this.types.string.push('webUrl', 'listId', 'listTitle', 'listUrl', 'contentType', 'folder');
}, _SpoListItemAddCommand_initOptionSets = function _SpoListItemAddCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listTitle', 'listUrl']);
};
module.exports = new SpoListItemAddCommand();
//# sourceMappingURL=listitem-add.js.map