"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoGroupListCommand_instances, _SpoGroupListCommand_initTelemetry, _SpoGroupListCommand_initOptions, _SpoGroupListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoGroupListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoGroupListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoGroupListCommand_instances, "m", _SpoGroupListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoGroupListCommand_instances, "m", _SpoGroupListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoGroupListCommand_instances, "m", _SpoGroupListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.GROUP_LIST;
    }
    get description() {
        return 'Lists all the groups within specific web';
    }
    defaultProperties() {
        return ['Id', 'Title', 'LoginName', 'IsHiddenInUI', 'PrincipalType', 'Type'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving list of groups for specified web at ${args.options.webUrl}...`);
            }
            const baseUrl = `${args.options.webUrl}/_api/web`;
            try {
                if (!args.options.associatedGroupsOnly) {
                    yield this.getSiteGroups(baseUrl, logger);
                }
                else {
                    yield this.getAssociatedGroups(baseUrl, args.options, logger);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getSiteGroups(baseUrl, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: baseUrl + '/sitegroups',
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            const groupProperties = yield request_1.default.get(requestOptions);
            logger.log(groupProperties.value);
        });
    }
    getAssociatedGroups(baseUrl, options, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: baseUrl + '?$expand=AssociatedOwnerGroup,AssociatedMemberGroup,AssociatedVisitorGroup&$select=AssociatedOwnerGroup,AssociatedMemberGroup,AssociatedVisitorGroup',
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            const groupProperties = yield request_1.default.get(requestOptions);
            if (!options.output || options.output === 'json') {
                logger.log(groupProperties);
            }
            else {
                //converted to text friendly output
                const output = Object.getOwnPropertyNames(groupProperties).map(prop => (Object.assign({ Type: prop }, groupProperties[prop])));
                logger.log(output);
            }
        });
    }
}
_SpoGroupListCommand_instances = new WeakSet(), _SpoGroupListCommand_initTelemetry = function _SpoGroupListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            associatedGroupsOnly: (!(!args.options.associatedGroupsOnly)).toString()
        });
    });
}, _SpoGroupListCommand_initOptions = function _SpoGroupListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--associatedGroupsOnly'
    });
}, _SpoGroupListCommand_initValidators = function _SpoGroupListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoGroupListCommand();
//# sourceMappingURL=group-list.js.map