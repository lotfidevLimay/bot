"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoGroupGetCommand_instances, _SpoGroupGetCommand_initTelemetry, _SpoGroupGetCommand_initOptions, _SpoGroupGetCommand_initValidators, _SpoGroupGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoGroupGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoGroupGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoGroupGetCommand_instances, "m", _SpoGroupGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoGroupGetCommand_instances, "m", _SpoGroupGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoGroupGetCommand_instances, "m", _SpoGroupGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoGroupGetCommand_instances, "m", _SpoGroupGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.GROUP_GET;
    }
    get description() {
        return 'Gets site group';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving information for group in site at ${args.options.webUrl}...`);
            }
            let requestUrl = '';
            if (args.options.id) {
                requestUrl = `${args.options.webUrl}/_api/web/sitegroups/GetById('${encodeURIComponent(args.options.id)}')`;
            }
            else if (args.options.name) {
                requestUrl = `${args.options.webUrl}/_api/web/sitegroups/GetByName('${encodeURIComponent(args.options.name)}')`;
            }
            else if (args.options.associatedGroup) {
                switch (args.options.associatedGroup.toLowerCase()) {
                    case 'owner':
                        requestUrl = `${args.options.webUrl}/_api/web/AssociatedOwnerGroup`;
                        break;
                    case 'member':
                        requestUrl = `${args.options.webUrl}/_api/web/AssociatedMemberGroup`;
                        break;
                    case 'visitor':
                        requestUrl = `${args.options.webUrl}/_api/web/AssociatedVisitorGroup`;
                        break;
                }
            }
            const requestOptions = {
                url: requestUrl,
                method: 'GET',
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                const groupInstance = yield request_1.default.get(requestOptions);
                logger.log(groupInstance);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoGroupGetCommand_instances = new WeakSet(), _SpoGroupGetCommand_initTelemetry = function _SpoGroupGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: (!(!args.options.id)).toString(),
            name: (!(!args.options.name)).toString(),
            associatedGroup: args.options.associatedGroup
        });
    });
}, _SpoGroupGetCommand_initOptions = function _SpoGroupGetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '--name [name]'
    }, {
        option: '--associatedGroup [associatedGroup]',
        autocomplete: ['Owner', 'Member', 'Visitor']
    });
}, _SpoGroupGetCommand_initValidators = function _SpoGroupGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id && isNaN(args.options.id)) {
            return `Specified id ${args.options.id} is not a number`;
        }
        if (args.options.associatedGroup && ['owner', 'member', 'visitor'].indexOf(args.options.associatedGroup.toLowerCase()) === -1) {
            return `${args.options.associatedGroup} is not a valid associatedGroup value. Allowed values are Owner|Member|Visitor.`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
}, _SpoGroupGetCommand_initOptionSets = function _SpoGroupGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'name', 'associatedGroup']);
};
module.exports = new SpoGroupGetCommand();
//# sourceMappingURL=group-get.js.map