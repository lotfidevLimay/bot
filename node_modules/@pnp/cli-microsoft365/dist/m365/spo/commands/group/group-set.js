"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoGroupSetCommand_instances, _SpoGroupSetCommand_initTelemetry, _SpoGroupSetCommand_initOptions, _SpoGroupSetCommand_initValidators, _SpoGroupSetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const AadUserGetCommand = require("../../../aad/commands/user/user-get");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoGroupSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoGroupSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoGroupSetCommand_instances, "m", _SpoGroupSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoGroupSetCommand_instances, "m", _SpoGroupSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoGroupSetCommand_instances, "m", _SpoGroupSetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoGroupSetCommand_instances, "m", _SpoGroupSetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.GROUP_SET;
    }
    get description() {
        return 'Updates a group in the specified site';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/sitegroups/${args.options.id ? `GetById(${args.options.id})` : `GetByName('${args.options.name}')`}`,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json'
                },
                responseType: 'json',
                data: {
                    Title: args.options.newName,
                    Description: args.options.description,
                    AllowMembersEditMembership: args.options.allowMembersEditMembership,
                    OnlyAllowMembersViewMembership: args.options.onlyAllowMembersViewMembership,
                    AllowRequestToJoinLeave: args.options.allowRequestToJoinLeave,
                    AutoAcceptRequestToJoinLeave: args.options.autoAcceptRequestToJoinLeave,
                    RequestToJoinLeaveEmailSetting: args.options.requestToJoinLeaveEmailSetting
                }
            };
            try {
                yield request_1.default.patch(requestOptions);
                yield this.setGroupOwner(args.options);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    setGroupOwner(options) {
        if (!options.ownerEmail && !options.ownerUserName) {
            return Promise.resolve();
        }
        return this
            .getOwnerId(options)
            .then((ownerId) => {
            const requestOptions = {
                url: `${options.webUrl}/_api/web/sitegroups/${options.id ? `GetById(${options.id})` : `GetByName('${options.name}')`}/SetUserAsOwner(${ownerId})`,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json'
                },
                responseType: 'json'
            };
            return request_1.default.post(requestOptions);
        });
    }
    getOwnerId(options) {
        const cmdOptions = {
            userName: options.ownerUserName,
            email: options.ownerEmail,
            output: 'json',
            debug: options.debug,
            verbose: options.verbose
        };
        return Cli_1.Cli
            .executeCommandWithOutput(AadUserGetCommand, { options: Object.assign(Object.assign({}, cmdOptions), { _: [] }) })
            .then((output) => {
            const getUserOutput = JSON.parse(output.stdout);
            const requestOptions = {
                url: `${options.webUrl}/_api/web/ensureUser('${getUserOutput.userPrincipalName}')?$select=Id`,
                headers: {
                    accept: 'application/json',
                    'content-type': 'application/json'
                },
                responseType: 'json'
            };
            return request_1.default.post(requestOptions);
        })
            .then((response) => response.Id);
    }
}
_SpoGroupSetCommand_instances = new WeakSet(), _SpoGroupSetCommand_initTelemetry = function _SpoGroupSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined',
            newName: typeof args.options.newName !== 'undefined',
            description: typeof args.options.description !== 'undefined',
            allowMembersEditMembership: typeof args.options.allowMembersEditMembership !== 'undefined',
            onlyAllowMembersViewMembership: typeof args.options.onlyAllowMembersViewMembership !== 'undefined',
            allowRequestToJoinLeave: typeof args.options.allowRequestToJoinLeave !== 'undefined',
            autoAcceptRequestToJoinLeave: typeof args.options.autoAcceptRequestToJoinLeave !== 'undefined',
            requestToJoinLeaveEmailSetting: typeof args.options.requestToJoinLeaveEmailSetting !== 'undefined',
            ownerEmail: typeof args.options.ownerEmail !== 'undefined',
            ownerUserName: typeof args.options.ownerUserName !== 'undefined'
        });
    });
}, _SpoGroupSetCommand_initOptions = function _SpoGroupSetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '--newName [newName]'
    }, {
        option: '--description [description]'
    }, {
        option: '--allowMembersEditMembership [allowMembersEditMembership]'
    }, {
        option: '--onlyAllowMembersViewMembership [onlyAllowMembersViewMembership]'
    }, {
        option: '--allowRequestToJoinLeave [allowRequestToJoinLeave]'
    }, {
        option: '--autoAcceptRequestToJoinLeave [autoAcceptRequestToJoinLeave]'
    }, {
        option: '--requestToJoinLeaveEmailSetting [requestToJoinLeaveEmailSetting]'
    }, {
        option: '--ownerEmail [ownerEmail]'
    }, {
        option: '--ownerUserName [ownerUserName]'
    });
}, _SpoGroupSetCommand_initValidators = function _SpoGroupSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.id && isNaN(args.options.id)) {
            return `Specified id ${args.options.id} is not a number`;
        }
        if (args.options.ownerEmail && args.options.ownerUserName) {
            return 'Specify either ownerEmail or ownerUserName but not both';
        }
        const booleanOptions = [
            args.options.allowMembersEditMembership, args.options.onlyAllowMembersViewMembership,
            args.options.allowRequestToJoinLeave, args.options.autoAcceptRequestToJoinLeave
        ];
        for (const option of booleanOptions) {
            if (typeof option !== 'undefined' && !validation_1.validation.isValidBoolean(option)) {
                return `Value '${option}' is not a valid boolean`;
            }
        }
        return true;
    }));
}, _SpoGroupSetCommand_initOptionSets = function _SpoGroupSetCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
};
module.exports = new SpoGroupSetCommand();
//# sourceMappingURL=group-set.js.map