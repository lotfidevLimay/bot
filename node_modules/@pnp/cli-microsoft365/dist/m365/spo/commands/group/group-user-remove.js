"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoGroupUserRemoveCommand_instances, _SpoGroupUserRemoveCommand_initTelemetry, _SpoGroupUserRemoveCommand_initOptions, _SpoGroupUserRemoveCommand_initValidators, _SpoGroupUserRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoGroupUserRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoGroupUserRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoGroupUserRemoveCommand_instances, "m", _SpoGroupUserRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoGroupUserRemoveCommand_instances, "m", _SpoGroupUserRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoGroupUserRemoveCommand_instances, "m", _SpoGroupUserRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoGroupUserRemoveCommand_instances, "m", _SpoGroupUserRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.GROUP_USER_REMOVE;
    }
    get description() {
        return 'Removes the specified user from a SharePoint group';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeUserfromSPGroup = () => __awaiter(this, void 0, void 0, function* () {
                if (this.verbose) {
                    logger.logToStderr(`Removing User with Username ${args.options.userName} from Group: ${args.options.groupId ? args.options.groupId : args.options.groupName}`);
                }
                const loginName = `i:0#.f|membership|${args.options.userName}`;
                const requestUrl = `${args.options.webUrl}/_api/web/sitegroups/${args.options.groupId
                    ? `GetById('${encodeURIComponent(args.options.groupId)}')`
                    : `GetByName('${encodeURIComponent(args.options.groupName)}')`}/users/removeByLoginName(@LoginName)?@LoginName='${encodeURIComponent(loginName)}'`;
                const requestOptions = {
                    url: requestUrl,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                try {
                    yield request_1.default.post(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                if (this.debug) {
                    logger.logToStderr('Confirmation bypassed by entering confirm option. Removing the user from SharePoint Group...');
                }
                yield removeUserfromSPGroup();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove user User ${args.options.userName} from SharePoint group?`
                });
                if (result.continue) {
                    yield removeUserfromSPGroup();
                }
            }
        });
    }
}
_SpoGroupUserRemoveCommand_instances = new WeakSet(), _SpoGroupUserRemoveCommand_initTelemetry = function _SpoGroupUserRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            groupId: (!(!args.options.groupId)).toString(),
            groupName: (!(!args.options.groupName)).toString(),
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SpoGroupUserRemoveCommand_initOptions = function _SpoGroupUserRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--groupId [groupId]'
    }, {
        option: '--groupName [groupName]'
    }, {
        option: '--userName <userName>'
    }, {
        option: '--confirm'
    });
}, _SpoGroupUserRemoveCommand_initValidators = function _SpoGroupUserRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.groupId && isNaN(args.options.groupId)) {
            return `Specified "groupId" ${args.options.groupId} is not valid`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
}, _SpoGroupUserRemoveCommand_initOptionSets = function _SpoGroupUserRemoveCommand_initOptionSets() {
    this.optionSets.push(['groupName', 'groupId']);
};
module.exports = new SpoGroupUserRemoveCommand();
//# sourceMappingURL=group-user-remove.js.map