"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoGroupUserListCommand_instances, _SpoGroupUserListCommand_initTelemetry, _SpoGroupUserListCommand_initOptions, _SpoGroupUserListCommand_initValidators, _SpoGroupUserListCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoGroupUserListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoGroupUserListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoGroupUserListCommand_instances, "m", _SpoGroupUserListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoGroupUserListCommand_instances, "m", _SpoGroupUserListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoGroupUserListCommand_instances, "m", _SpoGroupUserListCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoGroupUserListCommand_instances, "m", _SpoGroupUserListCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.GROUP_USER_LIST;
    }
    get description() {
        return `List members of a SharePoint Group`;
    }
    defaultProperties() {
        return ['Title', 'UserPrincipalName', 'Id', 'Email'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving the list of members from the SharePoint group :  ${args.options.groupId ? args.options.groupId : args.options.groupName}`);
            }
            const requestUrl = `${args.options.webUrl}/_api/web/sitegroups/${args.options.groupId
                ? `GetById('${encodeURIComponent(args.options.groupId)}')`
                : `GetByName('${encodeURIComponent(args.options.groupName)}')`}/users`;
            const requestOptions = {
                url: requestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                const response = yield request_1.default.get(requestOptions);
                logger.log(response);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoGroupUserListCommand_instances = new WeakSet(), _SpoGroupUserListCommand_initTelemetry = function _SpoGroupUserListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            groupId: typeof args.options.groupId !== 'undefined',
            groupName: typeof args.options.groupName !== 'undefined'
        });
    });
}, _SpoGroupUserListCommand_initOptions = function _SpoGroupUserListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--groupId [groupId]'
    }, {
        option: '--groupName [groupName]'
    });
}, _SpoGroupUserListCommand_initValidators = function _SpoGroupUserListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.groupId && isNaN(args.options.groupId)) {
            return `Specified "groupId" ${args.options.groupId} is not valid`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
}, _SpoGroupUserListCommand_initOptionSets = function _SpoGroupUserListCommand_initOptionSets() {
    this.optionSets.push(['groupName', 'groupId']);
};
module.exports = new SpoGroupUserListCommand();
//# sourceMappingURL=group-user-list.js.map