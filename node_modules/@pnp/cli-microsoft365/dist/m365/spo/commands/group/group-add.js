"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoGroupAddCommand_instances, _SpoGroupAddCommand_initTelemetry, _SpoGroupAddCommand_initOptions, _SpoGroupAddCommand_initValidators, _SpoGroupAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoGroupAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoGroupAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoGroupAddCommand_instances, "m", _SpoGroupAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoGroupAddCommand_instances, "m", _SpoGroupAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoGroupAddCommand_instances, "m", _SpoGroupAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoGroupAddCommand_instances, "m", _SpoGroupAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.GROUP_ADD;
    }
    get description() {
        return 'Creates group in the specified site';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/sitegroups`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json',
                data: {
                    Title: args.options.name,
                    Description: args.options.description,
                    AllowMembersEditMembership: args.options.allowMembersEditMembership,
                    OnlyAllowMembersViewMembership: args.options.onlyAllowMembersViewMembership,
                    AllowRequestToJoinLeave: args.options.allowRequestToJoinLeave,
                    AutoAcceptRequestToJoinLeave: args.options.autoAcceptRequestToJoinLeave,
                    RequestToJoinLeaveEmailSetting: args.options.requestToJoinLeaveEmailSetting
                }
            };
            try {
                const response = yield request_1.default.post(requestOptions);
                logger.log(response);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoGroupAddCommand_instances = new WeakSet(), _SpoGroupAddCommand_initTelemetry = function _SpoGroupAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            description: typeof args.options.description !== 'undefined',
            allowMembersEditMembership: typeof args.options.allowMembersEditMembership !== 'undefined',
            onlyAllowMembersViewMembership: typeof args.options.onlyAllowMembersViewMembership !== 'undefined',
            allowRequestToJoinLeave: typeof args.options.allowRequestToJoinLeave !== 'undefined',
            autoAcceptRequestToJoinLeave: typeof args.options.autoAcceptRequestToJoinLeave !== 'undefined',
            requestToJoinLeaveEmailSetting: typeof args.options.requestToJoinLeaveEmailSetting !== 'undefined'
        });
    });
}, _SpoGroupAddCommand_initOptions = function _SpoGroupAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-n, --name <name>'
    }, {
        option: '--description [description]'
    }, {
        option: '--allowMembersEditMembership [allowMembersEditMembership]'
    }, {
        option: '--onlyAllowMembersViewMembership [onlyAllowMembersViewMembership]'
    }, {
        option: '--allowRequestToJoinLeave [allowRequestToJoinLeave]'
    }, {
        option: '--autoAcceptRequestToJoinLeave [autoAcceptRequestToJoinLeave]'
    }, {
        option: '--requestToJoinLeaveEmailSetting [requestToJoinLeaveEmailSetting]'
    });
}, _SpoGroupAddCommand_initValidators = function _SpoGroupAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        const booleanOptions = [
            args.options.allowMembersEditMembership, args.options.onlyAllowMembersViewMembership,
            args.options.allowRequestToJoinLeave, args.options.autoAcceptRequestToJoinLeave
        ];
        for (const option of booleanOptions) {
            if (typeof option !== 'undefined' && !validation_1.validation.isValidBoolean(option)) {
                return `Value '${option}' is not a valid boolean`;
            }
        }
        return true;
    }));
}, _SpoGroupAddCommand_initOptionSets = function _SpoGroupAddCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
};
module.exports = new SpoGroupAddCommand();
//# sourceMappingURL=group-add.js.map