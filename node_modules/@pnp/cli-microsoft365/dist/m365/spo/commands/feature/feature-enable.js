"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFeatureEnableCommand_instances, _SpoFeatureEnableCommand_initTelemetry, _SpoFeatureEnableCommand_initOptions, _SpoFeatureEnableCommand_initValidators, _SpoFeatureEnableCommand_initTypes;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoFeatureEnableCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFeatureEnableCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFeatureEnableCommand_instances, "m", _SpoFeatureEnableCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFeatureEnableCommand_instances, "m", _SpoFeatureEnableCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFeatureEnableCommand_instances, "m", _SpoFeatureEnableCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoFeatureEnableCommand_instances, "m", _SpoFeatureEnableCommand_initTypes).call(this);
    }
    get name() {
        return commands_1.default.FEATURE_ENABLE;
    }
    get description() {
        return 'Enables feature for the specified site or web';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let scope = args.options.scope;
            let force = args.options.force;
            if (!scope) {
                scope = "web";
            }
            if (!force) {
                force = false;
            }
            if (this.verbose) {
                logger.logToStderr(`Enabling feature '${args.options.featureId}' on scope '${scope}' for url '${args.options.url}' (force='${force}')...`);
            }
            const url = `${args.options.url}/_api/${scope}/features/add(featureId=guid'${args.options.featureId}',force=${force})`;
            const requestOptions = {
                url: url,
                headers: {
                    accept: 'application/json;odata=nometadata'
                }
            };
            try {
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoFeatureEnableCommand_instances = new WeakSet(), _SpoFeatureEnableCommand_initTelemetry = function _SpoFeatureEnableCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            scope: args.options.scope || 'web',
            force: args.options.force || false
        });
    });
}, _SpoFeatureEnableCommand_initOptions = function _SpoFeatureEnableCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '-f, --featureId <id>'
    }, {
        option: '-s, --scope [scope]',
        autocomplete: ['Site', 'Web']
    }, {
        option: '--force'
    });
}, _SpoFeatureEnableCommand_initValidators = function _SpoFeatureEnableCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.scope) {
            if (['site', 'web'].indexOf(args.options.scope.toLowerCase()) < 0) {
                return `${args.options.scope} is not a valid Feature scope. Allowed values are Site|Web`;
            }
        }
        return validation_1.validation.isValidSharePointUrl(args.options.url);
    }));
}, _SpoFeatureEnableCommand_initTypes = function _SpoFeatureEnableCommand_initTypes() {
    this.types.string.push('scope', 's');
};
module.exports = new SpoFeatureEnableCommand();
//# sourceMappingURL=feature-enable.js.map