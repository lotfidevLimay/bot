"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFolderRenameCommand_instances, _SpoFolderRenameCommand_initOptions, _SpoFolderRenameCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoFolderRenameCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFolderRenameCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFolderRenameCommand_instances, "m", _SpoFolderRenameCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFolderRenameCommand_instances, "m", _SpoFolderRenameCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.FOLDER_RENAME;
    }
    get description() {
        return 'Renames a folder';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const contextResponse = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                const formDigestValue = contextResponse.FormDigestValue;
                const webIdentityResp = yield spo_1.spo.getCurrentWebIdentity(args.options.webUrl, formDigestValue);
                const folderObjectIdentity = yield spo_1.spo.getFolderIdentity(webIdentityResp.objectIdentity, args.options.webUrl, args.options.folderUrl, formDigestValue);
                if (this.verbose) {
                    logger.logToStderr(`Renaming folder ${args.options.folderUrl} to ${args.options.name}`);
                }
                const serverRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.folderUrl);
                const serverRelativeUrlWithoutOldFolder = serverRelativeUrl.substring(0, serverRelativeUrl.lastIndexOf('/'));
                const renamedServerRelativeUrl = `${serverRelativeUrlWithoutOldFolder}/${args.options.name}`;
                const requestOptions = {
                    url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': formDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><Method Name="MoveTo" Id="32" ObjectPathId="26"><Parameters><Parameter Type="String">${renamedServerRelativeUrl}</Parameter></Parameters></Method></Actions><ObjectPaths><Identity Id="26" Name="${folderObjectIdentity.objectIdentity}" /></ObjectPaths></Request>`
                };
                const res = yield request_1.default.post(requestOptions);
                const json = JSON.parse(res);
                const contents = json.find(x => { return x['ErrorInfo']; });
                if (contents && contents.ErrorInfo) {
                    throw contents.ErrorInfo.ErrorMessage || 'ClientSvc unknown error';
                }
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
}
_SpoFolderRenameCommand_instances = new WeakSet(), _SpoFolderRenameCommand_initOptions = function _SpoFolderRenameCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-f, --folderUrl <folderUrl>'
    }, {
        option: '-n, --name <name>'
    });
}, _SpoFolderRenameCommand_initValidators = function _SpoFolderRenameCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoFolderRenameCommand();
//# sourceMappingURL=folder-rename.js.map