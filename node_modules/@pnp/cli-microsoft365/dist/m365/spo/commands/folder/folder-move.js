"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoFolderMoveCommand_instances, _SpoFolderMoveCommand_initTelemetry, _SpoFolderMoveCommand_initOptions, _SpoFolderMoveCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoFolderMoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoFolderMoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoFolderMoveCommand_instances, "m", _SpoFolderMoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoFolderMoveCommand_instances, "m", _SpoFolderMoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoFolderMoveCommand_instances, "m", _SpoFolderMoveCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.FOLDER_MOVE;
    }
    get description() {
        return 'Moves a folder to another location';
    }
    getExcludedOptionsWithUrls() {
        return ['targetUrl'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const webUrl = args.options.webUrl;
            const parsedUrl = url.parse(webUrl);
            const tenantUrl = `${parsedUrl.protocol}//${parsedUrl.hostname}`;
            const sourceAbsoluteUrl = urlUtil_1.urlUtil.urlCombine(webUrl, args.options.sourceUrl);
            const allowSchemaMismatch = args.options.allowSchemaMismatch || false;
            const requestUrl = urlUtil_1.urlUtil.urlCombine(webUrl, '/_api/site/CreateCopyJobs');
            const requestOptions = {
                url: requestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                data: {
                    exportObjectUris: [sourceAbsoluteUrl],
                    destinationUri: urlUtil_1.urlUtil.urlCombine(tenantUrl, args.options.targetUrl),
                    options: {
                        "AllowSchemaMismatch": allowSchemaMismatch,
                        "IgnoreVersionHistory": true,
                        "IsMoveMode": true
                    }
                },
                responseType: 'json'
            };
            try {
                const jobInfo = yield request_1.default.post(requestOptions);
                this.dots = '';
                const copyJobInfo = jobInfo.value[0];
                const progressPollInterval = 30 * 60; //used previously implemented interval. The API does not provide guidance on what value should be used.
                yield new Promise((resolve, reject) => {
                    setTimeout(() => {
                        spo_1.spo.waitUntilCopyJobFinished({
                            copyJobInfo,
                            siteUrl: webUrl,
                            pollingInterval: progressPollInterval,
                            resolve,
                            reject,
                            logger,
                            dots: this.dots,
                            debug: this.debug,
                            verbose: this.verbose
                        });
                    }, progressPollInterval);
                });
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoFolderMoveCommand_instances = new WeakSet(), _SpoFolderMoveCommand_initTelemetry = function _SpoFolderMoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            allowSchemaMismatch: args.options.allowSchemaMismatch || false
        });
    });
}, _SpoFolderMoveCommand_initOptions = function _SpoFolderMoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-s, --sourceUrl <sourceUrl>'
    }, {
        option: '-t, --targetUrl <targetUrl>'
    }, {
        option: '--allowSchemaMismatch'
    });
}, _SpoFolderMoveCommand_initValidators = function _SpoFolderMoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
};
module.exports = new SpoFolderMoveCommand();
//# sourceMappingURL=folder-move.js.map