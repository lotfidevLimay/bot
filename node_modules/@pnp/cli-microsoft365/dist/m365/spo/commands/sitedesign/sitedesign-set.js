"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteDesignSetCommand_instances, _SpoSiteDesignSetCommand_initTelemetry, _SpoSiteDesignSetCommand_initOptions, _SpoSiteDesignSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteDesignSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteDesignSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteDesignSetCommand_instances, "m", _SpoSiteDesignSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteDesignSetCommand_instances, "m", _SpoSiteDesignSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteDesignSetCommand_instances, "m", _SpoSiteDesignSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITEDESIGN_SET;
    }
    get description() {
        return 'Updates a site design with new values';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                const updateInfo = {
                    Id: args.options.id
                };
                if (args.options.title) {
                    updateInfo.Title = args.options.title;
                }
                if (args.options.description) {
                    updateInfo.Description = args.options.description;
                }
                if (args.options.siteScripts) {
                    updateInfo.SiteScriptIds = args.options.siteScripts.split(',').map(i => i.trim());
                }
                if (args.options.previewImageUrl) {
                    updateInfo.PreviewImageUrl = args.options.previewImageUrl;
                }
                if (args.options.previewImageAltText) {
                    updateInfo.PreviewImageAltText = args.options.previewImageAltText;
                }
                if (args.options.thumbnailUrl) {
                    updateInfo.ThumbnailUrl = args.options.thumbnailUrl;
                }
                if (args.options.webTemplate) {
                    updateInfo.WebTemplate = args.options.webTemplate === 'TeamSite' ? '64' : '68';
                }
                if (args.options.version) {
                    updateInfo.Version = args.options.version;
                }
                if (typeof args.options.isDefault !== 'undefined') {
                    updateInfo.IsDefault = args.options.isDefault === 'true';
                }
                const requestOptions = {
                    url: `${spoUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.UpdateSiteDesign`,
                    headers: {
                        'content-type': 'application/json;charset=utf-8',
                        accept: 'application/json;odata=nometadata',
                        responseType: 'json'
                    },
                    data: { updateInfo: updateInfo },
                    responseType: 'json'
                };
                const res = yield request_1.default.post(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoSiteDesignSetCommand_instances = new WeakSet(), _SpoSiteDesignSetCommand_initTelemetry = function _SpoSiteDesignSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            title: typeof args.options.title !== 'undefined',
            webTemplate: args.options.webTemplate,
            siteScripts: typeof args.options.siteScripts !== 'undefined',
            description: typeof args.options.description !== 'undefined',
            previewImageUrl: typeof args.options.previewImageUrl !== 'undefined',
            previewImageAltText: typeof args.options.previewImageAltText !== 'undefined',
            thumbnailUrl: typeof args.options.thumbnailUrl !== 'undefined',
            version: typeof args.options.version !== 'undefined',
            isDefault: typeof args.options.isDefault !== 'undefined'
        });
    });
}, _SpoSiteDesignSetCommand_initOptions = function _SpoSiteDesignSetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '-t, --title [title]'
    }, {
        option: '-w, --webTemplate [webTemplate]',
        autocomplete: ['TeamSite', 'CommunicationSite']
    }, {
        option: '-s, --siteScripts [siteScripts]'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '-m, --previewImageUrl [previewImageUrl]'
    }, {
        option: '-a, --previewImageAltText [previewImageAltText]'
    }, {
        option: '--thumbnailUrl [thumbnailUrl]'
    }, {
        option: '-v, --version [version]'
    }, {
        option: '--isDefault [isDefault]'
    });
}, _SpoSiteDesignSetCommand_initValidators = function _SpoSiteDesignSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        if (args.options.webTemplate &&
            args.options.webTemplate !== 'TeamSite' &&
            args.options.webTemplate !== 'CommunicationSite') {
            return `${args.options.webTemplate} is not a valid web template type. Allowed values TeamSite|CommunicationSite`;
        }
        if (args.options.siteScripts) {
            const siteScripts = args.options.siteScripts.split(',');
            for (let i = 0; i < siteScripts.length; i++) {
                const trimmedId = siteScripts[i].trim();
                if (!validation_1.validation.isValidGuid(trimmedId)) {
                    return `${trimmedId} is not a valid GUID`;
                }
            }
        }
        if (args.options.version &&
            typeof args.options.version !== 'number') {
            return `${args.options.version} is not a number`;
        }
        if (typeof args.options.isDefault !== 'undefined' &&
            args.options.isDefault !== 'true' &&
            args.options.isDefault !== 'false') {
            return `${args.options.isDefault} is not a valid boolean value`;
        }
        return true;
    }));
};
module.exports = new SpoSiteDesignSetCommand();
//# sourceMappingURL=sitedesign-set.js.map