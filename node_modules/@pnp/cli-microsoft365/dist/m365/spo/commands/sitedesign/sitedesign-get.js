"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteDesignGetCommand_instances, _SpoSiteDesignGetCommand_initTelemetry, _SpoSiteDesignGetCommand_initOptions, _SpoSiteDesignGetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteDesignGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteDesignGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteDesignGetCommand_instances, "m", _SpoSiteDesignGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteDesignGetCommand_instances, "m", _SpoSiteDesignGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteDesignGetCommand_instances, "m", _SpoSiteDesignGetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITEDESIGN_GET;
    }
    get description() {
        return 'Gets information about the specified site design';
    }
    getSiteDesignId(args, spoUrl) {
        if (args.options.id) {
            return Promise.resolve(args.options.id);
        }
        const requestOptions = {
            url: `${spoUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.GetSiteDesigns`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default
            .post(requestOptions)
            .then(response => {
            const matchingSiteDesigns = response.value.filter(x => x.Title === args.options.title);
            if (matchingSiteDesigns.length === 0) {
                return Promise.reject(`The specified site design does not exist`);
            }
            if (matchingSiteDesigns.length > 1) {
                return Promise.reject(`Multiple site designs with title ${args.options.title} found: ${matchingSiteDesigns.map(x => x.Id).join(', ')}`);
            }
            return Promise.resolve(matchingSiteDesigns[0].Id);
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                const siteDesignId = yield this.getSiteDesignId(args, spoUrl);
                const requestOptions = {
                    url: `${spoUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.GetSiteDesignMetadata`,
                    headers: {
                        'content-type': 'application/json;charset=utf-8',
                        accept: 'application/json;odata=nometadata'
                    },
                    data: { id: siteDesignId },
                    responseType: 'json'
                };
                const res = yield request_1.default.post(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoSiteDesignGetCommand_instances = new WeakSet(), _SpoSiteDesignGetCommand_initTelemetry = function _SpoSiteDesignGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            title: typeof args.options.title !== 'undefined'
        });
    });
}, _SpoSiteDesignGetCommand_initOptions = function _SpoSiteDesignGetCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id [id]'
    }, {
        option: '--title [title]'
    });
}, _SpoSiteDesignGetCommand_initValidators = function _SpoSiteDesignGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id && args.options.title) {
            return 'Specify either id or title, but not both.';
        }
        if (!args.options.id && !args.options.title) {
            return 'Specify id or title, one is required';
        }
        if (args.options.id && !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new SpoSiteDesignGetCommand();
//# sourceMappingURL=sitedesign-get.js.map