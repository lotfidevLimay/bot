"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoHubSiteRightsRevokeCommand_instances, _SpoHubSiteRightsRevokeCommand_initTelemetry, _SpoHubSiteRightsRevokeCommand_initOptions, _SpoHubSiteRightsRevokeCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoHubSiteRightsRevokeCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoHubSiteRightsRevokeCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoHubSiteRightsRevokeCommand_instances, "m", _SpoHubSiteRightsRevokeCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoHubSiteRightsRevokeCommand_instances, "m", _SpoHubSiteRightsRevokeCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoHubSiteRightsRevokeCommand_instances, "m", _SpoHubSiteRightsRevokeCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.HUBSITE_RIGHTS_REVOKE;
    }
    get description() {
        return 'Revokes rights to join sites to the specified hub site for one or more principals';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const revokeRights = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (this.verbose) {
                        logger.logToStderr(`Revoking rights for ${args.options.principals} from ${args.options.url}...`);
                    }
                    const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                    const reqDigest = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                    const principals = args.options.principals
                        .split(',')
                        .map(p => `<Object Type="String">${formatting_1.formatting.escapeXml(p.trim())}</Object>`)
                        .join('');
                    const requestOptions = {
                        url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                        headers: {
                            'X-RequestDigest': reqDigest.FormDigestValue
                        },
                        data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="10" ObjectPathId="9" /><Method Name="RevokeHubSiteRights" Id="11" ObjectPathId="9"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.url)}</Parameter><Parameter Type="Array">${principals}</Parameter></Parameters></Method></Actions><ObjectPaths><Constructor Id="9" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                    };
                    const res = yield request_1.default.post(requestOptions);
                    const json = JSON.parse(res);
                    const response = json[0];
                    if (response.ErrorInfo) {
                        throw response.ErrorInfo.ErrorMessage;
                    }
                }
                catch (err) {
                    this.handleRejectedPromise(err);
                }
            });
            if (args.options.confirm) {
                yield revokeRights();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to revoke rights to join sites to the hub site ${args.options.url} from the specified users?`
                });
                if (result.continue) {
                    yield revokeRights();
                }
            }
        });
    }
}
_SpoHubSiteRightsRevokeCommand_instances = new WeakSet(), _SpoHubSiteRightsRevokeCommand_initTelemetry = function _SpoHubSiteRightsRevokeCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SpoHubSiteRightsRevokeCommand_initOptions = function _SpoHubSiteRightsRevokeCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '-p, --principals <principals>'
    }, {
        option: '--confirm'
    });
}, _SpoHubSiteRightsRevokeCommand_initValidators = function _SpoHubSiteRightsRevokeCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.url); }));
};
module.exports = new SpoHubSiteRightsRevokeCommand();
//# sourceMappingURL=hubsite-rights-revoke.js.map