"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoHubSiteListCommand_instances, _SpoHubSiteListCommand_initTelemetry, _SpoHubSiteListCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoHubSiteListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoHubSiteListCommand_instances.add(this);
        this.batchSize = 30;
        this.batchSize = 30;
        __classPrivateFieldGet(this, _SpoHubSiteListCommand_instances, "m", _SpoHubSiteListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoHubSiteListCommand_instances, "m", _SpoHubSiteListCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.HUBSITE_LIST;
    }
    get description() {
        return 'Lists hub sites in the current tenant';
    }
    defaultProperties() {
        return ['ID', 'SiteUrl', 'Title'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                let requestOptions = {
                    url: `${spoAdminUrl}/_api/hubsites`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const hubSitesResult = yield request_1.default.get(requestOptions);
                const hubSites = hubSitesResult.value;
                if (!(args.options.includeAssociatedSites !== true || args.options.output && args.options.output !== 'json')) {
                    if (this.debug) {
                        logger.logToStderr('Retrieving associated sites...');
                        logger.logToStderr('');
                    }
                    requestOptions = {
                        url: `${spoAdminUrl}/_api/web/lists/GetByTitle('DO_NOT_DELETE_SPLIST_TENANTADMIN_AGGREGATED_SITECOLLECTIONS')/RenderListDataAsStream`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json',
                        data: {
                            parameters: {
                                ViewXml: "<View><Query><Where><And><And><IsNull><FieldRef Name=\"TimeDeleted\"/></IsNull><Neq><FieldRef Name=\"State\"/><Value Type='Integer'>0</Value></Neq></And><Neq><FieldRef Name=\"HubSiteId\"/><Value Type='Text'>{00000000-0000-0000-0000-000000000000}</Value></Neq></And></Where><OrderBy><FieldRef Name='Title' Ascending='true' /></OrderBy></Query><ViewFields><FieldRef Name=\"Title\"/><FieldRef Name=\"SiteUrl\"/><FieldRef Name=\"SiteId\"/><FieldRef Name=\"HubSiteId\"/></ViewFields><RowLimit Paged=\"TRUE\">" + this.batchSize + "</RowLimit></View>",
                                DatesInUtc: true
                            }
                        }
                    };
                    if (this.debug) {
                        logger.logToStderr(`Will retrieve associated sites (including the hub sites) in batches of ${this.batchSize}`);
                    }
                    const res = yield this.getSites(requestOptions, requestOptions.url, logger);
                    if (res) {
                        hubSites.forEach(h => {
                            const filteredSites = res.filter(f => {
                                // Only include sites of which the Site Id is not the same as the
                                // Hub Site ID (as this site is the actual hub site) and of which the
                                // Hub Site ID matches the ID of the Hub
                                return f.SiteId !== f.HubSiteId
                                    && f.HubSiteId.toUpperCase() === `{${h.ID.toUpperCase()}}`;
                            });
                            h.AssociatedSites = filteredSites.map(a => {
                                return {
                                    Title: a.Title,
                                    SiteUrl: a.SiteUrl
                                };
                            });
                        });
                    }
                }
                logger.log(hubSites);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getSites(reqOptions, nonPagedUrl, logger, sites = [], batchNumber = 0) {
        return new Promise((resolve, reject) => {
            request_1.default
                .post(reqOptions)
                .then((res) => {
                batchNumber++;
                const retrievedSites = res.Row.length > 0 ? sites.concat(res.Row) : sites;
                if (this.debug) {
                    logger.logToStderr(res);
                    logger.logToStderr(`Retrieved ${res.Row.length} sites in batch ${batchNumber}`);
                }
                if (!!res.NextHref) {
                    reqOptions.url = nonPagedUrl + res.NextHref;
                    if (this.debug) {
                        logger.logToStderr(`Url for next batch of sites: ${reqOptions.url}`);
                    }
                    this
                        .getSites(reqOptions, nonPagedUrl, logger, retrievedSites, batchNumber)
                        .then((associatedSites) => {
                        resolve(associatedSites);
                    }, (err) => {
                        reject(err);
                    });
                }
                else {
                    if (this.debug) {
                        logger.logToStderr(`Retrieved ${retrievedSites.length} sites in total`);
                    }
                    resolve(retrievedSites);
                }
            }, (err) => {
                reject(err);
            });
        });
    }
}
_SpoHubSiteListCommand_instances = new WeakSet(), _SpoHubSiteListCommand_initTelemetry = function _SpoHubSiteListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            includeAssociatedSites: args.options.includeAssociatedSites === true
        });
    });
}, _SpoHubSiteListCommand_initOptions = function _SpoHubSiteListCommand_initOptions() {
    this.options.unshift({
        option: '-i, --includeAssociatedSites'
    });
};
module.exports = new SpoHubSiteListCommand();
//# sourceMappingURL=hubsite-list.js.map