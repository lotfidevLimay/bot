"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoHubSiteGetCommand_instances, _SpoHubSiteGetCommand_initTelemetry, _SpoHubSiteGetCommand_initOptions, _SpoHubSiteGetCommand_initValidators, _SpoHubSiteGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const SpoListItemListCommand = require("../listitem/listitem-list");
class SpoHubSiteGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoHubSiteGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoHubSiteGetCommand_instances, "m", _SpoHubSiteGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoHubSiteGetCommand_instances, "m", _SpoHubSiteGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoHubSiteGetCommand_instances, "m", _SpoHubSiteGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoHubSiteGetCommand_instances, "m", _SpoHubSiteGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.HUBSITE_GET;
    }
    get description() {
        return 'Gets information about the specified hub site';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                const hubSite = args.options.id ? yield this.getHubSiteById(spoUrl, args.options) : yield this.getHubSite(spoUrl, args.options);
                if (args.options.includeAssociatedSites && (args.options.output && args.options.output !== 'json')) {
                    throw 'includeAssociatedSites option is only allowed with json output mode';
                }
                if (args.options.includeAssociatedSites === true && args.options.output && args.options.output === 'json') {
                    const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                    const associatedSitesCommandOutput = yield this.getAssociatedSites(spoAdminUrl, hubSite.SiteId, logger, args);
                    const associatedSites = JSON.parse(associatedSitesCommandOutput.stdout);
                    hubSite.AssociatedSites = associatedSites.filter(s => s.SiteId !== hubSite.SiteId);
                }
                logger.log(hubSite);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getAssociatedSites(spoAdminUrl, hubSiteId, logger, args) {
        const options = {
            output: 'json',
            debug: args.options.debug,
            verbose: args.options.verbose,
            listTitle: 'DO_NOT_DELETE_SPLIST_TENANTADMIN_AGGREGATED_SITECOLLECTIONS',
            webUrl: spoAdminUrl,
            filter: `HubSiteId eq '${hubSiteId}'`,
            fields: 'Title,SiteUrl,SiteId'
        };
        return Cli_1.Cli
            .executeCommandWithOutput(SpoListItemListCommand, { options: Object.assign(Object.assign({}, options), { _: [] }) });
    }
    getHubSiteById(spoUrl, options) {
        const requestOptions = {
            url: `${spoUrl}/_api/hubsites/getbyid('${options.id}')`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    getHubSite(spoUrl, options) {
        const requestOptions = {
            url: `${spoUrl}/_api/hubsites`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((response) => {
            let hubSites = response.value;
            if (options.title) {
                hubSites = hubSites.filter(site => site.Title.toLocaleLowerCase() === options.title.toLocaleLowerCase());
            }
            else if (options.url) {
                hubSites = hubSites.filter(site => site.SiteUrl.toLocaleLowerCase() === options.url.toLocaleLowerCase());
            }
            if (hubSites.length === 0) {
                return Promise.reject(`The specified hub site ${options.title || options.url} does not exist`);
            }
            if (hubSites.length > 1) {
                return Promise.reject(`Multiple hub sites with ${options.title || options.url} found. Please disambiguate: ${hubSites.map(site => site.SiteUrl).join(', ')}`);
            }
            return hubSites[0];
        });
    }
}
_SpoHubSiteGetCommand_instances = new WeakSet(), _SpoHubSiteGetCommand_initTelemetry = function _SpoHubSiteGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            title: typeof args.options.title !== 'undefined',
            url: typeof args.options.url !== 'undefined',
            includeAssociatedSites: args.options.includeAssociatedSites === true
        });
    });
}, _SpoHubSiteGetCommand_initOptions = function _SpoHubSiteGetCommand_initOptions() {
    this.options.unshift({ option: '-i, --id [id]' }, { option: '-t, --title [title]' }, { option: '-u, --url [url]' }, { option: '--includeAssociatedSites' });
}, _SpoHubSiteGetCommand_initValidators = function _SpoHubSiteGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id && !validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        if (args.options.url) {
            return validation_1.validation.isValidSharePointUrl(args.options.url);
        }
        return true;
    }));
}, _SpoHubSiteGetCommand_initOptionSets = function _SpoHubSiteGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'title', 'url']);
};
module.exports = new SpoHubSiteGetCommand();
//# sourceMappingURL=hubsite-get.js.map