"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoRoleDefinitionGetCommand_instances, _SpoRoleDefinitionGetCommand_initOptions, _SpoRoleDefinitionGetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const base_permissions_1 = require("../../base-permissions");
const commands_1 = require("../../commands");
const RoleType_1 = require("./RoleType");
class SpoRoleDefinitionGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoRoleDefinitionGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoRoleDefinitionGetCommand_instances, "m", _SpoRoleDefinitionGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoRoleDefinitionGetCommand_instances, "m", _SpoRoleDefinitionGetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.ROLEDEFINITION_GET;
    }
    get description() {
        return 'Gets specified role definition from web by id';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Getting role definition from ${args.options.webUrl}...`);
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/roledefinitions(${args.options.id})`,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                const response = yield request_1.default.get(requestOptions);
                const permissions = new base_permissions_1.BasePermissions();
                permissions.high = response.BasePermissions.High;
                permissions.low = response.BasePermissions.Low;
                response.BasePermissionsValue = permissions.parse();
                response.RoleTypeKindValue = RoleType_1.RoleType[response.RoleTypeKind];
                logger.log(response);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoRoleDefinitionGetCommand_instances = new WeakSet(), _SpoRoleDefinitionGetCommand_initOptions = function _SpoRoleDefinitionGetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-i, --id <id>'
    });
}, _SpoRoleDefinitionGetCommand_initValidators = function _SpoRoleDefinitionGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (isNaN(args.options.id)) {
            return `${args.options.id} is not a number`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
};
module.exports = new SpoRoleDefinitionGetCommand();
//# sourceMappingURL=roledefinition-get.js.map