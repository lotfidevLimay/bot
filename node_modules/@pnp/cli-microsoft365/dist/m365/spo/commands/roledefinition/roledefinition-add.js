"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoRoleDefinitionAddCommand_instances, _SpoRoleDefinitionAddCommand_initTelemetry, _SpoRoleDefinitionAddCommand_initOptions, _SpoRoleDefinitionAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const base_permissions_1 = require("../../base-permissions");
const commands_1 = require("../../commands");
class SpoRoleDefinitionAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoRoleDefinitionAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoRoleDefinitionAddCommand_instances, "m", _SpoRoleDefinitionAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoRoleDefinitionAddCommand_instances, "m", _SpoRoleDefinitionAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoRoleDefinitionAddCommand_instances, "m", _SpoRoleDefinitionAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.ROLEDEFINITION_ADD;
    }
    get description() {
        return 'Adds a new roledefinition to web';
    }
    get permissionsKindMap() {
        const result = [];
        for (const kind in base_permissions_1.PermissionKind) {
            if (typeof base_permissions_1.PermissionKind[kind] === 'number') {
                result.push(kind);
            }
        }
        return result;
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Adding role definition to ${args.options.webUrl}...`);
            }
            const description = args.options.description || '';
            const permissions = new base_permissions_1.BasePermissions();
            if (args.options.rights) {
                const rights = args.options.rights.split(',');
                for (const item of rights) {
                    const kind = base_permissions_1.PermissionKind[item.trim()];
                    permissions.set(kind);
                }
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/roledefinitions`,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json',
                data: {
                    'BasePermissions': {
                        'High': permissions.high.toString(),
                        'Low': permissions.low.toString()
                    },
                    'Description': `${description}`,
                    'Name': `${args.options.name}`
                }
            };
            try {
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoRoleDefinitionAddCommand_instances = new WeakSet(), _SpoRoleDefinitionAddCommand_initTelemetry = function _SpoRoleDefinitionAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            rights: args.options.rights,
            description: (!(!args.options.description)).toString()
        });
    });
}, _SpoRoleDefinitionAddCommand_initOptions = function _SpoRoleDefinitionAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-n, --name <name>'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '--rights [rights]',
        autocomplete: this.permissionsKindMap
    });
}, _SpoRoleDefinitionAddCommand_initValidators = function _SpoRoleDefinitionAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.rights) {
            const rights = args.options.rights.split(',');
            for (const item of rights) {
                const kind = base_permissions_1.PermissionKind[item.trim()];
                if (!kind) {
                    return `Rights option '${item}' is not recognized as valid PermissionKind choice. Please note it is case-sensitive. Allowed values are ${this.permissionsKindMap.join('|')}.`;
                }
            }
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
};
module.exports = new SpoRoleDefinitionAddCommand();
//# sourceMappingURL=roledefinition-add.js.map