"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoOrgAssetsLibraryAddCommand_instances, _SpoOrgAssetsLibraryAddCommand_initTelemetry, _SpoOrgAssetsLibraryAddCommand_initOptions, _SpoOrgAssetsLibraryAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoOrgAssetsLibraryAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoOrgAssetsLibraryAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoOrgAssetsLibraryAddCommand_instances, "m", _SpoOrgAssetsLibraryAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoOrgAssetsLibraryAddCommand_instances, "m", _SpoOrgAssetsLibraryAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoOrgAssetsLibraryAddCommand_instances, "m", _SpoOrgAssetsLibraryAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.ORGASSETSLIBRARY_ADD;
    }
    get description() {
        return 'Promotes an existing library to become an organization assets library';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let spoAdminUrl = '';
            const cdnTypeString = args.options.cdnType || 'Private';
            const cdnType = cdnTypeString === 'Private' ? 1 : 0;
            const thumbnailSchema = typeof args.options.thumbnailUrl === 'undefined' ? `<Parameter Type="Null" />` : `<Parameter Type="String">${args.options.thumbnailUrl}</Parameter>`;
            try {
                spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                const reqDigest = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': reqDigest.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><Method Name="AddToOrgAssetsLibAndCdnWithType" Id="11" ObjectPathId="8"><Parameters><Parameter Type="Enum">${cdnType}</Parameter><Parameter Type="String">${args.options.libraryUrl}</Parameter>${thumbnailSchema}<Parameter Type="Enum">1</Parameter></Parameters></Method></Actions><ObjectPaths><Constructor Id="8" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                };
                const res = yield request_1.default.post(requestOptions);
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    throw response.ErrorInfo.ErrorMessage;
                }
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
}
_SpoOrgAssetsLibraryAddCommand_instances = new WeakSet(), _SpoOrgAssetsLibraryAddCommand_initTelemetry = function _SpoOrgAssetsLibraryAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            cdnType: args.options.cdnType || 'Private',
            thumbnailUrl: typeof args.options.thumbnailUrl !== 'undefined'
        });
    });
}, _SpoOrgAssetsLibraryAddCommand_initOptions = function _SpoOrgAssetsLibraryAddCommand_initOptions() {
    this.options.unshift({
        option: '--libraryUrl <libraryUrl>'
    }, {
        option: '--thumbnailUrl [thumbnailUrl]'
    }, {
        option: '--cdnType [cdnType]',
        autocomplete: ['Public', 'Private']
    });
}, _SpoOrgAssetsLibraryAddCommand_initValidators = function _SpoOrgAssetsLibraryAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidThumbnailUrl = validation_1.validation.isValidSharePointUrl(args.options.thumbnailUrl);
        if (typeof args.options.thumbnailUrl !== 'undefined' && isValidThumbnailUrl !== true) {
            return isValidThumbnailUrl;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.libraryUrl);
    }));
};
module.exports = new SpoOrgAssetsLibraryAddCommand();
//# sourceMappingURL=orgassetslibrary-add.js.map