"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoOrgAssetsLibraryListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.ORGASSETSLIBRARY_LIST;
    }
    get description() {
        return 'List all libraries that are assigned as asset library';
    }
    commandAction(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                const reqDigest = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': reqDigest.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="4" ObjectPathId="3" /><Query Id="5" ObjectPathId="3"><Query SelectAllProperties="true"><Properties /></Query></Query><Method Name="GetOrgAssets" Id="6" ObjectPathId="3" /></Actions><ObjectPaths><Constructor Id="3" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                };
                const res = yield request_1.default.post(requestOptions);
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    throw response.ErrorInfo.ErrorMessage;
                }
                else {
                    const orgAssetsResponse = json[json.length - 1];
                    if (orgAssetsResponse === null || orgAssetsResponse.OrgAssetsLibraries === undefined) {
                        logger.log("No libraries in Organization Assets");
                    }
                    else {
                        const orgAssets = {
                            Url: orgAssetsResponse.Url.DecodedUrl,
                            Libraries: orgAssetsResponse.OrgAssetsLibraries._Child_Items_.map(t => {
                                return {
                                    DisplayName: t.DisplayName,
                                    LibraryUrl: t.LibraryUrl.DecodedUrl,
                                    ListId: t.ListId,
                                    ThumbnailUrl: t.ThumbnailUrl !== null ? t.ThumbnailUrl.DecodedUrl : null
                                };
                            })
                        };
                        logger.log(orgAssets);
                    }
                }
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
}
module.exports = new SpoOrgAssetsLibraryListCommand();
//# sourceMappingURL=orgassetslibrary-list.js.map