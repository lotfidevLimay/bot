"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteAppPermissionRemoveCommand_instances, _SpoSiteAppPermissionRemoveCommand_initTelemetry, _SpoSiteAppPermissionRemoveCommand_initOptions, _SpoSiteAppPermissionRemoveCommand_initValidators, _SpoSiteAppPermissionRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class SpoSiteAppPermissionRemoveCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _SpoSiteAppPermissionRemoveCommand_instances.add(this);
        this.siteId = '';
        __classPrivateFieldGet(this, _SpoSiteAppPermissionRemoveCommand_instances, "m", _SpoSiteAppPermissionRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionRemoveCommand_instances, "m", _SpoSiteAppPermissionRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionRemoveCommand_instances, "m", _SpoSiteAppPermissionRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionRemoveCommand_instances, "m", _SpoSiteAppPermissionRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.SITE_APPPERMISSION_REMOVE;
    }
    get description() {
        return 'Removes an application permission from the site';
    }
    getSpoSiteId(args) {
        const url = new URL(args.options.siteUrl);
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${url.hostname}:${url.pathname}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((site) => site.id);
    }
    getPermissions() {
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${this.siteId}/permissions`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    getFilteredPermissions(args, permissions) {
        let filterProperty = 'displayName';
        let filterValue = args.options.appDisplayName;
        if (args.options.appId) {
            filterProperty = 'id';
            filterValue = args.options.appId;
        }
        return permissions.filter((p) => {
            return p.grantedToIdentities.some(({ application }) => application[filterProperty] === filterValue);
        });
    }
    getPermissionIds(args) {
        if (args.options.permissionId) {
            return Promise.resolve([args.options.permissionId]);
        }
        return this
            .getPermissions()
            .then((res) => {
            let permissions = res.value;
            if (args.options.appId || args.options.appDisplayName) {
                permissions = this.getFilteredPermissions(args, res.value);
            }
            return Promise.resolve(permissions.map(x => x.id));
        });
    }
    removePermissions(permissionId) {
        const spRequestOptions = {
            url: `${this.resource}/v1.0/sites/${this.siteId}/permissions/${permissionId}`,
            headers: {
                'accept': 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.delete(spRequestOptions);
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeSiteAppPermission = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    this.siteId = yield this.getSpoSiteId(args);
                    const permissionIdsToRemove = yield this.getPermissionIds(args);
                    const tasks = [];
                    for (const permissionId of permissionIdsToRemove) {
                        tasks.push(this.removePermissions(permissionId));
                    }
                    const res = yield Promise.all(tasks);
                    logger.log(res);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeSiteAppPermission();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the specified application permission from site ${args.options.siteUrl}?`
                });
                if (result.continue) {
                    yield removeSiteAppPermission();
                }
            }
        });
    }
}
_SpoSiteAppPermissionRemoveCommand_instances = new WeakSet(), _SpoSiteAppPermissionRemoveCommand_initTelemetry = function _SpoSiteAppPermissionRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            appDisplayName: typeof args.options.appDisplayName !== 'undefined',
            permissionId: typeof args.options.permissionId !== 'undefined',
            confirm: (!!args.options.confirm).toString()
        });
    });
}, _SpoSiteAppPermissionRemoveCommand_initOptions = function _SpoSiteAppPermissionRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --siteUrl <siteUrl>'
    }, {
        option: '-i, --permissionId [permissionId]'
    }, {
        option: '--appId [appId]'
    }, {
        option: '-n, --appDisplayName [appDisplayName]'
    }, {
        option: '--confirm'
    });
}, _SpoSiteAppPermissionRemoveCommand_initValidators = function _SpoSiteAppPermissionRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.siteUrl);
    }));
}, _SpoSiteAppPermissionRemoveCommand_initOptionSets = function _SpoSiteAppPermissionRemoveCommand_initOptionSets() {
    this.optionSets.push(['appId', 'appDisplayName', 'permissionId']);
};
module.exports = new SpoSiteAppPermissionRemoveCommand();
//# sourceMappingURL=site-apppermission-remove.js.map