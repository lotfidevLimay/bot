"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteEnsureCommand_instances, _SpoSiteEnsureCommand_initOptions, _SpoSiteEnsureCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const Cli_1 = require("../../../../cli/Cli");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const spoWebGetCommand = require("../web/web-get");
const SharingCapabilities_1 = require("./SharingCapabilities");
const spoSiteAddCommand = require("./site-add");
const spoSiteSetCommand = require("./site-set");
class SpoSiteEnsureCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteEnsureCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteEnsureCommand_instances, "m", _SpoSiteEnsureCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteEnsureCommand_instances, "m", _SpoSiteEnsureCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_ENSURE;
    }
    get description() {
        return 'Ensures that the particular site collection exists and updates its properties if necessary';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.ensureSite(logger, args);
                if (this.debug) {
                    logger.logToStderr(res.stderr);
                }
                logger.log(res.stdout);
                if (this.verbose) {
                    logger.logToStderr(chalk.green('DONE'));
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    ensureSite(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let getWebOutput;
            try {
                getWebOutput = yield this.getWeb(args, logger);
            }
            catch (err) {
                if (this.debug) {
                    logger.logToStderr(err.stderr);
                }
                if (err.error.message !== '404 FILE NOT FOUND') {
                    throw err;
                }
                if (this.verbose) {
                    logger.logToStderr(`No site found at ${args.options.url}`);
                }
                return this.createSite(args, logger);
            }
            if (this.debug) {
                logger.logToStderr(getWebOutput.stderr);
            }
            if (this.verbose) {
                logger.logToStderr(`Site found at ${args.options.url}. Checking if site matches conditions...`);
            }
            const web = JSON.parse(getWebOutput.stdout);
            if (args.options.type) {
                // type was specified so we need to check if the existing site matches
                // it. If not, we throw an error and stop
                // Determine the type of site to match
                let expectedWebTemplate;
                switch (args.options.type) {
                    case 'TeamSite':
                        expectedWebTemplate = 'GROUP#0';
                        break;
                    case 'CommunicationSite':
                        expectedWebTemplate = 'SITEPAGEPUBLISHING#0';
                        break;
                    case 'ClassicSite':
                        expectedWebTemplate = args.options.webTemplate;
                        break;
                    default:
                        throw `${args.options.type} is not a valid site type. Allowed types are TeamSite,CommunicationSite,ClassicSite`;
                }
                if (expectedWebTemplate) {
                    const currentWebTemplate = `${web.WebTemplate}#${web.Configuration}`;
                    if (expectedWebTemplate !== currentWebTemplate) {
                        throw `Expected web template ${expectedWebTemplate} but site found at ${args.options.url} is based on ${currentWebTemplate}`;
                    }
                }
            }
            if (this.verbose) {
                logger.logToStderr(`Site matches conditions. Updating...`);
            }
            return this.updateSite(args, logger);
        });
    }
    getWeb(args, logger) {
        if (this.verbose) {
            logger.logToStderr(`Checking if site ${args.options.url} exists...`);
        }
        const options = {
            webUrl: args.options.url,
            output: 'json',
            debug: this.debug,
            verbose: this.verbose
        };
        return Cli_1.Cli.executeCommandWithOutput(spoWebGetCommand, { options: Object.assign(Object.assign({}, options), { _: [] }) });
    }
    createSite(args, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Creating site...`);
            }
            const options = {
                type: args.options.type,
                title: args.options.title,
                alias: args.options.alias,
                description: args.options.description,
                classification: args.options.classification,
                isPublic: args.options.isPublic,
                lcid: args.options.lcid,
                url: typeof args.options.type === 'undefined' || args.options.type === 'TeamSite' ? undefined : args.options.url,
                owners: args.options.owners,
                shareByEmailEnabled: args.options.shareByEmailEnabled,
                siteDesign: args.options.siteDesign,
                siteDesignId: args.options.siteDesignId,
                timeZone: args.options.timeZone,
                webTemplate: args.options.webTemplate,
                resourceQuota: args.options.resourceQuota,
                resourceQuotaWarningLevel: args.options.resourceQuotaWarningLevel,
                storageQuota: args.options.storageQuota,
                storageQuotaWarningLevel: args.options.storageQuotaWarningLevel,
                removeDeletedSite: args.options.removeDeletedSite,
                wait: args.options.wait,
                verbose: this.verbose,
                debug: this.debug
            };
            const validationResult = yield spoSiteAddCommand.validate({ options: options }, Cli_1.Cli.getCommandInfo(spoSiteAddCommand));
            if (validationResult !== true) {
                return Promise.reject(validationResult);
            }
            return Cli_1.Cli.executeCommandWithOutput(spoSiteAddCommand, { options: Object.assign(Object.assign({}, options), { _: [] }) });
        });
    }
    updateSite(args, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Updating site...`);
            }
            const options = {
                classification: args.options.classification,
                disableFlows: args.options.disableFlows,
                isPublic: typeof args.options.isPublic !== 'undefined' ? args.options.isPublic.toString() : undefined,
                owners: args.options.owners,
                shareByEmailEnabled: typeof args.options.shareByEmailEnabled !== 'undefined' ? args.options.shareByEmailEnabled.toString() : undefined,
                siteDesignId: args.options.siteDesignId,
                title: args.options.title,
                url: args.options.url,
                sharingCapability: args.options.sharingCapability,
                verbose: this.verbose,
                debug: this.debug
            };
            const validationResult = yield spoSiteSetCommand.validate({ options: options }, Cli_1.Cli.getCommandInfo(spoSiteSetCommand));
            if (validationResult !== true) {
                return Promise.reject(validationResult);
            }
            return Cli_1.Cli.executeCommandWithOutput(spoSiteSetCommand, { options: Object.assign(Object.assign({}, options), { _: [] }) });
        });
    }
    /**
     * Maps the base sharingCapability enum to string array so it can
     * more easily be used in validation or descriptions.
     */
    get sharingCapabilities() {
        const result = [];
        for (const sharingCapability in SharingCapabilities_1.SharingCapabilities) {
            if (typeof SharingCapabilities_1.SharingCapabilities[sharingCapability] === 'number') {
                result.push(sharingCapability);
            }
        }
        return result;
    }
}
_SpoSiteEnsureCommand_instances = new WeakSet(), _SpoSiteEnsureCommand_initOptions = function _SpoSiteEnsureCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '--type [type]',
        autocomplete: ['TeamSite', 'CommunicationSite', 'ClassicSite']
    }, {
        option: '-t, --title <title>'
    }, {
        option: '-a, --alias [alias]'
    }, {
        option: '-z, --timeZone [timeZone]'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '-l, --lcid [lcid]'
    }, {
        option: '--owners [owners]'
    }, {
        option: '--isPublic'
    }, {
        option: '-c, --classification [classification]'
    }, {
        option: '--siteDesign [siteDesign]',
        autocomplete: ['Topic', 'Showcase', 'Blank']
    }, {
        option: '--siteDesignId [siteDesignId]'
    }, {
        option: '--shareByEmailEnabled'
    }, {
        option: '-w, --webTemplate [webTemplate]'
    }, {
        option: '--resourceQuota [resourceQuota]'
    }, {
        option: '--resourceQuotaWarningLevel [resourceQuotaWarningLevel]'
    }, {
        option: '--storageQuota [storageQuota]'
    }, {
        option: '--storageQuotaWarningLevel [storageQuotaWarningLevel]'
    }, {
        option: '--removeDeletedSite'
    }, {
        option: '--disableFlows [disableFlows]'
    }, {
        option: '--sharingCapability [sharingCapability]',
        autocomplete: this.sharingCapabilities
    }, {
        option: '--wait'
    });
}, _SpoSiteEnsureCommand_initValidators = function _SpoSiteEnsureCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.url); }));
};
module.exports = new SpoSiteEnsureCommand();
//# sourceMappingURL=site-ensure.js.map