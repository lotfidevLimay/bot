"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteRemoveCommand_instances, _SpoSiteRemoveCommand_initTelemetry, _SpoSiteRemoveCommand_initOptions, _SpoSiteRemoveCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const Cli_1 = require("../../../../cli/Cli");
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const aadGroup_1 = require("../../../../utils/aadGroup");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteRemoveCommand_instances, "m", _SpoSiteRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteRemoveCommand_instances, "m", _SpoSiteRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteRemoveCommand_instances, "m", _SpoSiteRemoveCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_REMOVE;
    }
    get description() {
        return 'Removes the specified site';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeSite = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    this.dots = '';
                    if (args.options.fromRecycleBin) {
                        yield this.deleteSiteWithoutGroup(logger, args);
                    }
                    else {
                        const groupId = yield this.getSiteGroupId(args.options.url, logger);
                        if (groupId === '00000000-0000-0000-0000-000000000000') {
                            if (this.debug) {
                                logger.logToStderr('Site is not groupified. Going ahead with the conventional site deletion options');
                            }
                            yield this.deleteSiteWithoutGroup(logger, args);
                        }
                        else {
                            if (this.debug) {
                                logger.logToStderr(`Site attached to group ${groupId}. Initiating group delete operation via Graph API`);
                            }
                            try {
                                const group = yield aadGroup_1.aadGroup.getGroupById(groupId);
                                if (args.options.skipRecycleBin || args.options.wait) {
                                    logger.logToStderr(chalk.yellow(`Entered site is a groupified site. Hence, the parameters 'skipRecycleBin' and 'wait' will not be applicable.`));
                                }
                                yield this.deleteGroup(group.id, logger);
                                yield this.deleteSite(args.options.url, args.options.wait, logger);
                            }
                            catch (err) {
                                if (this.verbose) {
                                    logger.logToStderr(`Site group doesn't exist. Searching in the Microsoft 365 deleted groups.`);
                                }
                                const deletedGroups = yield this.isSiteGroupDeleted(groupId);
                                if (deletedGroups.value.length === 0) {
                                    if (this.verbose) {
                                        logger.logToStderr("Site group doesn't exist anymore. Deleting the site.");
                                    }
                                    if (args.options.wait) {
                                        logger.logToStderr(chalk.yellow(`Entered site is a groupified site. Hence, the parameter 'wait' will not be applicable.`));
                                    }
                                    yield this.deleteOrphanedSite(logger, args.options.url);
                                }
                                else {
                                    throw `Site group still exists in the deleted groups. The site won't be removed.`;
                                }
                            }
                        }
                    }
                }
                catch (err) {
                    this.handleRejectedPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeSite();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the site ${args.options.url}?`
                });
                if (result.continue) {
                    yield removeSite();
                }
            }
        });
    }
    isSiteGroupDeleted(groupId) {
        const requestOptions = {
            url: `https://graph.microsoft.com/v1.0/directory/deletedItems/Microsoft.Graph.Group?$select=id&$filter=groupTypes/any(c:c+eq+'Unified') and startswith(id, '${groupId}')`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    deleteOrphanedSite(logger, url) {
        return spo_1.spo
            .getSpoAdminUrl(logger, this.debug)
            .then((spoAdminUrl) => {
            const requestOptions = {
                url: `${spoAdminUrl}/_api/GroupSiteManager/Delete?siteUrl='${url}'`,
                headers: {
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            return request_1.default.post(requestOptions);
        });
    }
    deleteSiteWithoutGroup(logger, args) {
        return spo_1.spo
            .getSpoAdminUrl(logger, this.debug)
            .then((spoAdminUrl) => {
            this.spoAdminUrl = spoAdminUrl;
            return spo_1.spo.ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug);
        })
            .then((res) => {
            this.context = res;
            if (args.options.fromRecycleBin) {
                if (this.verbose) {
                    logger.logToStderr(`Deleting site from recycle bin ${args.options.url}...`);
                }
                return this.deleteSiteFromTheRecycleBin(args.options.url, args.options.wait, logger);
            }
            else {
                return this.deleteSite(args.options.url, args.options.wait, logger);
            }
        })
            .then(() => {
            if (args.options.skipRecycleBin) {
                if (this.verbose) {
                    logger.logToStderr(`Also deleting site from tenant recycle bin ${args.options.url}...`);
                }
                return this.deleteSiteFromTheRecycleBin(args.options.url, args.options.wait, logger);
            }
            else {
                return Promise.resolve();
            }
        });
    }
    deleteSite(url, wait, logger) {
        return new Promise((resolve, reject) => {
            spo_1.spo
                .ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug)
                .then((res) => {
                this.context = res;
                if (this.verbose) {
                    logger.logToStderr(`Deleting site ${url}...`);
                }
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.context.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="55" ObjectPathId="54"/><ObjectPath Id="57" ObjectPathId="56"/><Query Id="58" ObjectPathId="54"><Query SelectAllProperties="true"><Properties/></Query></Query><Query Id="59" ObjectPathId="56"><Query SelectAllProperties="false"><Properties><Property Name="IsComplete" ScalarProperty="true"/><Property Name="PollingInterval" ScalarProperty="true"/></Properties></Query></Query></Actions><ObjectPaths><Constructor Id="54" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}"/><Method Id="56" ParentId="54" Name="RemoveSite"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(url)}</Parameter></Parameters></Method></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                }
                else {
                    const operation = json[json.length - 1];
                    const isComplete = operation.IsComplete;
                    if (!wait || isComplete) {
                        resolve();
                        return;
                    }
                    setTimeout(() => {
                        spo_1.spo.waitUntilFinished({
                            operationId: JSON.stringify(operation._ObjectIdentity_),
                            siteUrl: this.spoAdminUrl,
                            resolve,
                            reject,
                            logger,
                            currentContext: this.context,
                            dots: this.dots,
                            debug: this.debug,
                            verbose: this.verbose
                        });
                    }, operation.PollingInterval);
                }
            });
        });
    }
    deleteSiteFromTheRecycleBin(url, wait, logger) {
        return new Promise((resolve, reject) => {
            spo_1.spo
                .ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug)
                .then((res) => {
                this.context = res;
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.context.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="185" ObjectPathId="184" /><Query Id="186" ObjectPathId="184"><Query SelectAllProperties="false"><Properties><Property Name="IsComplete" ScalarProperty="true" /><Property Name="PollingInterval" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Method Id="184" ParentId="175" Name="RemoveDeletedSite"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(url)}</Parameter></Parameters></Method><Constructor Id="175" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                }
                else {
                    const operation = json[json.length - 1];
                    const isComplete = operation.IsComplete;
                    if (!wait || isComplete) {
                        resolve();
                        return;
                    }
                    setTimeout(() => {
                        spo_1.spo.waitUntilFinished({
                            operationId: JSON.stringify(operation._ObjectIdentity_),
                            siteUrl: this.spoAdminUrl,
                            resolve,
                            reject,
                            logger,
                            currentContext: this.context,
                            dots: this.dots,
                            debug: this.debug,
                            verbose: this.verbose
                        });
                    }, operation.PollingInterval);
                }
            });
        });
    }
    getSiteGroupId(url, logger) {
        return spo_1.spo
            .getSpoAdminUrl(logger, this.debug)
            .then((_spoAdminUrl) => {
            this.spoAdminUrl = _spoAdminUrl;
            return spo_1.spo.ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug);
        })
            .then((res) => {
            this.context = res;
            if (this.verbose) {
                logger.logToStderr(`Retrieving the group Id of the site ${url}`);
            }
            const requestOptions = {
                url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': this.context.FormDigestValue
                },
                data: `<Request xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009" AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}"><Actions><ObjectPath Id="4" ObjectPathId="3"/><Query Id="5" ObjectPathId="3"><Query SelectAllProperties="false"><Properties><Property Name="GroupId" ScalarProperty="true"/></Properties></Query></Query></Actions><ObjectPaths><Constructor Id="1" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}"/><Method Id="3" ParentId="1" Name="GetSitePropertiesByUrl"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(url)}</Parameter></Parameters></Method></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                return Promise.reject(response.ErrorInfo.ErrorMessage);
            }
            else {
                const groupId = json[json.length - 1].GroupId.replace('/Guid(', '').replace(')/', '');
                return Promise.resolve(groupId);
            }
        });
    }
    deleteGroup(groupId, logger) {
        if (this.verbose) {
            logger.logToStderr(`Removing Microsoft 365 Group: ${groupId}...`);
        }
        const requestOptions = {
            url: `https://graph.microsoft.com/v1.0/groups/${groupId}`,
            headers: {
                'accept': 'application/json;odata.metadata=none'
            }
        };
        return request_1.default.delete(requestOptions);
    }
}
_SpoSiteRemoveCommand_instances = new WeakSet(), _SpoSiteRemoveCommand_initTelemetry = function _SpoSiteRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            skipRecycleBin: (!(!args.options.skipRecycleBin)).toString(),
            fromRecycleBin: (!(!args.options.fromRecycleBin)).toString(),
            wait: args.options.wait,
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SpoSiteRemoveCommand_initOptions = function _SpoSiteRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '--skipRecycleBin'
    }, {
        option: '--fromRecycleBin'
    }, {
        option: '--wait'
    }, {
        option: '--confirm'
    });
}, _SpoSiteRemoveCommand_initValidators = function _SpoSiteRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.url); }));
};
module.exports = new SpoSiteRemoveCommand();
//# sourceMappingURL=site-remove.js.map