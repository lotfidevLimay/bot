"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteClassicAddCommand_instances, _SpoSiteClassicAddCommand_initTelemetry, _SpoSiteClassicAddCommand_initOptions, _SpoSiteClassicAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteClassicAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteClassicAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteClassicAddCommand_instances, "m", _SpoSiteClassicAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteClassicAddCommand_instances, "m", _SpoSiteClassicAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteClassicAddCommand_instances, "m", _SpoSiteClassicAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_CLASSIC_ADD;
    }
    get description() {
        return 'Creates new classic site';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.dots = '';
            this.showDeprecationWarning(logger, commands_1.default.SITE_CLASSIC_ADD, commands_1.default.SITE_ADD);
            try {
                this.spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                this.context = yield spo_1.spo.ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug);
                if (args.options.removeDeletedSite) {
                    yield this.siteExistsInTheRecycleBin(args.options.url, logger);
                    if (this.verbose) {
                        logger.logToStderr('Site exists in the recycle bin');
                    }
                    yield this.deleteSiteFromTheRecycleBin(args.options.url, args.options.wait, logger);
                }
                else {
                    // assume site doesn't exist
                    if (this.verbose) {
                        logger.logToStderr('Site not found');
                    }
                }
                this.context = yield spo_1.spo.ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug);
                if (this.verbose) {
                    logger.logToStderr(`Creating site collection ${args.options.url}...`);
                }
                const lcid = typeof args.options.lcid === 'number' ? args.options.lcid : 1033;
                const storageQuota = typeof args.options.storageQuota === 'number' ? args.options.storageQuota : 100;
                const storageQuotaWarningLevel = typeof args.options.storageQuotaWarningLevel === 'number' ? args.options.storageQuotaWarningLevel : 100;
                const resourceQuota = typeof args.options.resourceQuota === 'number' ? args.options.resourceQuota : 0;
                const resourceQuotaWarningLevel = typeof args.options.resourceQuotaWarningLevel === 'number' ? args.options.resourceQuotaWarningLevel : 0;
                const webTemplate = args.options.webTemplate || 'STS#0';
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.context.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="4" ObjectPathId="3" /><ObjectPath Id="6" ObjectPathId="5" /><Query Id="7" ObjectPathId="3"><Query SelectAllProperties="true"><Properties /></Query></Query><Query Id="8" ObjectPathId="5"><Query SelectAllProperties="false"><Properties><Property Name="IsComplete" ScalarProperty="true" /><Property Name="PollingInterval" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Constructor Id="3" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /><Method Id="5" ParentId="3" Name="CreateSite"><Parameters><Parameter TypeId="{11f84fff-b8cf-47b6-8b50-34e692656606}"><Property Name="CompatibilityLevel" Type="Int32">0</Property><Property Name="Lcid" Type="UInt32">${lcid}</Property><Property Name="Owner" Type="String">${formatting_1.formatting.escapeXml(args.options.owner)}</Property><Property Name="StorageMaximumLevel" Type="Int64">${storageQuota}</Property><Property Name="StorageWarningLevel" Type="Int64">${storageQuotaWarningLevel}</Property><Property Name="Template" Type="String">${formatting_1.formatting.escapeXml(webTemplate)}</Property><Property Name="TimeZoneId" Type="Int32">${args.options.timeZone}</Property><Property Name="Title" Type="String">${formatting_1.formatting.escapeXml(args.options.title)}</Property><Property Name="Url" Type="String">${formatting_1.formatting.escapeXml(args.options.url)}</Property><Property Name="UserCodeMaximumLevel" Type="Double">${resourceQuota}</Property><Property Name="UserCodeWarningLevel" Type="Double">${resourceQuotaWarningLevel}</Property></Parameter></Parameters></Method></ObjectPaths></Request>`
                };
                const res = yield request_1.default.post(requestOptions);
                return new Promise((resolve, reject) => {
                    const json = JSON.parse(res);
                    const response = json[0];
                    if (response.ErrorInfo) {
                        throw response.ErrorInfo.ErrorMessage;
                    }
                    else {
                        const operation = json[json.length - 1];
                        const isComplete = operation.IsComplete;
                        if (!args.options.wait || isComplete) {
                            resolve();
                            return;
                        }
                        setTimeout(() => {
                            spo_1.spo.waitUntilFinished({
                                operationId: JSON.stringify(operation._ObjectIdentity_),
                                siteUrl: this.spoAdminUrl,
                                resolve,
                                reject,
                                logger,
                                currentContext: this.context,
                                dots: this.dots,
                                debug: this.debug,
                                verbose: this.verbose
                            });
                        }, operation.PollingInterval);
                    }
                });
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
    siteExistsInTheRecycleBin(url, logger) {
        return new Promise((resolve, reject) => {
            spo_1.spo
                .ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug)
                .then((res) => {
                this.context = res;
                if (this.verbose) {
                    logger.logToStderr(`Checking if the site ${url} exists...`);
                }
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.context.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="197" ObjectPathId="196" /><ObjectPath Id="199" ObjectPathId="198" /><Query Id="200" ObjectPathId="198"><Query SelectAllProperties="true"><Properties /></Query></Query></Actions><ObjectPaths><Constructor Id="196" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /><Method Id="198" ParentId="196" Name="GetSitePropertiesByUrl"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(url)}</Parameter><Parameter Type="Boolean">false</Parameter></Parameters></Method></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    if (response.ErrorInfo.ErrorTypeName === 'Microsoft.Online.SharePoint.Common.SpoNoSiteException') {
                        return Promise.resolve(false);
                    }
                    else {
                        return Promise.reject(response.ErrorInfo.ErrorMessage);
                    }
                }
                else {
                    const site = json[json.length - 1];
                    if (site.Status === 'Recycled') {
                        return Promise.reject(true);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                }
            })
                .then(() => {
                if (this.verbose) {
                    logger.logToStderr(`Site doesn't exist. Checking if the site ${url} exists in the recycle bin...`);
                }
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.context.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="181" ObjectPathId="180" /><Query Id="182" ObjectPathId="180"><Query SelectAllProperties="true"><Properties /></Query></Query></Actions><ObjectPaths><Method Id="180" ParentId="175" Name="GetDeletedSitePropertiesByUrl"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(url)}</Parameter></Parameters></Method><Constructor Id="175" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    if (response.ErrorInfo.ErrorTypeName === 'Microsoft.SharePoint.Client.UnknownError') {
                        resolve(false);
                    }
                    else {
                        reject(response.ErrorInfo.ErrorMessage);
                    }
                }
                else {
                    const site = json[json.length - 1];
                    if (site.Status === 'Recycled') {
                        resolve(true);
                    }
                    else {
                        resolve(false);
                    }
                }
            }, (error) => {
                if (typeof error === 'boolean') {
                    resolve(error);
                }
                else {
                    reject(error);
                }
            });
        });
    }
    deleteSiteFromTheRecycleBin(url, wait, logger) {
        return new Promise((resolve, reject) => {
            spo_1.spo
                .ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug)
                .then((res) => {
                this.context = res;
                if (this.verbose) {
                    logger.logToStderr(`Deleting site ${url} from the recycle bin...`);
                }
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.context.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="185" ObjectPathId="184" /><Query Id="186" ObjectPathId="184"><Query SelectAllProperties="false"><Properties><Property Name="IsComplete" ScalarProperty="true" /><Property Name="PollingInterval" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Method Id="184" ParentId="175" Name="RemoveDeletedSite"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(url)}</Parameter></Parameters></Method><Constructor Id="175" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                }
                else {
                    const operation = json[json.length - 1];
                    const isComplete = operation.IsComplete;
                    if (!wait || isComplete) {
                        resolve();
                        return;
                    }
                    setTimeout(() => {
                        spo_1.spo.waitUntilFinished({
                            operationId: JSON.stringify(operation._ObjectIdentity_),
                            siteUrl: this.spoAdminUrl,
                            resolve,
                            reject,
                            logger,
                            currentContext: this.context,
                            dots: this.dots,
                            verbose: this.verbose,
                            debug: this.debug
                        });
                    }, operation.PollingInterval);
                }
            });
        });
    }
}
_SpoSiteClassicAddCommand_instances = new WeakSet(), _SpoSiteClassicAddCommand_initTelemetry = function _SpoSiteClassicAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            lcid: typeof args.options.lcid !== 'undefined',
            webTemplate: typeof args.options.webTemplate !== 'undefined',
            resourceQuota: typeof args.options.resourceQuota !== 'undefined',
            resourceQuotaWarningLevel: typeof args.options.resourceQuotaWarningLevel !== 'undefined',
            storageQuota: typeof args.options.storageQuota !== 'undefined',
            storageQuotaWarningLevel: typeof args.options.storageQuotaWarningLevel !== 'undefined',
            removeDeletedSite: args.options.removeDeletedSite,
            wait: args.options.wait
        });
    });
}, _SpoSiteClassicAddCommand_initOptions = function _SpoSiteClassicAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '-t, --title <title>'
    }, {
        option: '--owner <owner>'
    }, {
        option: '-z, --timeZone <timeZone>'
    }, {
        option: '-l, --lcid [lcid]'
    }, {
        option: '-w, --webTemplate [webTemplate]'
    }, {
        option: '--resourceQuota [resourceQuota]'
    }, {
        option: '--resourceQuotaWarningLevel [resourceQuotaWarningLevel]'
    }, {
        option: '--storageQuota [storageQuota]'
    }, {
        option: '--storageQuotaWarningLevel [storageQuotaWarningLevel]'
    }, {
        option: '--removeDeletedSite'
    }, {
        option: '--wait'
    });
}, _SpoSiteClassicAddCommand_initValidators = function _SpoSiteClassicAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.url);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (typeof args.options.timeZone !== 'number') {
            return `${args.options.timeZone} is not a number`;
        }
        if (args.options.lcid &&
            typeof args.options.lcid !== 'number') {
            return `${args.options.lcid} is not a number`;
        }
        if (args.options.resourceQuota &&
            typeof args.options.resourceQuota !== 'number') {
            return `${args.options.resourceQuota} is not a number`;
        }
        if (args.options.resourceQuotaWarningLevel &&
            typeof args.options.resourceQuotaWarningLevel !== 'number') {
            return `${args.options.resourceQuotaWarningLevel} is not a number`;
        }
        if (args.options.resourceQuotaWarningLevel &&
            !args.options.resourceQuota) {
            return `You cannot specify resourceQuotaWarningLevel without specifying resourceQuota`;
        }
        if (args.options.resourceQuotaWarningLevel > args.options.resourceQuota) {
            return `resourceQuotaWarningLevel cannot exceed resourceQuota`;
        }
        if (args.options.storageQuota &&
            typeof args.options.storageQuota !== 'number') {
            return `${args.options.storageQuota} is not a number`;
        }
        if (args.options.storageQuotaWarningLevel &&
            typeof args.options.storageQuotaWarningLevel !== 'number') {
            return `${args.options.storageQuotaWarningLevel} is not a number`;
        }
        if (args.options.storageQuotaWarningLevel &&
            !args.options.storageQuota) {
            return `You cannot specify storageQuotaWarningLevel without specifying storageQuota`;
        }
        if (args.options.storageQuotaWarningLevel > args.options.storageQuota) {
            return `storageQuotaWarningLevel cannot exceed storageQuota`;
        }
        return true;
    }));
};
module.exports = new SpoSiteClassicAddCommand();
//# sourceMappingURL=site-classic-add.js.map