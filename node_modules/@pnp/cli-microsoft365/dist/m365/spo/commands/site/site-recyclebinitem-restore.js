"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteRecycleBinItemRestoreCommand_instances, _SpoSiteRecycleBinItemRestoreCommand_initOptions, _SpoSiteRecycleBinItemRestoreCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteRecycleBinItemRestoreCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteRecycleBinItemRestoreCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteRecycleBinItemRestoreCommand_instances, "m", _SpoSiteRecycleBinItemRestoreCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteRecycleBinItemRestoreCommand_instances, "m", _SpoSiteRecycleBinItemRestoreCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_RECYCLEBINITEM_RESTORE;
    }
    get description() {
        return 'Restores given items from the site recycle bin';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Restoring items from recycle bin at ${args.options.siteUrl}...`);
            }
            const requestUrl = `${args.options.siteUrl}/_api/site/RecycleBin/RestoreByIds`;
            const ids = formatting_1.formatting.splitAndTrim(args.options.ids);
            const idsChunks = [];
            while (ids.length) {
                idsChunks.push(ids.splice(0, 20));
            }
            try {
                yield Promise.all(idsChunks.map((idsChunk) => {
                    const requestOptions = {
                        url: requestUrl,
                        headers: {
                            'accept': 'application/json;odata=nometadata',
                            'content-type': 'application/json'
                        },
                        responseType: 'json',
                        data: {
                            ids: idsChunk
                        }
                    };
                    return request_1.default.post(requestOptions);
                }));
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoSiteRecycleBinItemRestoreCommand_instances = new WeakSet(), _SpoSiteRecycleBinItemRestoreCommand_initOptions = function _SpoSiteRecycleBinItemRestoreCommand_initOptions() {
    this.options.unshift({
        option: '-u, --siteUrl <siteUrl>'
    }, {
        option: '-i, --ids <ids>'
    });
}, _SpoSiteRecycleBinItemRestoreCommand_initValidators = function _SpoSiteRecycleBinItemRestoreCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.siteUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        const invalidIds = formatting_1.formatting
            .splitAndTrim(args.options.ids)
            .filter(id => !validation_1.validation.isValidGuid(id));
        if (invalidIds.length > 0) {
            return `The following IDs are invalid: ${invalidIds.join(', ')}`;
        }
        return true;
    }));
};
module.exports = new SpoSiteRecycleBinItemRestoreCommand();
//# sourceMappingURL=site-recyclebinitem-restore.js.map