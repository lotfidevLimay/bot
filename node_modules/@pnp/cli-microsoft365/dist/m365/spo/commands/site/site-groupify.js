"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteGroupifyCommand_instances, _SpoSiteGroupifyCommand_initTelemetry, _SpoSiteGroupifyCommand_initOptions, _SpoSiteGroupifyCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteGroupifyCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteGroupifyCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteGroupifyCommand_instances, "m", _SpoSiteGroupifyCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteGroupifyCommand_instances, "m", _SpoSiteGroupifyCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteGroupifyCommand_instances, "m", _SpoSiteGroupifyCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_GROUPIFY;
    }
    get description() {
        return 'Connects site collection to an Microsoft 365 Group';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionalParams = {};
            const payload = {
                displayName: args.options.displayName,
                alias: args.options.alias,
                isPublic: args.options.isPublic === true,
                optionalParams: optionalParams
            };
            if (args.options.description) {
                optionalParams.Description = args.options.description;
            }
            if (args.options.classification) {
                optionalParams.Classification = args.options.classification;
            }
            if (args.options.keepOldHomepage) {
                optionalParams.CreationOptions = ["SharePointKeepOldHomepage"];
            }
            const requestOptions = {
                url: `${args.options.siteUrl}/_api/GroupSiteManager/CreateGroupForSite`,
                headers: {
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata',
                    responseType: 'json'
                },
                data: payload,
                responseType: 'json'
            };
            try {
                const res = yield request_1.default.post(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoSiteGroupifyCommand_instances = new WeakSet(), _SpoSiteGroupifyCommand_initTelemetry = function _SpoSiteGroupifyCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            description: typeof args.options.description !== 'undefined',
            classification: typeof args.options.classification !== 'undefined',
            isPublic: args.options.isPublic === true,
            keepOldHomepage: args.options.keepOldHomepage === true
        });
    });
}, _SpoSiteGroupifyCommand_initOptions = function _SpoSiteGroupifyCommand_initOptions() {
    this.options.unshift({
        option: '-u, --siteUrl <siteUrl>'
    }, {
        option: '-a, --alias <alias>'
    }, {
        option: '-n, --displayName <displayName>'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '-c, --classification [classification]'
    }, {
        option: '--isPublic'
    }, {
        option: '--keepOldHomepage'
    });
}, _SpoSiteGroupifyCommand_initValidators = function _SpoSiteGroupifyCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.siteUrl); }));
};
module.exports = new SpoSiteGroupifyCommand();
//# sourceMappingURL=site-groupify.js.map