"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteSetCommand_instances, _SpoSiteSetCommand_initTelemetry, _SpoSiteSetCommand_initOptions, _SpoSiteSetCommand_initValidators, _SpoSiteSetCommand_initTypes;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const Command_1 = require("../../../../Command");
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const aadO365GroupSetCommand = require("../../../aad/commands/o365group/o365group-set");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const SharingCapabilities_1 = require("../site/SharingCapabilities");
const spoSiteDesignApplyCommand = require("../sitedesign/sitedesign-apply");
class SpoSiteSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteSetCommand_instances, "m", _SpoSiteSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteSetCommand_instances, "m", _SpoSiteSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteSetCommand_instances, "m", _SpoSiteSetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoSiteSetCommand_instances, "m", _SpoSiteSetCommand_initTypes).call(this);
    }
    get name() {
        return commands_1.default.SITE_SET;
    }
    get description() {
        return 'Updates properties of the specified site';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.dots = '';
                this.tenantId = yield spo_1.spo.getTenantId(logger, this.debug);
                this.spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                this.context = yield spo_1.spo.ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug);
                yield this.loadSiteIds(args.options.url, logger);
                if (this.isGroupConnectedSite()) {
                    yield this.updateGroupConnectedSite(logger, args);
                }
                else {
                    yield this.updateSharePointOnlySite(logger, args);
                }
                const siteProps = yield this.updateSiteProperties(logger, args);
                yield this.waitForSiteUpdateCompletion(logger, args, siteProps);
                yield this.applySiteDesign(logger, args);
                yield this.setLogo(logger, args);
                const lockState = yield this.updateSiteLockState(logger, args);
                yield this.waitForSiteUpdateCompletion(logger, args, lockState);
            }
            catch (err) {
                if (err instanceof Command_1.CommandError) {
                    err = err.message;
                }
                this.handleRejectedPromise(err);
            }
        });
    }
    setLogo(logger, args) {
        if (typeof args.options.siteLogoUrl === 'undefined') {
            return Promise.resolve();
        }
        if (this.debug) {
            logger.logToStderr(`Setting the site its logo...`);
        }
        const logoUrl = args.options.siteLogoUrl ? urlUtil_1.urlUtil.getServerRelativePath(args.options.url, args.options.siteLogoUrl) : "";
        const requestOptions = {
            url: `${args.options.url}/_api/siteiconmanager/setsitelogo`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            data: {
                relativeLogoUrl: logoUrl
            },
            responseType: 'json'
        };
        return request_1.default.post(requestOptions);
    }
    updateSharePointOnlySite(logger, args) {
        if (this.debug) {
            logger.logToStderr('Site is not group connected');
        }
        if (typeof args.options.isPublic !== 'undefined') {
            return Promise.reject(`The isPublic option can't be set on a site that is not groupified`);
        }
        return this.updateSiteDescription(logger, args)
            .then(_ => this.updateSiteOwners(logger, args));
    }
    waitForSiteUpdateCompletion(logger, args, res) {
        return new Promise((resolve, reject) => {
            if (!res) {
                resolve();
                return;
            }
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                reject(response.ErrorInfo.ErrorMessage);
            }
            else {
                const operation = json[json.length - 1];
                const isComplete = operation.IsComplete;
                if (!args.options.wait || isComplete) {
                    resolve();
                    return;
                }
                setTimeout(() => {
                    spo_1.spo.waitUntilFinished({
                        operationId: JSON.stringify(operation._ObjectIdentity_),
                        siteUrl: this.spoAdminUrl,
                        resolve,
                        reject,
                        logger,
                        currentContext: this.context,
                        dots: this.dots,
                        debug: this.debug,
                        verbose: this.verbose
                    });
                }, operation.PollingInterval);
            }
        });
    }
    updateSiteOwners(logger, args) {
        if (!args.options.owners) {
            return Promise.resolve();
        }
        return new Promise((resolve, reject) => {
            if (this.verbose) {
                logger.logToStderr(`Updating site owners ${args.options.url}...`);
            }
            Promise.all(args.options.owners.split(',').map(o => {
                return this.setAdmin(args.options.url, o.trim());
            }))
                .then(() => {
                resolve();
            }, (err) => {
                reject(err);
            });
        });
    }
    setAdmin(siteUrl, principal) {
        return new Promise((resolve, reject) => {
            const requestOptions = {
                url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': this.context.FormDigestValue
                },
                data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="48" ObjectPathId="47" /></Actions><ObjectPaths><Method Id="47" ParentId="34" Name="SetSiteAdmin"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(siteUrl)}</Parameter><Parameter Type="String">${formatting_1.formatting.escapeXml(principal)}</Parameter><Parameter Type="Boolean">true</Parameter></Parameters></Method><Constructor Id="34" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions)
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                }
                else {
                    resolve();
                }
            }, (err) => {
                reject(err);
            });
        });
    }
    updateSiteDescription(logger, args) {
        if (!args.options.description) {
            return Promise.resolve(undefined);
        }
        if (this.verbose) {
            logger.logToStderr(`Setting site description ${args.options.url}...`);
        }
        const requestOptions = {
            url: `${args.options.url}/_api/web`,
            headers: {
                'IF-MATCH': '*',
                'Accept': 'application/json;odata=nometadata',
                'content-type': 'application/json;odata=nometadata',
                'X-RequestDigest': this.context.FormDigestValue,
                'X-HTTP-Method': 'MERGE'
            },
            data: {
                Description: args.options.description
            },
            json: true
        };
        return request_1.default.post(requestOptions);
    }
    updateSiteLockState(logger, args) {
        if (!args.options.lockState) {
            return Promise.resolve(undefined);
        }
        if (this.verbose) {
            logger.logToStderr(`Setting site lock state ${args.options.url}...`);
        }
        const requestOptions = {
            url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
            headers: {
                'X-RequestDigest': this.context.FormDigestValue
            },
            data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><SetProperty Id="7" ObjectPathId="5" Name="LockState"><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.lockState)}</Parameter></SetProperty><ObjectPath Id="9" ObjectPathId="8" /><ObjectIdentityQuery Id="10" ObjectPathId="5" /><Query Id="11" ObjectPathId="8"><Query SelectAllProperties="true"><Properties /></Query></Query></Actions><ObjectPaths><Method Id="5" ParentId="3" Name="GetSitePropertiesByUrl"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.url)}</Parameter><Parameter Type="Boolean">false</Parameter></Parameters></Method><Method Id="8" ParentId="5" Name="Update" /><Constructor Id="3" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
        };
        return request_1.default.post(requestOptions);
    }
    updateGroupConnectedSite(logger, args) {
        if (this.debug) {
            logger.logToStderr(`Site attached to group ${this.groupId}`);
        }
        return new Promise((resolve, reject) => {
            if (typeof args.options.title === 'undefined' &&
                typeof args.options.description === 'undefined' &&
                typeof args.options.isPublic === 'undefined' &&
                typeof args.options.owners === 'undefined') {
                return resolve();
            }
            const promises = [];
            if (typeof args.options.title !== 'undefined') {
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_api/SPOGroup/UpdateGroupPropertiesBySiteId`,
                    headers: {
                        accept: 'application/json;odata=nometadata',
                        'content-type': 'application/json;charset=utf-8',
                        'X-RequestDigest': this.context.FormDigestValue
                    },
                    data: {
                        groupId: this.groupId,
                        siteId: this.siteId,
                        displayName: args.options.title
                    },
                    responseType: 'json'
                };
                promises.push(request_1.default.post(requestOptions));
            }
            if (typeof args.options.isPublic !== 'undefined') {
                const commandOptions = {
                    id: this.groupId,
                    isPrivate: (args.options.isPublic === 'false').toString(),
                    debug: this.debug,
                    verbose: this.verbose
                };
                promises.push(Cli_1.Cli.executeCommand(aadO365GroupSetCommand, { options: Object.assign(Object.assign({}, commandOptions), { _: [] }) }));
            }
            if (args.options.description) {
                promises.push(this.setGroupifiedSiteDescription(args.options.description));
            }
            promises.push(this.setGroupifiedSiteOwners(logger, args));
            Promise
                .all(promises)
                .then(() => {
                resolve();
            }, (error) => {
                reject(error);
            });
        });
    }
    setGroupifiedSiteDescription(description) {
        const requestOptions = {
            url: `https://graph.microsoft.com/v1.0/groups/${this.groupId}`,
            headers: {
                'content-type': 'application/json;odata.metadata=none'
            },
            data: {
                description: description
            }
        };
        return request_1.default.patch(requestOptions);
    }
    setGroupifiedSiteOwners(logger, args) {
        if (typeof args.options.owners === 'undefined') {
            return Promise.resolve();
        }
        const owners = args.options.owners.split(',').map(o => o.trim());
        if (this.verbose) {
            logger.logToStderr('Retrieving user information to set group owners...');
        }
        const requestOptions = {
            url: `https://graph.microsoft.com/v1.0/users?$filter=${owners.map(o => `userPrincipalName eq '${o}'`).join(' or ')}&$select=id`,
            headers: {
                'content-type': 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions)
            .then((res) => {
            if (res.value.length === 0) {
                return Promise.resolve();
            }
            return Promise.all(res.value.map(user => {
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_api/SP.Directory.DirectorySession/Group('${this.groupId}')/Owners/Add(objectId='${user.id}', principalName='')`,
                    headers: {
                        'content-type': 'application/json;odata=verbose'
                    }
                };
                return request_1.default.post(requestOptions);
            }));
        });
    }
    updateSiteProperties(logger, args) {
        const isGroupConnectedSite = this.isGroupConnectedSite();
        const sharedProperties = ['classification', 'disableFlows', 'shareByEmailEnabled', 'sharingCapability', 'noScriptSite'];
        const siteProperties = ['title', 'resourceQuota', 'resourceQuotaWarningLevel', 'storageQuota', 'storageQuotaWarningLevel', 'allowSelfServiceUpgrade'];
        let properties = sharedProperties;
        properties = properties;
        if (!isGroupConnectedSite) {
            properties = properties.concat(siteProperties);
        }
        let updatedProperties = false;
        for (let i = 0; i < properties.length; i++) {
            if (typeof args.options[properties[i]] !== 'undefined') {
                updatedProperties = true;
                break;
            }
        }
        if (!updatedProperties) {
            return Promise.resolve(undefined);
        }
        return spo_1.spo
            .ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug)
            .then(res => {
            this.context = res;
            if (this.verbose) {
                logger.logToStderr(`Updating site ${args.options.url} properties...`);
            }
            let propertyId = 27;
            const payload = [];
            if (!isGroupConnectedSite) {
                if (args.options.title) {
                    payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="Title"><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.title)}</Parameter></SetProperty>`);
                }
                if (args.options.resourceQuota) {
                    payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="UserCodeMaximumLevel"><Parameter Type="Double">${args.options.resourceQuota}</Parameter></SetProperty>`);
                }
                if (args.options.resourceQuotaWarningLevel) {
                    payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="UserCodeWarningLevel"><Parameter Type="Double">${args.options.resourceQuotaWarningLevel}</Parameter></SetProperty>`);
                }
                if (args.options.storageQuota) {
                    payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="StorageMaximumLevel"><Parameter Type="Int64">${args.options.storageQuota}</Parameter></SetProperty>`);
                }
                if (args.options.storageQuotaWarningLevel) {
                    payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="StorageWarningLevel"><Parameter Type="Int64">${args.options.storageQuotaWarningLevel}</Parameter></SetProperty>`);
                }
                if (typeof args.options.allowSelfServiceUpgrade !== 'undefined') {
                    payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="AllowSelfServiceUpgrade"><Parameter Type="Boolean">${args.options.allowSelfServiceUpgrade}</Parameter></SetProperty>`);
                }
            }
            if (typeof args.options.classification === 'string') {
                payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="Classification"><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.classification)}</Parameter></SetProperty>`);
            }
            if (typeof args.options.disableFlows === 'string') {
                payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="DisableFlows"><Parameter Type="Boolean">${args.options.disableFlows === 'true'}</Parameter></SetProperty>`);
            }
            if (typeof args.options.shareByEmailEnabled === 'string') {
                payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="ShareByEmailEnabled"><Parameter Type="Boolean">${args.options.shareByEmailEnabled === 'true'}</Parameter></SetProperty>`);
            }
            if (args.options.sharingCapability) {
                const sharingCapability = SharingCapabilities_1.SharingCapabilities[args.options.sharingCapability];
                payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="SharingCapability"><Parameter Type="Enum">${sharingCapability}</Parameter></SetProperty>`);
            }
            if (typeof args.options.noScriptSite !== 'undefined') {
                const noScriptSite = args.options.noScriptSite === 'true' ? 2 : 1;
                payload.push(`<SetProperty Id="${propertyId++}" ObjectPathId="5" Name="DenyAddAndCustomizePages"><Parameter Type="Enum">${noScriptSite}</Parameter></SetProperty>`);
            }
            const pos = this.tenantId.indexOf('|') + 1;
            const requestOptions = {
                url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions>${payload.join('')}<ObjectPath Id="14" ObjectPathId="13" /><ObjectIdentityQuery Id="15" ObjectPathId="5" /><Query Id="16" ObjectPathId="13"><Query SelectAllProperties="false"><Properties><Property Name="IsComplete" ScalarProperty="true" /><Property Name="PollingInterval" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Identity Id="5" Name="53d8499e-d0d2-5000-cb83-9ade5be42ca4|${this.tenantId.substr(pos, this.tenantId.indexOf('&') - pos)}&#xA;SiteProperties&#xA;${encodeURIComponent(args.options.url)}" /><Method Id="13" ParentId="5" Name="Update" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        });
    }
    applySiteDesign(logger, args) {
        if (typeof args.options.siteDesignId === 'undefined') {
            return Promise.resolve();
        }
        const options = {
            webUrl: args.options.url,
            id: args.options.siteDesignId,
            asTask: false,
            debug: this.debug,
            verbose: this.verbose
        };
        return Cli_1.Cli.executeCommand(spoSiteDesignApplyCommand, { options: Object.assign(Object.assign({}, options), { _: [] }) });
    }
    loadSiteIds(siteUrl, logger) {
        if (this.debug) {
            logger.logToStderr('Loading site IDs...');
        }
        const requestOptions = {
            url: `${siteUrl}/_api/site?$select=GroupId,Id`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((siteInfo) => {
            this.groupId = siteInfo.GroupId;
            this.siteId = siteInfo.Id;
            if (this.debug) {
                logger.logToStderr(`Retrieved site IDs. siteId: ${this.siteId}, groupId: ${this.groupId}`);
            }
            return Promise.resolve();
        });
    }
    isGroupConnectedSite() {
        return this.groupId !== '00000000-0000-0000-0000-000000000000';
    }
    /**
     * Maps the base sharingCapability enum to string array so it can
     * more easily be used in validation or descriptions.
     */
    get sharingCapabilities() {
        const result = [];
        for (const sharingCapability in SharingCapabilities_1.SharingCapabilities) {
            if (typeof SharingCapabilities_1.SharingCapabilities[sharingCapability] === 'number') {
                result.push(sharingCapability);
            }
        }
        return result;
    }
}
_SpoSiteSetCommand_instances = new WeakSet(), _SpoSiteSetCommand_initTelemetry = function _SpoSiteSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            classification: typeof args.options.classification === 'string',
            disableFlows: args.options.disableFlows,
            isPublic: args.options.isPublic,
            owners: typeof args.options.owners !== 'undefined',
            shareByEmailEnabled: args.options.shareByEmailEnabled,
            title: typeof args.options.title === 'string',
            description: typeof args.options.description === 'string',
            siteDesignId: typeof args.options.siteDesignId !== undefined,
            sharingCapabilities: args.options.sharingCapability,
            siteLogoUrl: typeof args.options.siteLogoUrl !== 'undefined',
            resourceQuota: args.options.resourceQuota,
            resourceQuotaWarningLevel: args.options.resourceQuotaWarningLevel,
            storageQuota: args.options.storageQuota,
            storageQuotaWarningLevel: args.options.storageQuotaWarningLevel,
            allowSelfServiceUpgrade: args.options.allowSelfServiceUpgrade,
            lockState: args.options.lockState,
            noScriptSite: args.options.noScriptSite,
            wait: args.options.wait === true
        });
    });
}, _SpoSiteSetCommand_initOptions = function _SpoSiteSetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '--classification [classification]'
    }, {
        option: '--disableFlows [disableFlows]'
    }, {
        option: '--isPublic [isPublic]'
    }, {
        option: '--owners [owners]'
    }, {
        option: '--shareByEmailEnabled [shareByEmailEnabled]'
    }, {
        option: '--siteDesignId [siteDesignId]'
    }, {
        option: '--title [title]'
    }, {
        option: '--description [description]'
    }, {
        option: '--siteLogoUrl [siteLogoUrl]'
    }, {
        option: '--sharingCapability [sharingCapability]',
        autocomplete: this.sharingCapabilities
    }, {
        option: '--resourceQuota [resourceQuota]'
    }, {
        option: '--resourceQuotaWarningLevel [resourceQuotaWarningLevel]'
    }, {
        option: '--storageQuota [storageQuota]'
    }, {
        option: '--storageQuotaWarningLevel [storageQuotaWarningLevel]'
    }, {
        option: '--allowSelfServiceUpgrade [allowSelfServiceUpgrade]'
    }, {
        option: '--lockState [lockState]',
        autocomplete: ['Unlock', 'NoAdditions', 'ReadOnly', 'NoAccess']
    }, {
        option: '--noScriptSite [noScriptSite]'
    }, {
        option: '--wait'
    });
}, _SpoSiteSetCommand_initValidators = function _SpoSiteSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.url);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (typeof args.options.classification === 'undefined' &&
            typeof args.options.disableFlows === 'undefined' &&
            typeof args.options.title === 'undefined' &&
            typeof args.options.description === 'undefined' &&
            typeof args.options.isPublic === 'undefined' &&
            typeof args.options.owners === 'undefined' &&
            typeof args.options.shareByEmailEnabled === 'undefined' &&
            typeof args.options.siteDesignId === 'undefined' &&
            typeof args.options.sharingCapability === 'undefined' &&
            typeof args.options.siteLogoUrl === 'undefined' &&
            typeof args.options.resourceQuota === 'undefined' &&
            typeof args.options.resourceQuotaWarningLevel === 'undefined' &&
            typeof args.options.storageQuota === 'undefined' &&
            typeof args.options.storageQuotaWarningLevel === 'undefined' &&
            typeof args.options.noScriptSite === 'undefined' &&
            typeof args.options.allowSelfServiceUpgrade === 'undefined' &&
            typeof args.options.lockState === 'undefined') {
            return 'Specify at least one property to update';
        }
        if (typeof args.options.siteLogoUrl !== 'undefined' && typeof args.options.siteLogoUrl !== 'string') {
            return `${args.options.siteLogoUrl} is not a valid value for the siteLogoUrl option. Specify the logo URL or an empty string "" to unset the logo.`;
        }
        if (typeof args.options.disableFlows === 'string' &&
            !validation_1.validation.isValidBoolean(args.options.disableFlows)) {
            return `${args.options.disableFlows} is not a valid value for the disableFlow option. Allowed values are true|false`;
        }
        if (typeof args.options.isPublic === 'string' &&
            !validation_1.validation.isValidBoolean(args.options.isPublic)) {
            return `${args.options.isPublic} is not a valid value for the isPublic option. Allowed values are true|false`;
        }
        if (typeof args.options.shareByEmailEnabled === 'string' &&
            !validation_1.validation.isValidBoolean(args.options.shareByEmailEnabled)) {
            return `${args.options.shareByEmailEnabled} is not a valid value for the shareByEmailEnabled option. Allowed values are true|false`;
        }
        if (args.options.siteDesignId) {
            if (!validation_1.validation.isValidGuid(args.options.siteDesignId)) {
                return `${args.options.siteDesignId} is not a valid GUID`;
            }
        }
        if (args.options.sharingCapability &&
            this.sharingCapabilities.indexOf(args.options.sharingCapability) < 0) {
            return `${args.options.sharingCapability} is not a valid value for the sharingCapability option. Allowed values are ${this.sharingCapabilities.join('|')}`;
        }
        if (args.options.resourceQuota &&
            typeof args.options.resourceQuota !== 'number') {
            return `${args.options.resourceQuota} is not a number`;
        }
        if (args.options.resourceQuotaWarningLevel &&
            typeof args.options.resourceQuotaWarningLevel !== 'number') {
            return `${args.options.resourceQuotaWarningLevel} is not a number`;
        }
        if (args.options.resourceQuota &&
            args.options.resourceQuotaWarningLevel &&
            args.options.resourceQuotaWarningLevel > args.options.resourceQuota) {
            return `resourceQuotaWarningLevel must not exceed the resourceQuota`;
        }
        if (args.options.storageQuota &&
            typeof args.options.storageQuota !== 'number') {
            return `${args.options.storageQuota} is not a number`;
        }
        if (args.options.storageQuotaWarningLevel &&
            typeof args.options.storageQuotaWarningLevel !== 'number') {
            return `${args.options.storageQuotaWarningLevel} is not a number`;
        }
        if (args.options.storageQuota &&
            args.options.storageQuotaWarningLevel &&
            args.options.storageQuotaWarningLevel > args.options.storageQuota) {
            return `storageQuotaWarningLevel must not exceed the storageQuota`;
        }
        if (args.options.allowSelfServiceUpgrade &&
            !validation_1.validation.isValidBoolean(args.options.allowSelfServiceUpgrade)) {
            return `${args.options.allowSelfServiceUpgrade} is not a valid boolean value`;
        }
        if (args.options.lockState &&
            ['Unlock', 'NoAdditions', 'ReadOnly', 'NoAccess'].indexOf(args.options.lockState) === -1) {
            return `${args.options.lockState} is not a valid value for the lockState option. Allowed values Unlock|NoAdditions|ReadOnly|NoAccess`;
        }
        if (args.options.noScriptSite &&
            !validation_1.validation.isValidBoolean(args.options.noScriptSite)) {
            return `${args.options.noScriptSite} is not a valid boolean value`;
        }
        return true;
    }));
}, _SpoSiteSetCommand_initTypes = function _SpoSiteSetCommand_initTypes() {
    this.types.string.push('classification');
};
module.exports = new SpoSiteSetCommand();
//# sourceMappingURL=site-set.js.map