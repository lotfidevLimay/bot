"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteAppPermissionListCommand_instances, _SpoSiteAppPermissionListCommand_initTelemetry, _SpoSiteAppPermissionListCommand_initOptions, _SpoSiteAppPermissionListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class SpoSiteAppPermissionListCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _SpoSiteAppPermissionListCommand_instances.add(this);
        this.siteId = '';
        __classPrivateFieldGet(this, _SpoSiteAppPermissionListCommand_instances, "m", _SpoSiteAppPermissionListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionListCommand_instances, "m", _SpoSiteAppPermissionListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionListCommand_instances, "m", _SpoSiteAppPermissionListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_APPPERMISSION_LIST;
    }
    get description() {
        return 'Lists application permissions for a site';
    }
    getSpoSiteId(args) {
        const url = new URL(args.options.siteUrl);
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${url.hostname}:${url.pathname}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((site) => site.id);
    }
    getFilteredPermissions(args, permissions) {
        let filterProperty = 'displayName';
        let filterValue = args.options.appDisplayName;
        if (args.options.appId) {
            filterProperty = 'id';
            filterValue = args.options.appId;
        }
        return permissions.filter((p) => {
            return p.grantedToIdentities.some(({ application }) => application[filterProperty] === filterValue);
        });
    }
    getApplicationPermission(permissionId) {
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${this.siteId}/permissions/${permissionId}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    getTransposed(permissions) {
        const transposed = [];
        permissions.forEach((permissionObject) => {
            permissionObject.grantedToIdentities.forEach((permissionEntity) => {
                transposed.push({
                    appDisplayName: permissionEntity.application.displayName,
                    appId: permissionEntity.application.id,
                    permissionId: permissionObject.id,
                    roles: permissionObject.roles
                });
            });
        });
        return transposed;
    }
    getPermissions() {
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${this.siteId}/permissions`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.siteId = yield this.getSpoSiteId(args);
                const permRes = yield this.getPermissions();
                let permissions = permRes.value;
                if (args.options.appId || args.options.appDisplayName) {
                    permissions = this.getFilteredPermissions(args, permRes.value);
                }
                const res = yield Promise.all(permissions.map(g => this.getApplicationPermission(g.id)));
                logger.log(this.getTransposed(res));
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoSiteAppPermissionListCommand_instances = new WeakSet(), _SpoSiteAppPermissionListCommand_initTelemetry = function _SpoSiteAppPermissionListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appDisplayName: typeof args.options.appDisplayName !== 'undefined',
            appId: typeof args.options.appId !== 'undefined'
        });
    });
}, _SpoSiteAppPermissionListCommand_initOptions = function _SpoSiteAppPermissionListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --siteUrl <siteUrl>'
    }, {
        option: '-i, --appId [appId]'
    }, {
        option: '-n, --appDisplayName [appDisplayName]'
    });
}, _SpoSiteAppPermissionListCommand_initValidators = function _SpoSiteAppPermissionListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && args.options.appDisplayName) {
            return `Provide either appId or appDisplayName, not both`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.siteUrl);
    }));
};
module.exports = new SpoSiteAppPermissionListCommand();
//# sourceMappingURL=site-apppermission-list.js.map