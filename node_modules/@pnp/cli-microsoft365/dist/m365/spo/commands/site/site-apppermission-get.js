"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteAppPermissionGetCommand_instances, _SpoSiteAppPermissionGetCommand_initOptions, _SpoSiteAppPermissionGetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class SpoSiteAppPermissionGetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _SpoSiteAppPermissionGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionGetCommand_instances, "m", _SpoSiteAppPermissionGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionGetCommand_instances, "m", _SpoSiteAppPermissionGetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_APPPERMISSION_GET;
    }
    get description() {
        return 'Get a specific application permissions for the site';
    }
    getSpoSiteId(args) {
        const url = new URL(args.options.siteUrl);
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${url.hostname}:${url.pathname}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((site) => site.id);
    }
    getApplicationPermission(args, siteId) {
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${siteId}/permissions/${args.options.permissionId}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const siteId = yield this.getSpoSiteId(args);
                const permissionObject = yield this.getApplicationPermission(args, siteId);
                const transposed = [];
                permissionObject.grantedToIdentities.forEach((permissionEntity) => {
                    transposed.push({
                        appDisplayName: permissionEntity.application.displayName,
                        appId: permissionEntity.application.id,
                        permissionId: permissionObject.id,
                        roles: permissionObject.roles.join()
                    });
                });
                logger.log(transposed);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoSiteAppPermissionGetCommand_instances = new WeakSet(), _SpoSiteAppPermissionGetCommand_initOptions = function _SpoSiteAppPermissionGetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --siteUrl <siteUrl>'
    }, {
        option: '-i, --permissionId <permissionId>'
    });
}, _SpoSiteAppPermissionGetCommand_initValidators = function _SpoSiteAppPermissionGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.siteUrl); }));
};
module.exports = new SpoSiteAppPermissionGetCommand();
//# sourceMappingURL=site-apppermission-get.js.map