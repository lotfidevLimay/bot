"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteAppPermissionSetCommand_instances, _SpoSiteAppPermissionSetCommand_initTelemetry, _SpoSiteAppPermissionSetCommand_initOptions, _SpoSiteAppPermissionSetCommand_initValidators, _SpoSiteAppPermissionSetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class SpoSiteAppPermissionSetCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _SpoSiteAppPermissionSetCommand_instances.add(this);
        this.siteId = '';
        this.roles = ['read', 'write', 'manage', 'fullcontrol'];
        __classPrivateFieldGet(this, _SpoSiteAppPermissionSetCommand_instances, "m", _SpoSiteAppPermissionSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionSetCommand_instances, "m", _SpoSiteAppPermissionSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionSetCommand_instances, "m", _SpoSiteAppPermissionSetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionSetCommand_instances, "m", _SpoSiteAppPermissionSetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.SITE_APPPERMISSION_SET;
    }
    get description() {
        return 'Updates a specific application permission for a site';
    }
    getSpoSiteId(args) {
        const url = new URL(args.options.siteUrl);
        const siteRequestOptions = {
            url: `${this.resource}/v1.0/sites/${url.hostname}:${url.pathname}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(siteRequestOptions)
            .then((site) => site.id);
    }
    getFilteredPermissions(args, permissions) {
        let filterProperty = 'displayName';
        let filterValue = args.options.appDisplayName;
        if (args.options.appId) {
            filterProperty = 'id';
            filterValue = args.options.appId;
        }
        return permissions.filter((p) => p.grantedToIdentities.some(({ application }) => application[filterProperty] === filterValue));
    }
    getPermission(args) {
        if (args.options.permissionId) {
            return Promise.resolve(args.options.permissionId);
        }
        const permissionRequestOptions = {
            url: `${this.resource}/v1.0/sites/${this.siteId}/permissions`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(permissionRequestOptions)
            .then(response => {
            const sitePermissionItems = this.getFilteredPermissions(args, response.value);
            if (sitePermissionItems.length === 0) {
                return Promise.reject('The specified app permission does not exist');
            }
            if (sitePermissionItems.length > 1) {
                return Promise.reject(`Multiple app permissions with displayName ${args.options.appDisplayName} found: ${response.value.map(x => x.grantedToIdentities.map(y => y.application.id))}`);
            }
            return Promise.resolve(sitePermissionItems[0].id);
        });
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.siteId = yield this.getSpoSiteId(args);
                const sitePermissionId = yield this.getPermission(args);
                const requestOptions = {
                    url: `${this.resource}/v1.0/sites/${this.siteId}/permissions/${sitePermissionId}`,
                    headers: {
                        accept: 'application/json;odata.metadata=none',
                        'content-type': 'application/json;odata=nometadata'
                    },
                    data: {
                        roles: [args.options.permission]
                    },
                    responseType: 'json'
                };
                const res = yield request_1.default.patch(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoSiteAppPermissionSetCommand_instances = new WeakSet(), _SpoSiteAppPermissionSetCommand_initTelemetry = function _SpoSiteAppPermissionSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            permissionId: typeof args.options.permissionId !== 'undefined',
            appId: typeof args.options.appId !== 'undefined',
            appDisplayName: typeof args.options.appDisplayName !== 'undefined',
            permissions: args.options.permissions
        });
    });
}, _SpoSiteAppPermissionSetCommand_initOptions = function _SpoSiteAppPermissionSetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --siteUrl <siteUrl>'
    }, {
        option: '-i, --permissionId [permissionId]'
    }, {
        option: '--appId [appId]'
    }, {
        option: '-n, --appDisplayName [appDisplayName]'
    }, {
        option: '-p, --permission <permission>',
        autocomplete: this.roles
    });
}, _SpoSiteAppPermissionSetCommand_initValidators = function _SpoSiteAppPermissionSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        if (this.roles.indexOf(args.options.permission) === -1) {
            return `${args.options.permission} is not a valid permission value. Allowed values are ${this.roles.join('|')}`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.siteUrl);
    }));
}, _SpoSiteAppPermissionSetCommand_initOptionSets = function _SpoSiteAppPermissionSetCommand_initOptionSets() {
    this.optionSets.push(['permissionId', 'appId', 'appDisplayName']);
};
module.exports = new SpoSiteAppPermissionSetCommand();
//# sourceMappingURL=site-apppermission-set.js.map