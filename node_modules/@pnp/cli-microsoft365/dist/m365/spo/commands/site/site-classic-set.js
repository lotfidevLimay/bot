"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteClassicSetCommand_instances, _SpoSiteClassicSetCommand_initTelemetry, _SpoSiteClassicSetCommand_initOptions, _SpoSiteClassicSetCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteClassicSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteClassicSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteClassicSetCommand_instances, "m", _SpoSiteClassicSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteClassicSetCommand_instances, "m", _SpoSiteClassicSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteClassicSetCommand_instances, "m", _SpoSiteClassicSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_CLASSIC_SET;
    }
    get description() {
        return 'Change classic site settings';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.showDeprecationWarning(logger, commands_1.default.SITE_CLASSIC_SET, commands_1.default.SITE_SET);
            this.dots = '';
            try {
                this.tenantId = yield spo_1.spo.getTenantId(logger, this.debug);
                this.spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                this.context = yield spo_1.spo.ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug);
                if (this.verbose) {
                    logger.logToStderr(`Setting basic properties ${args.options.url}...`);
                }
                const basicProperties = [
                    'title',
                    'sharing',
                    'resourceQuota',
                    'resourceQuotaWarningLevel',
                    'storageQuota',
                    'storageQuotaWarningLevel',
                    'allowSelfServiceUpgrade',
                    'noScriptSite'
                ];
                let updateBasicProperties = false;
                for (let i = 0; i < basicProperties.length; i++) {
                    if (typeof args.options[basicProperties[i]] !== 'undefined') {
                        updateBasicProperties = true;
                        break;
                    }
                }
                let res;
                if (updateBasicProperties) {
                    let i = 0;
                    const updates = [];
                    if (args.options.title) {
                        updates.push(`<SetProperty Id="${++i}" ObjectPathId="5" Name="Title"><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.title)}</Parameter></SetProperty>`);
                    }
                    if (args.options.sharing) {
                        const sharing = ['Disabled', 'ExternalUserSharingOnly', 'ExternalUserAndGuestSharing', 'ExistingExternalUserSharingOnly'].indexOf(args.options.sharing);
                        updates.push(`<SetProperty Id="${++i}" ObjectPathId="5" Name="SharingCapability"><Parameter Type="Enum">${sharing}</Parameter></SetProperty>`);
                    }
                    if (args.options.resourceQuota) {
                        updates.push(`<SetProperty Id="${++i}" ObjectPathId="5" Name="UserCodeMaximumLevel"><Parameter Type="Double">${args.options.resourceQuota}</Parameter></SetProperty>`);
                    }
                    if (args.options.resourceQuotaWarningLevel) {
                        updates.push(`<SetProperty Id="${++i}" ObjectPathId="5" Name="UserCodeWarningLevel"><Parameter Type="Double">${args.options.resourceQuotaWarningLevel}</Parameter></SetProperty>`);
                    }
                    if (args.options.storageQuota) {
                        updates.push(`<SetProperty Id="${++i}" ObjectPathId="5" Name="StorageMaximumLevel"><Parameter Type="Int64">${args.options.storageQuota}</Parameter></SetProperty>`);
                    }
                    if (args.options.storageQuotaWarningLevel) {
                        updates.push(`<SetProperty Id="${++i}" ObjectPathId="5" Name="StorageWarningLevel"><Parameter Type="Int64">${args.options.storageQuotaWarningLevel}</Parameter></SetProperty>`);
                    }
                    if (typeof args.options.allowSelfServiceUpgrade !== 'undefined') {
                        updates.push(`<SetProperty Id="${++i}" ObjectPathId="5" Name="AllowSelfServiceUpgrade"><Parameter Type="Boolean">${args.options.allowSelfServiceUpgrade}</Parameter></SetProperty>`);
                    }
                    if (typeof args.options.noScriptSite !== 'undefined') {
                        const noScriptSite = args.options.noScriptSite === 'true' ? 2 : 1;
                        updates.push(`<SetProperty Id="${++i}" ObjectPathId="5" Name="DenyAddAndCustomizePages"><Parameter Type="Enum">${noScriptSite}</Parameter></SetProperty>`);
                    }
                    const pos = this.tenantId.indexOf('|') + 1;
                    const requestOptions = {
                        url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                        headers: {
                            'X-RequestDigest': this.context.FormDigestValue
                        },
                        data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions>${updates.join('')}<ObjectPath Id="14" ObjectPathId="13" /><ObjectIdentityQuery Id="15" ObjectPathId="5" /><Query Id="16" ObjectPathId="13"><Query SelectAllProperties="false"><Properties><Property Name="IsComplete" ScalarProperty="true" /><Property Name="PollingInterval" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Identity Id="5" Name="53d8499e-d0d2-5000-cb83-9ade5be42ca4|${this.tenantId.substr(pos, this.tenantId.indexOf('&') - pos)}&#xA;SiteProperties&#xA;${encodeURIComponent(args.options.url)}" /><Method Id="13" ParentId="5" Name="Update" /></ObjectPaths></Request>`
                    };
                    res = yield request_1.default.post(requestOptions);
                }
                yield new Promise((resolve, reject) => {
                    if (!res) {
                        resolve();
                        return;
                    }
                    const json = JSON.parse(res);
                    const response = json[0];
                    if (response.ErrorInfo) {
                        reject(response.ErrorInfo.ErrorMessage);
                    }
                    else {
                        const operation = json[json.length - 1];
                        const isComplete = operation.IsComplete;
                        if (!args.options.wait || isComplete) {
                            resolve();
                            return;
                        }
                        setTimeout(() => {
                            spo_1.spo.waitUntilFinished({
                                operationId: JSON.stringify(operation._ObjectIdentity_),
                                siteUrl: this.spoAdminUrl,
                                resolve,
                                reject,
                                logger,
                                currentContext: this.context,
                                dots: this.dots,
                                debug: this.debug,
                                verbose: this.verbose
                            });
                        }, operation.PollingInterval);
                    }
                });
                this.context = yield spo_1.spo.ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug);
                yield new Promise((resolve, reject) => {
                    if (!args.options.owners) {
                        resolve();
                        return;
                    }
                    Promise.all(args.options.owners.split(',').map(o => {
                        return this.setAdmin(logger, args.options.url, o.trim());
                    }))
                        .then(() => {
                        resolve();
                    }, (err) => {
                        reject(err);
                    });
                });
                if (args.options.description) {
                    const requestOptions = {
                        url: `${args.options.url}/_api/web`,
                        headers: {
                            'IF-MATCH': '*',
                            'Accept': 'application/json;odata=nometadata',
                            'content-type': 'application/json;odata=nometadata',
                            'X-RequestDigest': this.context.FormDigestValue,
                            'X-HTTP-Method': 'MERGE'
                        },
                        data: {
                            Description: args.options.description
                        },
                        json: true
                    };
                    yield request_1.default.post(requestOptions);
                }
                let query;
                if (args.options.lockState) {
                    const requestOptions = {
                        url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                        headers: {
                            'X-RequestDigest': this.context.FormDigestValue
                        },
                        data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><SetProperty Id="7" ObjectPathId="5" Name="LockState"><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.lockState)}</Parameter></SetProperty><ObjectPath Id="9" ObjectPathId="8" /><ObjectIdentityQuery Id="10" ObjectPathId="5" /><Query Id="11" ObjectPathId="8"><Query SelectAllProperties="true"><Properties /></Query></Query></Actions><ObjectPaths><Method Id="5" ParentId="3" Name="GetSitePropertiesByUrl"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(args.options.url)}</Parameter><Parameter Type="Boolean">false</Parameter></Parameters></Method><Method Id="8" ParentId="5" Name="Update" /><Constructor Id="3" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                    };
                    query = yield request_1.default.post(requestOptions);
                }
                yield new Promise((resolve, reject) => {
                    if (!query) {
                        resolve();
                        return;
                    }
                    const json = JSON.parse(query);
                    const response = json[0];
                    if (response.ErrorInfo) {
                        reject(response.ErrorInfo.ErrorMessage);
                    }
                    else {
                        const operation = json[json.length - 1];
                        const isComplete = operation.IsComplete;
                        if (!args.options.wait || isComplete) {
                            resolve();
                            return;
                        }
                        setTimeout(() => {
                            spo_1.spo.waitUntilFinished({
                                operationId: JSON.stringify(operation._ObjectIdentity_),
                                siteUrl: this.spoAdminUrl,
                                resolve,
                                reject,
                                logger,
                                currentContext: this.context,
                                dots: this.dots,
                                debug: this.debug,
                                verbose: this.verbose
                            });
                        }, operation.PollingInterval);
                    }
                });
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
    setAdmin(logger, siteUrl, principal) {
        return new Promise((resolve, reject) => {
            spo_1.spo
                .ensureFormDigest(this.spoAdminUrl, logger, this.context, this.debug)
                .then((res) => {
                this.context = res;
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.context.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="48" ObjectPathId="47" /></Actions><ObjectPaths><Method Id="47" ParentId="34" Name="SetSiteAdmin"><Parameters><Parameter Type="String">${formatting_1.formatting.escapeXml(siteUrl)}</Parameter><Parameter Type="String">${formatting_1.formatting.escapeXml(principal)}</Parameter><Parameter Type="Boolean">true</Parameter></Parameters></Method><Constructor Id="34" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                }
                else {
                    resolve();
                }
            }, (err) => {
                reject(err);
            });
        });
    }
}
_SpoSiteClassicSetCommand_instances = new WeakSet(), _SpoSiteClassicSetCommand_initTelemetry = function _SpoSiteClassicSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            title: typeof args.options.title !== 'undefined',
            description: typeof args.options.description !== 'undefined',
            sharing: args.options.sharing,
            resourceQuota: typeof args.options.resourceQuota !== 'undefined',
            resourceQuotaWarningLevel: typeof args.options.resourceQuotaWarningLevel !== 'undefined',
            storageQuota: typeof args.options.storageQuota !== 'undefined',
            storageQuotaWarningLevel: typeof args.options.storageQuotaWarningLevel !== 'undefined',
            allowSelfServiceUpgrade: args.options.allowSelfServiceUpgrade,
            owners: typeof args.options.owners !== 'undefined',
            lockState: args.options.lockState,
            noScriptSite: args.options.noScriptSite,
            wait: args.options.wait
        });
    });
}, _SpoSiteClassicSetCommand_initOptions = function _SpoSiteClassicSetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --url <url>'
    }, {
        option: '-t, --title [title]'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '--sharing [sharing]',
        autocomplete: ['Disabled', 'ExternalUserSharingOnly', 'ExternalUserAndGuestSharing', 'ExistingExternalUserSharingOnly']
    }, {
        option: '--resourceQuota [resourceQuota]'
    }, {
        option: '--resourceQuotaWarningLevel [resourceQuotaWarningLevel]'
    }, {
        option: '--storageQuota [storageQuota]'
    }, {
        option: '--storageQuotaWarningLevel [storageQuotaWarningLevel]'
    }, {
        option: '--allowSelfServiceUpgrade [allowSelfServiceUpgrade]'
    }, {
        option: '--owners [owners]'
    }, {
        option: '--lockState [lockState]',
        autocomplete: ['Unlock', 'NoAdditions', 'ReadOnly', 'NoAccess']
    }, {
        option: '--noScriptSite [noScriptSite]'
    }, {
        option: '--wait'
    });
}, _SpoSiteClassicSetCommand_initValidators = function _SpoSiteClassicSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.url);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.sharing &&
            ['Disabled', 'ExternalUserSharingOnly', 'ExternalUserAndGuestSharing', 'ExistingExternalUserSharingOnly'].indexOf(args.options.sharing) === -1) {
            return `${args.options.sharing} is not a valid value for the sharing option. Allowed values Disabled|ExternalUserSharingOnly|ExternalUserAndGuestSharing|ExistingExternalUserSharingOnly`;
        }
        if (args.options.resourceQuota &&
            typeof args.options.resourceQuota !== 'number') {
            return `${args.options.resourceQuota} is not a number`;
        }
        if (args.options.resourceQuotaWarningLevel &&
            typeof args.options.resourceQuotaWarningLevel !== 'number') {
            return `${args.options.resourceQuotaWarningLevel} is not a number`;
        }
        if (args.options.resourceQuota &&
            args.options.resourceQuotaWarningLevel &&
            args.options.resourceQuotaWarningLevel > args.options.resourceQuota) {
            return `resourceQuotaWarningLevel must not exceed the resourceQuota`;
        }
        if (args.options.storageQuota &&
            typeof args.options.storageQuota !== 'number') {
            return `${args.options.storageQuota} is not a number`;
        }
        if (args.options.storageQuotaWarningLevel &&
            typeof args.options.storageQuotaWarningLevel !== 'number') {
            return `${args.options.storageQuotaWarningLevel} is not a number`;
        }
        if (args.options.storageQuota &&
            args.options.storageQuotaWarningLevel &&
            args.options.storageQuotaWarningLevel > args.options.storageQuota) {
            return `storageQuotaWarningLevel must not exceed the storageQuota`;
        }
        if (args.options.allowSelfServiceUpgrade &&
            args.options.allowSelfServiceUpgrade !== 'true' &&
            args.options.allowSelfServiceUpgrade !== 'false') {
            return `${args.options.allowSelfServiceUpgrade} is not a valid boolean value`;
        }
        if (args.options.lockState &&
            ['Unlock', 'NoAdditions', 'ReadOnly', 'NoAccess'].indexOf(args.options.lockState) === -1) {
            return `${args.options.lockState} is not a valid value for the lockState option. Allowed values Unlock|NoAdditions|ReadOnly|NoAccess`;
        }
        if (args.options.noScriptSite &&
            args.options.noScriptSite !== 'true' &&
            args.options.noScriptSite !== 'false') {
            return `${args.options.noScriptSite} is not a valid boolean value`;
        }
        return true;
    }));
};
module.exports = new SpoSiteClassicSetCommand();
//# sourceMappingURL=site-classic-set.js.map