"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteRenameCommand_instances, _SpoSiteRenameCommand_initTelemetry, _SpoSiteRenameCommand_initOptions, _SpoSiteRenameCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteRenameCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteRenameCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteRenameCommand_instances, "m", _SpoSiteRenameCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteRenameCommand_instances, "m", _SpoSiteRenameCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteRenameCommand_instances, "m", _SpoSiteRenameCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_RENAME;
    }
    get description() {
        return 'Renames the URL and title of a site collection';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const options = args.options;
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                const reqDigest = yield spo_1.spo.getRequestDigest(spoAdminUrl);
                this.context = reqDigest;
                if (this.verbose) {
                    logger.logToStderr(`Scheduling rename job...`);
                }
                let optionsBitmask = 0;
                if (options.suppressMarketplaceAppCheck) {
                    optionsBitmask = optionsBitmask | 8;
                }
                if (options.suppressWorkflow2013Check) {
                    optionsBitmask = optionsBitmask | 16;
                }
                const requestOptions = {
                    "SourceSiteUrl": options.siteUrl,
                    "TargetSiteUrl": options.newSiteUrl,
                    "TargetSiteTitle": options.newSiteTitle || null,
                    "Option": optionsBitmask,
                    "Reserve": null,
                    "SkipGestures": null,
                    "OperationId": "00000000-0000-0000-0000-000000000000"
                };
                const postData = {
                    url: `${spoAdminUrl}/_api/SiteRenameJobs?api-version=1.4.7`,
                    headers: {
                        'X-RequestDigest': this.context.FormDigestValue,
                        'Content-Type': 'application/json'
                    },
                    responseType: 'json',
                    data: requestOptions
                };
                const res = yield request_1.default.post(postData);
                if (options.verbose) {
                    logger.logToStderr(res);
                }
                this.operationData = res;
                if (this.operationData.JobState && this.operationData.JobState === "Error") {
                    throw this.operationData.ErrorDescription;
                }
                const isComplete = this.operationData.JobState === "Success";
                if (options.wait && !isComplete) {
                    yield this.waitForRenameCompletion(this, true, spoAdminUrl, options.siteUrl, 0);
                }
                logger.log(this.operationData);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    waitForRenameCompletion(command, isVerbose, spoAdminUrl, siteUrl, iteration) {
        return __awaiter(this, void 0, void 0, function* () {
            iteration++;
            const requestOptions = {
                url: `${spoAdminUrl}/_api/SiteRenameJobs/GetJobsBySiteUrl(url='${encodeURIComponent(siteUrl)}')?api-version=1.4.7`,
                headers: {
                    'X-AttemptNumber': iteration.toString()
                },
                responseType: 'json'
            };
            const res = yield request_1.default.get(requestOptions);
            this.operationData = res.value[0];
            if (this.operationData.ErrorDescription) {
                throw this.operationData.ErrorDescription;
            }
            if (this.operationData.JobState === "Success") {
                return;
            }
            yield this.sleep(SpoSiteRenameCommand.checkIntervalInMs);
            yield command.waitForRenameCompletion(command, isVerbose, spoAdminUrl, siteUrl, iteration);
        });
    }
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}
_SpoSiteRenameCommand_instances = new WeakSet(), _SpoSiteRenameCommand_initTelemetry = function _SpoSiteRenameCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            newSiteTitle: args.options.newSiteTitle ? true : false,
            suppressMarketplaceAppCheck: args.options.suppressMarketplaceAppCheck,
            suppressWorkflow2013Check: args.options.suppressWorkflow2013Check,
            wait: args.options.wait
        });
    });
}, _SpoSiteRenameCommand_initOptions = function _SpoSiteRenameCommand_initOptions() {
    this.options.unshift({
        option: '-u, --siteUrl <siteUrl>'
    }, {
        option: '--newSiteUrl <newSiteUrl>'
    }, {
        option: '--newSiteTitle [newSiteTitle]'
    }, {
        option: '--suppressMarketplaceAppCheck'
    }, {
        option: '--suppressWorkflow2013Check'
    }, {
        option: '--wait'
    });
}, _SpoSiteRenameCommand_initValidators = function _SpoSiteRenameCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.siteUrl.toLowerCase() === args.options.newSiteUrl.toLowerCase()) {
            return 'The new URL cannot be the same as the target URL.';
        }
        return true;
    }));
};
SpoSiteRenameCommand.checkIntervalInMs = 5000;
module.exports = new SpoSiteRenameCommand();
//# sourceMappingURL=site-rename.js.map