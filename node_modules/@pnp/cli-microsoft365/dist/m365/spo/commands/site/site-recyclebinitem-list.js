"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteRecycleBinItemListCommand_instances, _SpoSiteRecycleBinItemListCommand_initTelemetry, _SpoSiteRecycleBinItemListCommand_initOptions, _SpoSiteRecycleBinItemListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteRecycleBinItemListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteRecycleBinItemListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteRecycleBinItemListCommand_instances, "m", _SpoSiteRecycleBinItemListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteRecycleBinItemListCommand_instances, "m", _SpoSiteRecycleBinItemListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteRecycleBinItemListCommand_instances, "m", _SpoSiteRecycleBinItemListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_RECYCLEBINITEM_LIST;
    }
    get description() {
        return 'Lists items from recycle bin';
    }
    defaultProperties() {
        return ['Id', 'Title', 'DirName'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving all items from recycle bin at ${args.options.siteUrl}...`);
            }
            const state = args.options.secondary ? '2' : '1';
            let requestUrl = `${args.options.siteUrl}/_api/site/RecycleBin?$filter=(ItemState eq ${state})`;
            if (typeof args.options.type !== 'undefined') {
                const type = SpoSiteRecycleBinItemListCommand.recycleBinItemType.find(item => item.value === args.options.type);
                if (typeof type !== 'undefined') {
                    requestUrl += ` and (ItemType eq ${type.id})`;
                }
            }
            const requestOptions = {
                url: requestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                const response = yield request_1.default.get(requestOptions);
                logger.log(response.value);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoSiteRecycleBinItemListCommand_instances = new WeakSet(), _SpoSiteRecycleBinItemListCommand_initTelemetry = function _SpoSiteRecycleBinItemListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            type: args.options.type,
            secondary: args.options.secondary
        });
    });
}, _SpoSiteRecycleBinItemListCommand_initOptions = function _SpoSiteRecycleBinItemListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --siteUrl <siteUrl>'
    }, {
        option: '-t, --type [type]',
        autocomplete: SpoSiteRecycleBinItemListCommand.recycleBinItemType.map(item => item.value)
    }, {
        option: '-s, --secondary'
    });
}, _SpoSiteRecycleBinItemListCommand_initValidators = function _SpoSiteRecycleBinItemListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.siteUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (typeof args.options.type !== 'undefined' &&
            !SpoSiteRecycleBinItemListCommand.recycleBinItemType.some(item => item.value === args.options.type)) {
            return `${args.options.type} is not a valid value. Allowed values are ${SpoSiteRecycleBinItemListCommand.recycleBinItemType.map(item => item.value).join(', ')}`;
        }
        return true;
    }));
};
SpoSiteRecycleBinItemListCommand.recycleBinItemType = [
    { id: 1, value: 'files' },
    { id: 3, value: 'listItems' },
    { id: 5, value: 'folders' }
];
module.exports = new SpoSiteRecycleBinItemListCommand();
//# sourceMappingURL=site-recyclebinitem-list.js.map