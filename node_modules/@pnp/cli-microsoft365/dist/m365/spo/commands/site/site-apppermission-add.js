"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteAppPermissionAddCommand_instances, _SpoSiteAppPermissionAddCommand_initTelemetry, _SpoSiteAppPermissionAddCommand_initOptions, _SpoSiteAppPermissionAddCommand_initValidators, _SpoSiteAppPermissionAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const GraphCommand_1 = require("../../../base/GraphCommand");
const commands_1 = require("../../commands");
class SpoSiteAppPermissionAddCommand extends GraphCommand_1.default {
    constructor() {
        super();
        _SpoSiteAppPermissionAddCommand_instances.add(this);
        this.siteId = '';
        this.roles = ['read', 'write', 'manage', 'fullcontrol'];
        __classPrivateFieldGet(this, _SpoSiteAppPermissionAddCommand_instances, "m", _SpoSiteAppPermissionAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionAddCommand_instances, "m", _SpoSiteAppPermissionAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionAddCommand_instances, "m", _SpoSiteAppPermissionAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoSiteAppPermissionAddCommand_instances, "m", _SpoSiteAppPermissionAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.SITE_APPPERMISSION_ADD;
    }
    get description() {
        return 'Adds an application permissions to the site';
    }
    getSpoSiteId(args) {
        const url = new URL(args.options.siteUrl);
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${url.hostname}:${url.pathname}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((site) => site.id);
    }
    getAppInfo(args) {
        if (args.options.appId && args.options.appDisplayName) {
            return Promise.resolve({
                appId: args.options.appId,
                displayName: args.options.appDisplayName
            });
        }
        let endpoint = "";
        if (args.options.appId) {
            endpoint = `${this.resource}/v1.0/myorganization/applications?$filter=appId eq '${encodeURIComponent(args.options.appId)}'`;
        }
        else {
            endpoint = `${this.resource}/v1.0/myorganization/applications?$filter=displayName eq '${encodeURIComponent(args.options.appDisplayName)}'`;
        }
        const appRequestOptions = {
            url: endpoint,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(appRequestOptions)
            .then(response => {
            const appItem = response.value[0];
            if (!appItem) {
                return Promise.reject("The specified Azure AD app does not exist");
            }
            if (response.value.length > 1) {
                return Promise.reject(`Multiple Azure AD app with displayName ${args.options.appDisplayName} found: ${response.value.map(x => x.appId)}`);
            }
            return Promise.resolve({
                appId: appItem.appId,
                displayName: appItem.displayName
            });
        });
    }
    /**
     * Checks if the requested permission needs elevation after the initial creation.
     */
    roleNeedsElevation(permission) {
        return ['manage', 'fullcontrol'].indexOf(permission) > -1;
    }
    /**
     * Grants the app 'read' or 'write' permissions to the site.
     *
     * Explanation:
     * 'manage' and 'fullcontrol' permissions cannot be granted directly when adding app permissions.
     * They can currently only be assigned when updating existing app permissions.
     * We therefore assign 'write' permissions first, and update it to the requested role afterwards.
     */
    addPermissions(args, appInfo) {
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${this.siteId}/permissions`,
            headers: {
                accept: 'application/json;odata.metadata=none',
                'content-type': 'application/json;odata=nometadata'
            },
            data: {
                roles: [this.roleNeedsElevation(args.options.permission) ? 'write' : args.options.permission],
                grantedToIdentities: [{ application: { "id": appInfo.appId, "displayName": appInfo.displayName } }]
            },
            responseType: 'json'
        };
        return request_1.default.post(requestOptions);
    }
    /**
     * Updates the granted permissions to 'manage' or 'fullcontrol'.
     */
    elevatePermissions(args, permission) {
        const requestOptions = {
            url: `${this.resource}/v1.0/sites/${this.siteId}/permissions/${permission.id}`,
            headers: {
                accept: 'application/json;odata.metadata=none',
                'content-type': 'application/json;odata=nometadata'
            },
            data: {
                roles: [args.options.permission]
            },
            responseType: 'json'
        };
        return request_1.default.patch(requestOptions);
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.siteId = yield this.getSpoSiteId(args);
                const appInfo = yield this.getAppInfo(args);
                let permission = yield this.addPermissions(args, appInfo);
                if (this.roleNeedsElevation(args.options.permission)) {
                    permission = yield this.elevatePermissions(args, permission);
                }
                logger.log(permission);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoSiteAppPermissionAddCommand_instances = new WeakSet(), _SpoSiteAppPermissionAddCommand_initTelemetry = function _SpoSiteAppPermissionAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            appId: typeof args.options.appId !== 'undefined',
            appDisplayName: typeof args.options.appDisplayName !== 'undefined',
            permissions: args.options.permissions
        });
    });
}, _SpoSiteAppPermissionAddCommand_initOptions = function _SpoSiteAppPermissionAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --siteUrl <siteUrl>'
    }, {
        option: '-p, --permission <permission>',
        autocomplete: this.roles
    }, {
        option: '-i, --appId [appId]'
    }, {
        option: '-n, --appDisplayName [appDisplayName]'
    });
}, _SpoSiteAppPermissionAddCommand_initValidators = function _SpoSiteAppPermissionAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        if (this.roles.indexOf(args.options.permission) === -1) {
            return `${args.options.permission} is not a valid permission value. Allowed values are ${this.roles.join('|')}`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.siteUrl);
    }));
}, _SpoSiteAppPermissionAddCommand_initOptionSets = function _SpoSiteAppPermissionAddCommand_initOptionSets() {
    this.optionSets.push(['appId', 'appDisplayName']);
};
module.exports = new SpoSiteAppPermissionAddCommand();
//# sourceMappingURL=site-apppermission-add.js.map