"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSiteListCommand_instances, _SpoSiteListCommand_initTelemetry, _SpoSiteListCommand_initOptions, _SpoSiteListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoSiteListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSiteListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSiteListCommand_instances, "m", _SpoSiteListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSiteListCommand_instances, "m", _SpoSiteListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSiteListCommand_instances, "m", _SpoSiteListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SITE_LIST;
    }
    get description() {
        return 'Lists sites of the given type';
    }
    defaultProperties() {
        return ['Title', 'Url'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const webTemplate = this.getWebTemplateId(args.options);
            const includeOneDriveSites = args.options.includeOneDriveSites || false;
            const personalSite = includeOneDriveSites === false ? '0' : '1';
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                if (this.verbose) {
                    logger.logToStderr(`Retrieving list of site collections...`);
                }
                this.allSites = [];
                yield this.getAllSites(spoAdminUrl, formatting_1.formatting.escapeXml(args.options.filter || ''), '0', personalSite, webTemplate, undefined, args.options.deleted, logger);
                logger.log(this.allSites);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getAllSites(spoAdminUrl, filter, startIndex, personalSite, webTemplate, formDigest, deleted, logger) {
        return new Promise((resolve, reject) => {
            spo_1.spo
                .ensureFormDigest(spoAdminUrl, logger, formDigest, this.debug)
                .then((res) => {
                let requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="2" ObjectPathId="1" /><ObjectPath Id="4" ObjectPathId="3" /><Query Id="5" ObjectPathId="3"><Query SelectAllProperties="true"><Properties /></Query><ChildItemQuery SelectAllProperties="true"><Properties /></ChildItemQuery></Query></Actions><ObjectPaths><Constructor Id="1" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /><Method Id="3" ParentId="1" Name="GetSitePropertiesFromSharePointByFilters"><Parameters><Parameter TypeId="{b92aeee2-c92c-4b67-abcc-024e471bc140}"><Property Name="Filter" Type="String">${filter}</Property><Property Name="IncludeDetail" Type="Boolean">false</Property><Property Name="IncludePersonalSite" Type="Enum">${personalSite}</Property><Property Name="StartIndex" Type="String">${startIndex}</Property><Property Name="Template" Type="String">${webTemplate}</Property></Parameter></Parameters></Method></ObjectPaths></Request>`;
                if (deleted) {
                    requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="4" ObjectPathId="3" /><ObjectPath Id="6" ObjectPathId="5" /><Query Id="7" ObjectPathId="5"><Query SelectAllProperties="true"><Properties><Property Name="NextStartIndexFromSharePoint" ScalarProperty="true" /></Properties></Query><ChildItemQuery SelectAllProperties="true"><Properties /></ChildItemQuery></Query></Actions><ObjectPaths><Constructor Id="3" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /><Method Id="5" ParentId="3" Name="GetDeletedSitePropertiesFromSharePoint"><Parameters><Parameter Type="String">${startIndex}</Parameter></Parameters></Method></ObjectPaths></Request>`;
                }
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': res.FormDigestValue
                    },
                    data: requestBody
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                    return;
                }
                else {
                    const sites = json[json.length - 1];
                    this.allSites.push(...sites._Child_Items_);
                    if (sites.NextStartIndexFromSharePoint) {
                        this
                            .getAllSites(spoAdminUrl, filter, sites.NextStartIndexFromSharePoint, personalSite, webTemplate, formDigest, deleted, logger)
                            .then(_ => resolve(), err => reject(err));
                    }
                    else {
                        resolve();
                    }
                }
            }, err => reject(err));
        });
    }
    /*
      The type property currently defaults to Teamsite.
      It makes more sense to default to All. Certainly after adding the 'includeOneDriveSites' option.
      Changing this will be a breaking change. We'll remove the default the next major version.
    */
    getWebTemplateId(options) {
        if (options.webTemplate) {
            return options.webTemplate;
        }
        if (options.includeOneDriveSites) {
            return '';
        }
        let siteType = options.type;
        if (!siteType) {
            siteType = 'TeamSite';
        }
        switch (siteType) {
            case "TeamSite":
                return 'GROUP#0';
            case "CommunicationSite":
                return 'SITEPAGEPUBLISHING#0';
            default:
                return '';
        }
    }
}
_SpoSiteListCommand_instances = new WeakSet(), _SpoSiteListCommand_initTelemetry = function _SpoSiteListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            webTemplate: args.options.webTemplate,
            siteType: args.options.type || 'TeamSite',
            filter: (!(!args.options.filter)).toString(),
            deleted: args.options.deleted,
            includeOneDriveSites: typeof args.options.includeOneDriveSites !== 'undefined'
        });
    });
}, _SpoSiteListCommand_initOptions = function _SpoSiteListCommand_initOptions() {
    this.options.unshift({
        option: '-t, --type [type]',
        // To not introduce a breaking change, 'All' has been added.
        // You should use all when using '--includeOneDriveSites'
        autocomplete: ['TeamSite', 'CommunicationSite', 'All']
    }, {
        option: '--webTemplate [webTemplate]'
    }, {
        option: '-f, --filter [filter]'
    }, {
        option: '--includeOneDriveSites'
    }, {
        option: '--deleted'
    });
}, _SpoSiteListCommand_initValidators = function _SpoSiteListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.type && args.options.webTemplate) {
            return 'Specify either type or webTemplate, but not both';
        }
        const typeValues = ['TeamSite', 'CommunicationSite', 'All'];
        if (args.options.type &&
            typeValues.indexOf(args.options.type) < 0) {
            return `${args.options.type} is not a valid value for the type option. Allowed values are ${typeValues.join('|')}`;
        }
        if (args.options.includeOneDriveSites
            && (!args.options.type || args.options.type !== 'All')) {
            return 'When using includeOneDriveSites, specify All as value for type';
        }
        return true;
    }));
};
module.exports = new SpoSiteListCommand();
//# sourceMappingURL=site-list.js.map