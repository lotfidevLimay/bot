"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListViewAddCommand_instances, _SpoListViewAddCommand_initTelemetry, _SpoListViewAddCommand_initOptions, _SpoListViewAddCommand_initValidators, _SpoListViewAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListViewAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListViewAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListViewAddCommand_instances, "m", _SpoListViewAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListViewAddCommand_instances, "m", _SpoListViewAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListViewAddCommand_instances, "m", _SpoListViewAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListViewAddCommand_instances, "m", _SpoListViewAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LIST_VIEW_ADD;
    }
    get description() {
        return 'Adds a new view to a SharePoint list.';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: this.getRestUrl(args.options),
                headers: {
                    'content-type': 'application/json;odata=verbose',
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json',
                data: {
                    parameters: {
                        Title: args.options.title,
                        ViewFields: {
                            results: args.options.fields.split(',')
                        },
                        Query: args.options.viewQuery,
                        PersonalView: !!args.options.personal,
                        SetAsDefaultView: !!args.options.default,
                        Paged: !!args.options.paged,
                        RowLimit: args.options.rowLimit ? +args.options.rowLimit : 30
                    }
                }
            };
            try {
                const result = yield request_1.default.post(requestOptions);
                logger.log(result);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getRestUrl(options) {
        let result = `${options.webUrl}/_api/web/`;
        if (options.listId) {
            result += `lists(guid'${formatting_1.formatting.encodeQueryParameter(options.listId)}')`;
        }
        else if (options.listTitle) {
            result += `lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(options.listTitle)}')`;
        }
        else if (options.listUrl) {
            result += `GetList('${formatting_1.formatting.encodeQueryParameter(urlUtil_1.urlUtil.getServerRelativePath(options.webUrl, options.listUrl))}')`;
        }
        result += '/views/add';
        return result;
    }
}
_SpoListViewAddCommand_instances = new WeakSet(), _SpoListViewAddCommand_initTelemetry = function _SpoListViewAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            title: typeof args.options.title !== 'undefined',
            viewQuery: typeof args.options.viewQuery !== 'undefined',
            personal: !!args.options.personal,
            default: !!args.options.default,
            orderedView: !!args.options.orderedView,
            paged: !!args.options.paged,
            rowLimit: typeof args.options.rowLimit !== 'undefined'
        });
    });
}, _SpoListViewAddCommand_initOptions = function _SpoListViewAddCommand_initOptions() {
    this.options.unshift({ option: '-u, --webUrl <webUrl>' }, { option: '--listId [listId]' }, { option: '--listTitle [listTitle]' }, { option: '--listUrl [listUrl]' }, { option: '--title <title>' }, { option: '--fields <fields>' }, { option: '--viewQuery [viewQuery]' }, { option: '--personal' }, { option: '--default' }, { option: '--paged' }, { option: '--rowLimit [rowLimit]' });
}, _SpoListViewAddCommand_initValidators = function _SpoListViewAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const webUrlValidation = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (webUrlValidation !== true) {
            return webUrlValidation;
        }
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} in option listId is not a valid GUID`;
        }
        if (args.options.rowLimit !== undefined) {
            if (isNaN(args.options.rowLimit)) {
                return `${args.options.rowLimit} is not a number`;
            }
            if (+args.options.rowLimit <= 0) {
                return 'rowLimit option must be greater than 0.';
            }
        }
        if (args.options.personal && args.options.default) {
            return 'Default view cannot be a personal view.';
        }
        return true;
    }));
}, _SpoListViewAddCommand_initOptionSets = function _SpoListViewAddCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listTitle', 'listUrl']);
};
module.exports = new SpoListViewAddCommand();
//# sourceMappingURL=list-view-add.js.map