"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListLabelSetCommand_instances, _SpoListLabelSetCommand_initTelemetry, _SpoListLabelSetCommand_initOptions, _SpoListLabelSetCommand_initValidators, _SpoListLabelSetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListLabelSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListLabelSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListLabelSetCommand_instances, "m", _SpoListLabelSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListLabelSetCommand_instances, "m", _SpoListLabelSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListLabelSetCommand_instances, "m", _SpoListLabelSetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListLabelSetCommand_instances, "m", _SpoListLabelSetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LIST_LABEL_SET;
    }
    get description() {
        return 'Sets classification label on the specified list';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let listRestUrl = '';
                let listServerRelativeUrl = '';
                if (args.options.listUrl) {
                    const listServerRelativeUrlFromPath = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                    listServerRelativeUrl = listServerRelativeUrlFromPath;
                }
                else {
                    if (args.options.listId) {
                        listRestUrl = `lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')/`;
                    }
                    else {
                        listRestUrl = `lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')/`;
                    }
                    const requestOptions = {
                        url: `${args.options.webUrl}/_api/web/${listRestUrl}?$expand=RootFolder&$select=RootFolder`,
                        headers: {
                            'accept': 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const listInstance = yield request_1.default.get(requestOptions);
                    listServerRelativeUrl = listInstance.RootFolder.ServerRelativeUrl;
                }
                const listAbsoluteUrl = urlUtil_1.urlUtil.getAbsoluteUrl(args.options.webUrl, listServerRelativeUrl);
                const requestUrl = `${args.options.webUrl}/_api/SP_CompliancePolicy_SPPolicyStoreProxy_SetListComplianceTag`;
                const requestOptions = {
                    url: requestUrl,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    data: {
                        listUrl: listAbsoluteUrl,
                        complianceTagValue: args.options.label,
                        blockDelete: args.options.blockDelete || false,
                        blockEdit: args.options.blockEdit || false,
                        syncToItems: args.options.syncToItems || false
                    },
                    responseType: 'json'
                };
                yield request_1.default.post(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoListLabelSetCommand_instances = new WeakSet(), _SpoListLabelSetCommand_initTelemetry = function _SpoListLabelSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: (!(!args.options.listId)).toString(),
            listTitle: (!(!args.options.listTitle)).toString(),
            listUrl: (!(!args.options.listUrl)).toString(),
            syncToItems: args.options.syncToItems || false,
            blockDelete: args.options.blockDelete || false,
            blockEdit: args.options.blockEdit || false
        });
    });
}, _SpoListLabelSetCommand_initOptions = function _SpoListLabelSetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--label <label>'
    }, {
        option: '-t, --listTitle [listTitle]'
    }, {
        option: '-l, --listId [listId]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '--syncToItems'
    }, {
        option: '--blockDelete'
    }, {
        option: '--blockEdit'
    });
}, _SpoListLabelSetCommand_initValidators = function _SpoListLabelSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} is not a valid GUID`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
}, _SpoListLabelSetCommand_initOptionSets = function _SpoListLabelSetCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listTitle', 'listUrl']);
};
module.exports = new SpoListLabelSetCommand();
//# sourceMappingURL=list-label-set.js.map