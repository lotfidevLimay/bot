"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListWebhookRemoveCommand_instances, _SpoListWebhookRemoveCommand_initTelemetry, _SpoListWebhookRemoveCommand_initOptions, _SpoListWebhookRemoveCommand_initValidators, _SpoListWebhookRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListWebhookRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListWebhookRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListWebhookRemoveCommand_instances, "m", _SpoListWebhookRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListWebhookRemoveCommand_instances, "m", _SpoListWebhookRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListWebhookRemoveCommand_instances, "m", _SpoListWebhookRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListWebhookRemoveCommand_instances, "m", _SpoListWebhookRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LIST_WEBHOOK_REMOVE;
    }
    get description() {
        return 'Removes the specified webhook from the list';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeWebhook = () => __awaiter(this, void 0, void 0, function* () {
                if (this.verbose) {
                    const list = (args.options.listId || args.options.listId || args.options.listUrl);
                    logger.logToStderr(`Webhook ${args.options.id} is about to be removed from list ${list} located at site ${args.options.webUrl}...`);
                }
                let requestUrl = `${args.options.webUrl}/_api/web`;
                if (args.options.listId) {
                    requestUrl += `/lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')/Subscriptions('${formatting_1.formatting.encodeQueryParameter(args.options.id)}')`;
                }
                else if (args.options.listTitle) {
                    requestUrl += `/lists/GetByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')/Subscriptions('${formatting_1.formatting.encodeQueryParameter(args.options.id)}')`;
                }
                else if (args.options.listUrl) {
                    const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                    requestUrl += `/GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')/Subscriptions('${formatting_1.formatting.encodeQueryParameter(args.options.id)}')`;
                }
                const requestOptions = {
                    url: requestUrl,
                    method: 'DELETE',
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                try {
                    yield request_1.default.delete(requestOptions);
                    // REST delete call doesn't return anything
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeWebhook();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove webhook ${args.options.id} from list ${args.options.listTitle || args.options.listId || args.options.listUrl} located at site ${args.options.webUrl}?`
                });
                if (result.continue) {
                    yield removeWebhook();
                }
            }
        });
    }
}
_SpoListWebhookRemoveCommand_instances = new WeakSet(), _SpoListWebhookRemoveCommand_initTelemetry = function _SpoListWebhookRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            id: typeof args.options.id !== 'undefined',
            confirm: !!args.options.confirm
        });
    });
}, _SpoListWebhookRemoveCommand_initOptions = function _SpoListWebhookRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --listId [listId]'
    }, {
        option: '-t, --listTitle [listTitle]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-i, --id <id>'
    }, {
        option: '--confirm'
    });
}, _SpoListWebhookRemoveCommand_initValidators = function _SpoListWebhookRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId) {
            if (!validation_1.validation.isValidGuid(args.options.listId)) {
                return `${args.options.listId} is not a valid GUID`;
            }
        }
        return true;
    }));
}, _SpoListWebhookRemoveCommand_initOptionSets = function _SpoListWebhookRemoveCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listTitle', 'listUrl']);
};
module.exports = new SpoListWebhookRemoveCommand();
//# sourceMappingURL=list-webhook-remove.js.map