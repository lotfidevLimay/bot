"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListViewFieldAddCommand_instances, _SpoListViewFieldAddCommand_initTelemetry, _SpoListViewFieldAddCommand_initOptions, _SpoListViewFieldAddCommand_initValidators, _SpoListViewFieldAddCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListViewFieldAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListViewFieldAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListViewFieldAddCommand_instances, "m", _SpoListViewFieldAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListViewFieldAddCommand_instances, "m", _SpoListViewFieldAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListViewFieldAddCommand_instances, "m", _SpoListViewFieldAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListViewFieldAddCommand_instances, "m", _SpoListViewFieldAddCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LIST_VIEW_FIELD_ADD;
    }
    get description() {
        return 'Adds the specified field to list view';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const listSelector = args.options.listId ? `(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')` : `/GetByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')`;
            let viewSelector = '';
            let currentField;
            if (this.verbose) {
                logger.logToStderr(`Getting field ${args.options.fieldId || args.options.fieldTitle}...`);
            }
            try {
                const field = yield this.getField(args.options, listSelector);
                if (this.verbose) {
                    logger.logToStderr(`Adding the field ${args.options.fieldId || args.options.fieldTitle} to the view ${args.options.viewId || args.options.viewTitle}...`);
                }
                currentField = field;
                viewSelector = args.options.viewId ? `('${formatting_1.formatting.encodeQueryParameter(args.options.viewId)}')` : `/GetByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.viewTitle)}')`;
                const postRequestUrl = `${args.options.webUrl}/_api/web/lists${listSelector}/views${viewSelector}/viewfields/addviewfield('${field.InternalName}')`;
                const postRequestOptions = {
                    url: postRequestUrl,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                yield request_1.default.post(postRequestOptions);
                if (typeof args.options.fieldPosition === 'undefined') {
                    if (this.debug) {
                        logger.logToStderr(`No field position.`);
                    }
                    return;
                }
                if (this.debug) {
                    logger.logToStderr(`moveField request...`);
                    logger.logToStderr(args.options.fieldPosition);
                }
                if (this.verbose) {
                    logger.logToStderr(`Moving the field ${args.options.fieldId || args.options.fieldTitle} to the position ${args.options.fieldPosition} from view ${args.options.viewId || args.options.viewTitle}...`);
                }
                const moveRequestUrl = `${args.options.webUrl}/_api/web/lists${listSelector}/views${viewSelector}/viewfields/moveviewfieldto`;
                const moveRequestOptions = {
                    url: moveRequestUrl,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    data: { 'field': currentField.InternalName, 'index': args.options.fieldPosition },
                    responseType: 'json'
                };
                yield request_1.default.post(moveRequestOptions);
                // REST post call doesn't return anything
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getField(options, listSelector) {
        const fieldSelector = options.fieldId ? `/getbyid('${encodeURIComponent(options.fieldId)}')` : `/getbyinternalnameortitle('${encodeURIComponent(options.fieldTitle)}')`;
        const getRequestUrl = `${options.webUrl}/_api/web/lists${listSelector}/fields${fieldSelector}`;
        const requestOptions = {
            url: getRequestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
}
_SpoListViewFieldAddCommand_instances = new WeakSet(), _SpoListViewFieldAddCommand_initTelemetry = function _SpoListViewFieldAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            viewId: typeof args.options.viewId !== 'undefined',
            viewTitle: typeof args.options.viewTitle !== 'undefined',
            fieldId: typeof args.options.fieldId !== 'undefined',
            fieldTitle: typeof args.options.fieldTitle !== 'undefined',
            fieldPosition: typeof args.options.fieldPosition !== 'undefined'
        });
    });
}, _SpoListViewFieldAddCommand_initOptions = function _SpoListViewFieldAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--listId [listId]'
    }, {
        option: '--listTitle [listTitle]'
    }, {
        option: '--viewId [viewId]'
    }, {
        option: '--viewTitle [viewTitle]'
    }, {
        option: '--fieldId [fieldId]'
    }, {
        option: '--fieldTitle [fieldTitle]'
    }, {
        option: '--fieldPosition [fieldPosition]'
    });
}, _SpoListViewFieldAddCommand_initValidators = function _SpoListViewFieldAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId) {
            if (!validation_1.validation.isValidGuid(args.options.listId)) {
                return `${args.options.listId} is not a valid GUID`;
            }
        }
        if (args.options.viewId) {
            if (!validation_1.validation.isValidGuid(args.options.viewId)) {
                return `${args.options.viewId} is not a valid GUID`;
            }
        }
        if (args.options.fieldId) {
            if (!validation_1.validation.isValidGuid(args.options.fieldId)) {
                return `${args.options.fieldId} is not a valid GUID`;
            }
        }
        if (args.options.fieldPosition) {
            const position = parseInt(args.options.fieldPosition);
            if (isNaN(position)) {
                return `${args.options.fieldPosition} is not a number`;
            }
        }
        return true;
    }));
}, _SpoListViewFieldAddCommand_initOptionSets = function _SpoListViewFieldAddCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listTitle'], ['viewId', 'viewTitle'], ['fieldId', 'fieldTitle']);
};
module.exports = new SpoListViewFieldAddCommand();
//# sourceMappingURL=list-view-field-add.js.map