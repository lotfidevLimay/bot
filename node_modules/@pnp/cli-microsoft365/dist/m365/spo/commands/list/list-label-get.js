"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListLabelGetCommand_instances, _SpoListLabelGetCommand_initTelemetry, _SpoListLabelGetCommand_initOptions, _SpoListLabelGetCommand_initValidators, _SpoListLabelGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListLabelGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListLabelGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListLabelGetCommand_instances, "m", _SpoListLabelGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListLabelGetCommand_instances, "m", _SpoListLabelGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListLabelGetCommand_instances, "m", _SpoListLabelGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListLabelGetCommand_instances, "m", _SpoListLabelGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LIST_LABEL_GET;
    }
    get description() {
        return 'Gets label set on the specified list';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.verbose) {
                    const list = (args.options.listId ? args.options.listId : args.options.listTitle);
                    logger.logToStderr(`Getting label set on the list ${list} in site at ${args.options.webUrl}...`);
                }
                let requestUrl = '';
                if (args.options.listId) {
                    if (this.debug) {
                        logger.logToStderr(`Retrieving List Url from Id '${args.options.listId}'...`);
                    }
                    requestUrl = `${args.options.webUrl}/_api/web/lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')?$expand=RootFolder&$select=RootFolder`;
                }
                else {
                    if (this.debug) {
                        logger.logToStderr(`Retrieving List Url from Title '${args.options.listTitle}'...`);
                    }
                    requestUrl = `${args.options.webUrl}/_api/web/lists/GetByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')?$expand=RootFolder&$select=RootFolder`;
                }
                let requestOptions = {
                    url: requestUrl,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const listInstance = yield request_1.default.get(requestOptions);
                const listAbsoluteUrl = urlUtil_1.urlUtil.getAbsoluteUrl(args.options.webUrl, listInstance.RootFolder.ServerRelativeUrl);
                requestOptions = {
                    url: `${args.options.webUrl}/_api/SP_CompliancePolicy_SPPolicyStoreProxy_GetListComplianceTag`,
                    headers: {
                        'accept': 'application/json;odata=nometadata',
                        'content-type': 'application/json;odata=nometadata'
                    },
                    responseType: 'json',
                    data: {
                        listUrl: listAbsoluteUrl
                    }
                };
                const res = yield request_1.default.post(requestOptions);
                if (res['odata.null'] !== true) {
                    logger.log(res);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoListLabelGetCommand_instances = new WeakSet(), _SpoListLabelGetCommand_initTelemetry = function _SpoListLabelGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: (!(!args.options.listId)).toString(),
            listTitle: (!(!args.options.listTitle)).toString()
        });
    });
}, _SpoListLabelGetCommand_initOptions = function _SpoListLabelGetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --listId [listId]'
    }, {
        option: '-t, --listTitle [listTitle]'
    });
}, _SpoListLabelGetCommand_initValidators = function _SpoListLabelGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId) {
            if (!validation_1.validation.isValidGuid(args.options.listId)) {
                return `${args.options.listId} is not a valid GUID`;
            }
        }
        return true;
    }));
}, _SpoListLabelGetCommand_initOptionSets = function _SpoListLabelGetCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listTitle']);
};
module.exports = new SpoListLabelGetCommand();
//# sourceMappingURL=list-label-get.js.map