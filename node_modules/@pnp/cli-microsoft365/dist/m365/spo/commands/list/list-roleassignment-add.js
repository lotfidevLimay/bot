"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListRoleAssignmentAddCommand_instances, _SpoListRoleAssignmentAddCommand_initTelemetry, _SpoListRoleAssignmentAddCommand_initOptions, _SpoListRoleAssignmentAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const SpoUserGetCommand = require("../user/user-get");
const SpoGroupGetCommand = require("../group/group-get");
const SpoRoleDefinitionListCommand = require("../roledefinition/roledefinition-list");
class SpoListRoleAssignmentAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListRoleAssignmentAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListRoleAssignmentAddCommand_instances, "m", _SpoListRoleAssignmentAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListRoleAssignmentAddCommand_instances, "m", _SpoListRoleAssignmentAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListRoleAssignmentAddCommand_instances, "m", _SpoListRoleAssignmentAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.LIST_ROLEASSIGNMENT_ADD;
    }
    get description() {
        return 'Adds a role assignment to list permissions';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Adding role assignment to list in site at ${args.options.webUrl}...`);
            }
            try {
                let requestUrl = `${args.options.webUrl}/_api/web/`;
                if (args.options.listId) {
                    requestUrl += `lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')/`;
                }
                else if (args.options.listTitle) {
                    requestUrl += `lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')/`;
                }
                else if (args.options.listUrl) {
                    const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                    requestUrl += `GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')/`;
                }
                args.options.roleDefinitionId = yield this.getRoleDefinitionId(args.options);
                if (args.options.upn) {
                    args.options.principalId = yield this.getUserPrincipalId(args.options);
                    yield this.addRoleAssignment(requestUrl, logger, args.options);
                }
                else if (args.options.groupName) {
                    args.options.principalId = yield this.getGroupPrincipalId(args.options);
                    yield this.addRoleAssignment(requestUrl, logger, args.options);
                }
                else {
                    yield this.addRoleAssignment(requestUrl, logger, args.options);
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    addRoleAssignment(requestUrl, logger, options) {
        const requestOptions = {
            url: `${requestUrl}roleassignments/addroleassignment(principalid='${options.principalId}',roledefid='${options.roleDefinitionId}')`,
            method: 'POST',
            headers: {
                'accept': 'application/json;odata=nometadata',
                'content-type': 'application/json'
            },
            responseType: 'json'
        };
        return request_1.default
            .post(requestOptions)
            .then(_ => Promise.resolve())
            .catch((err) => Promise.reject(err));
    }
    getRoleDefinitionId(options) {
        if (!options.roleDefinitionName) {
            return Promise.resolve(options.roleDefinitionId);
        }
        const roleDefinitionListCommandOptions = {
            webUrl: options.webUrl,
            output: 'json',
            debug: this.debug,
            verbose: this.verbose
        };
        return Cli_1.Cli.executeCommandWithOutput(SpoRoleDefinitionListCommand, { options: Object.assign(Object.assign({}, roleDefinitionListCommandOptions), { _: [] }) })
            .then((output) => {
            const getRoleDefinitionListOutput = JSON.parse(output.stdout);
            const roleDefinitionId = getRoleDefinitionListOutput.find((role) => role.Name === options.roleDefinitionName).Id;
            return Promise.resolve(roleDefinitionId);
        }, (err) => {
            return Promise.reject(err);
        });
    }
    getGroupPrincipalId(options) {
        const groupGetCommandOptions = {
            webUrl: options.webUrl,
            name: options.groupName,
            output: 'json',
            debug: this.debug,
            verbose: this.verbose
        };
        return Cli_1.Cli.executeCommandWithOutput(SpoGroupGetCommand, { options: Object.assign(Object.assign({}, groupGetCommandOptions), { _: [] }) })
            .then((output) => {
            const getGroupOutput = JSON.parse(output.stdout);
            return Promise.resolve(getGroupOutput.Id);
        }, (err) => {
            return Promise.reject(err);
        });
    }
    getUserPrincipalId(options) {
        const userGetCommandOptions = {
            webUrl: options.webUrl,
            email: options.upn,
            id: undefined,
            output: 'json',
            debug: this.debug,
            verbose: this.verbose
        };
        return Cli_1.Cli.executeCommandWithOutput(SpoUserGetCommand, { options: Object.assign(Object.assign({}, userGetCommandOptions), { _: [] }) })
            .then((output) => {
            const getUserOutput = JSON.parse(output.stdout);
            return Promise.resolve(getUserOutput.Id);
        }, (err) => {
            return Promise.reject(err);
        });
    }
}
_SpoListRoleAssignmentAddCommand_instances = new WeakSet(), _SpoListRoleAssignmentAddCommand_initTelemetry = function _SpoListRoleAssignmentAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            principalId: typeof args.options.principalId !== 'undefined',
            upn: typeof args.options.upn !== 'undefined',
            groupName: typeof args.options.groupName !== 'undefined',
            roleDefinitionId: typeof args.options.roleDefinitionId !== 'undefined',
            roleDefinitionName: typeof args.options.roleDefinitionName !== 'undefined'
        });
    });
}, _SpoListRoleAssignmentAddCommand_initOptions = function _SpoListRoleAssignmentAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-i, --listId [listId]'
    }, {
        option: '-t, --listTitle [listTitle]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '--principalId [principalId]'
    }, {
        option: '--upn [upn]'
    }, {
        option: '--groupName [groupName]'
    }, {
        option: '--roleDefinitionId [roleDefinitionId]'
    }, {
        option: '--roleDefinitionName [roleDefinitionName]'
    });
}, _SpoListRoleAssignmentAddCommand_initValidators = function _SpoListRoleAssignmentAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} is not a valid GUID`;
        }
        if (args.options.principalId && isNaN(args.options.principalId)) {
            return `Specified principalId ${args.options.principalId} is not a number`;
        }
        if (args.options.roleDefinitionId && isNaN(args.options.roleDefinitionId)) {
            return `Specified roleDefinitionId ${args.options.roleDefinitionId} is not a number`;
        }
        const listOptions = [args.options.listId, args.options.listTitle, args.options.listUrl];
        if (listOptions.some(item => item !== undefined) && listOptions.filter(item => item !== undefined).length > 1) {
            return `Specify either list id or title or list url`;
        }
        if (listOptions.filter(item => item !== undefined).length === 0) {
            return `Specify at least list id or title or list url`;
        }
        const principalOptions = [args.options.principalId, args.options.upn, args.options.groupName];
        if (principalOptions.some(item => item !== undefined) && principalOptions.filter(item => item !== undefined).length > 1) {
            return `Specify either principalId id or upn or groupName`;
        }
        if (principalOptions.filter(item => item !== undefined).length === 0) {
            return `Specify at least principalId id or upn or groupName`;
        }
        const roleDefinitionOptions = [args.options.roleDefinitionId, args.options.roleDefinitionName];
        if (roleDefinitionOptions.some(item => item !== undefined) && roleDefinitionOptions.filter(item => item !== undefined).length > 1) {
            return `Specify either roleDefinitionId id or roleDefinitionName`;
        }
        if (roleDefinitionOptions.filter(item => item !== undefined).length === 0) {
            return `Specify at least roleDefinitionId id or roleDefinitionName`;
        }
        return true;
    }));
};
module.exports = new SpoListRoleAssignmentAddCommand();
//# sourceMappingURL=list-roleassignment-add.js.map