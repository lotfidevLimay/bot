"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListAddCommand_instances, _SpoListAddCommand_initTelemetry, _SpoListAddCommand_initOptions, _SpoListAddCommand_initValidators, _SpoListAddCommand_initTypes;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const DraftVisibilityType_1 = require("./DraftVisibilityType");
const ListExperience_1 = require("./ListExperience");
const ListTemplateType_1 = require("./ListTemplateType");
class SpoListAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListAddCommand_instances, "m", _SpoListAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListAddCommand_instances, "m", _SpoListAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListAddCommand_instances, "m", _SpoListAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListAddCommand_instances, "m", _SpoListAddCommand_initTypes).call(this);
    }
    get name() {
        return commands_1.default.LIST_ADD;
    }
    get description() {
        return 'Creates list in the specified site';
    }
    /**
     * Maps the base ListTemplateType enum to string array so it can
     * more easily be used in validation or descriptions.
     */
    get listTemplateTypeMap() {
        const result = [];
        for (const template in ListTemplateType_1.ListTemplateType) {
            if (typeof ListTemplateType_1.ListTemplateType[template] === 'number') {
                result.push(template);
            }
        }
        return result;
    }
    /**
     * Maps the base DraftVisibilityType enum to string array so it can
     * more easily be used in validation or descriptions.
     */
    get draftVisibilityTypeMap() {
        const result = [];
        for (const draftType in DraftVisibilityType_1.DraftVisibilityType) {
            if (typeof DraftVisibilityType_1.DraftVisibilityType[draftType] === 'number') {
                result.push(draftType);
            }
        }
        return result;
    }
    /**
     * Maps the base ListExperience enum to string array so it can
     * more easily be used in validation or descriptions.
     */
    get listExperienceMap() {
        const result = [];
        for (const experience in ListExperience_1.ListExperience) {
            if (typeof ListExperience_1.ListExperience[experience] === 'number') {
                result.push(experience);
            }
        }
        return result;
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Creating list in site at ${args.options.webUrl}...`);
            }
            const requestBody = this.mapRequestBody(args.options);
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/lists`,
                method: 'POST',
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                data: requestBody,
                responseType: 'json'
            };
            try {
                const listInstance = yield request_1.default.post(requestOptions);
                logger.log(listInstance);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    mapRequestBody(options) {
        const requestBody = {
            Title: options.title,
            BaseTemplate: ListTemplateType_1.ListTemplateType[options.baseTemplate.trim()].valueOf()
        };
        if (options.description) {
            requestBody.Description = options.description;
        }
        if (options.templateFeatureId) {
            requestBody.TemplateFeatureId = options.templateFeatureId;
        }
        if (options.schemaXml) {
            requestBody.SchemaXml = options.schemaXml.replace('\\', '\\\\').replace('"', '\\"');
        }
        if (options.allowDeletion) {
            requestBody.AllowDeletion = options.allowDeletion;
        }
        if (options.allowEveryoneViewItems) {
            requestBody.AllowEveryoneViewItems = options.allowEveryoneViewItems;
        }
        if (options.allowMultiResponses) {
            requestBody.AllowMultiResponses = options.allowMultiResponses;
        }
        if (options.contentTypesEnabled) {
            requestBody.ContentTypesEnabled = options.contentTypesEnabled;
        }
        if (options.crawlNonDefaultViews) {
            requestBody.CrawlNonDefaultViews = options.crawlNonDefaultViews;
        }
        if (options.defaultContentApprovalWorkflowId) {
            requestBody.DefaultContentApprovalWorkflowId = options.defaultContentApprovalWorkflowId;
        }
        if (options.defaultDisplayFormUrl) {
            requestBody.DefaultDisplayFormUrl = options.defaultDisplayFormUrl;
        }
        if (options.defaultEditFormUrl) {
            requestBody.DefaultEditFormUrl = options.defaultEditFormUrl;
        }
        if (options.direction) {
            requestBody.Direction = options.direction;
        }
        if (options.disableGridEditing) {
            requestBody.DisableGridEditing = options.disableGridEditing;
        }
        if (options.draftVersionVisibility) {
            requestBody.DraftVersionVisibility = options.draftVersionVisibility;
        }
        if (options.emailAlias) {
            requestBody.EmailAlias = options.emailAlias;
        }
        if (options.enableAssignToEmail) {
            requestBody.EnableAssignToEmail = options.enableAssignToEmail;
        }
        if (options.enableAttachments) {
            requestBody.EnableAttachments = options.enableAttachments;
        }
        if (options.enableDeployWithDependentList) {
            requestBody.EnableDeployWithDependentList = options.enableDeployWithDependentList;
        }
        if (options.enableFolderCreation) {
            requestBody.EnableFolderCreation = options.enableFolderCreation;
        }
        if (options.enableMinorVersions) {
            requestBody.EnableMinorVersions = options.enableMinorVersions;
        }
        if (options.enableModeration) {
            requestBody.EnableModeration = options.enableModeration;
        }
        if (options.enablePeopleSelector) {
            requestBody.EnablePeopleSelector = options.enablePeopleSelector;
        }
        if (options.enableResourceSelector) {
            requestBody.EnableResourceSelector = options.enableResourceSelector;
        }
        if (options.enableSchemaCaching) {
            requestBody.EnableSchemaCaching = options.enableSchemaCaching;
        }
        if (options.enableSyndication) {
            requestBody.EnableSyndication = options.enableSyndication;
        }
        if (options.enableThrottling) {
            requestBody.EnableThrottling = options.enableThrottling;
        }
        if (options.enableVersioning) {
            requestBody.EnableVersioning = options.enableVersioning;
        }
        if (options.enforceDataValidation) {
            requestBody.EnforceDataValidation = options.enforceDataValidation;
        }
        if (options.excludeFromOfflineClient) {
            requestBody.ExcludeFromOfflineClient = options.excludeFromOfflineClient;
        }
        if (options.fetchPropertyBagForListView) {
            requestBody.FetchPropertyBagForListView = options.fetchPropertyBagForListView;
        }
        if (options.followable) {
            requestBody.Followable = options.followable;
        }
        if (options.forceCheckout) {
            requestBody.ForceCheckout = options.forceCheckout;
        }
        if (options.forceDefaultContentType) {
            requestBody.ForceDefaultContentType = options.forceDefaultContentType;
        }
        if (options.hidden) {
            requestBody.Hidden = options.hidden;
        }
        if (options.includedInMyFilesScope) {
            requestBody.IncludedInMyFilesScope = options.includedInMyFilesScope;
        }
        if (options.irmEnabled) {
            requestBody.IrmEnabled = options.irmEnabled;
        }
        if (options.irmExpire) {
            requestBody.IrmExpire = options.irmExpire;
        }
        if (options.irmReject) {
            requestBody.IrmReject = options.irmReject;
        }
        if (options.isApplicationList) {
            requestBody.IsApplicationList = options.isApplicationList;
        }
        if (options.listExperienceOptions) {
            requestBody.ListExperienceOptions = options.listExperienceOptions;
        }
        if (options.majorVersionLimit) {
            requestBody.MajorVersionLimit = options.majorVersionLimit;
        }
        if (options.majorWithMinorVersionsLimit) {
            requestBody.MajorWithMinorVersionsLimit = options.majorWithMinorVersionsLimit;
        }
        if (options.multipleDataList) {
            requestBody.MultipleDataList = options.multipleDataList;
        }
        if (options.navigateForFormsPages) {
            requestBody.NavigateForFormsPages = options.navigateForFormsPages;
        }
        if (options.needUpdateSiteClientTag) {
            requestBody.NeedUpdateSiteClientTag = options.needUpdateSiteClientTag;
        }
        if (options.noCrawl) {
            requestBody.NoCrawl = options.noCrawl;
        }
        if (options.onQuickLaunch) {
            requestBody.OnQuickLaunch = options.onQuickLaunch;
        }
        if (options.ordered) {
            requestBody.Ordered = options.ordered;
        }
        if (options.parserDisabled) {
            requestBody.ParserDisabled = options.parserDisabled;
        }
        if (options.readOnlyUI) {
            requestBody.ReadOnlyUI = options.readOnlyUI;
        }
        if (options.readSecurity) {
            requestBody.ReadSecurity = options.readSecurity;
        }
        if (options.requestAccessEnabled) {
            requestBody.RequestAccessEnabled = options.requestAccessEnabled;
        }
        if (options.restrictUserUpdates) {
            requestBody.RestrictUserUpdates = options.restrictUserUpdates;
        }
        if (options.sendToLocationName) {
            requestBody.SendToLocationName = options.sendToLocationName;
        }
        if (options.sendToLocationUrl) {
            requestBody.SendToLocationUrl = options.sendToLocationUrl;
        }
        if (options.showUser) {
            requestBody.ShowUser = options.showUser;
        }
        if (options.useFormsForDisplay) {
            requestBody.UseFormsForDisplay = options.useFormsForDisplay;
        }
        if (options.validationFormula) {
            requestBody.ValidationFormula = options.validationFormula;
        }
        if (options.validationMessage) {
            requestBody.ValidationMessage = options.validationMessage;
        }
        if (options.writeSecurity) {
            requestBody.WriteSecurity = options.writeSecurity;
        }
        return requestBody;
    }
}
_SpoListAddCommand_instances = new WeakSet(), _SpoListAddCommand_initTelemetry = function _SpoListAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        const telemetryProps = {};
        // add properties with identifiable data
        [
            'description',
            'templateFeatureId',
            'schemaXml',
            'defaultContentApprovalWorkflowId',
            'defaultDisplayFormUrl',
            'defaultEditFormUrl',
            'emailAlias',
            'sendToLocationName',
            'sendToLocationUrl',
            'validationFormula',
            'validationMessage'
        ].forEach(o => {
            const value = args.options[o];
            if (value) {
                telemetryProps[o] = (typeof value !== 'undefined').toString();
            }
        });
        // add boolean values
        SpoListAddCommand.booleanOptions.forEach(o => {
            const value = args.options[o];
            if (value) {
                telemetryProps[o] = (value === 'true').toString();
            }
        });
        // add properties with non-identifiable data
        [
            'baseTemplate',
            'direction',
            'draftVersionVisibility',
            'listExperienceOptions',
            'majorVersionLimit',
            'majorWithMinorVersionsLimit',
            'readSecurity',
            'writeSecurity'
        ].forEach(o => {
            const value = args.options[o];
            if (value) {
                telemetryProps[o] = value.toString();
            }
        });
        Object.assign(this.telemetryProperties, telemetryProps);
    });
}, _SpoListAddCommand_initOptions = function _SpoListAddCommand_initOptions() {
    this.options.unshift({
        option: '-t, --title <title>'
    }, {
        option: '--baseTemplate <baseTemplate>',
        autocomplete: this.listTemplateTypeMap
    }, {
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--description [description]'
    }, {
        option: '--templateFeatureId [templateFeatureId]'
    }, {
        option: '--schemaXml [schemaXml]'
    }, {
        option: '--allowDeletion [allowDeletion]',
        autocomplete: ['true', 'false']
    }, {
        option: '--allowEveryoneViewItems [allowEveryoneViewItems]',
        autocomplete: ['true', 'false']
    }, {
        option: '--allowMultiResponses [allowMultiResponses]',
        autocomplete: ['true', 'false']
    }, {
        option: '--contentTypesEnabled [contentTypesEnabled]',
        autocomplete: ['true', 'false']
    }, {
        option: '--crawlNonDefaultViews [crawlNonDefaultViews]',
        autocomplete: ['true', 'false']
    }, {
        option: '--defaultContentApprovalWorkflowId [defaultContentApprovalWorkflowId]'
    }, {
        option: '--defaultDisplayFormUrl [defaultDisplayFormUrl]'
    }, {
        option: '--defaultEditFormUrl [defaultEditFormUrl]'
    }, {
        option: '--direction [direction]',
        autocomplete: ['NONE', 'LTR', 'RTL']
    }, {
        option: '--disableGridEditing [disableGridEditing]',
        autocomplete: ['true', 'false']
    }, {
        option: '--draftVersionVisibility [draftVersionVisibility]',
        autocomplete: this.draftVisibilityTypeMap
    }, {
        option: '--emailAlias [emailAlias]'
    }, {
        option: '--enableAssignToEmail [enableAssignToEmail]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enableAttachments [enableAttachments]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enableDeployWithDependentList [enableDeployWithDependentList]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enableFolderCreation [enableFolderCreation]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enableMinorVersions [enableMinorVersions]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enableModeration [enableModeration]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enablePeopleSelector [enablePeopleSelector]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enableResourceSelector [enableResourceSelector]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enableSchemaCaching [enableSchemaCaching]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enableSyndication [enableSyndication]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enableThrottling [enableThrottling]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enableVersioning [enableVersioning]',
        autocomplete: ['true', 'false']
    }, {
        option: '--enforceDataValidation [enforceDataValidation]',
        autocomplete: ['true', 'false']
    }, {
        option: '--excludeFromOfflineClient [excludeFromOfflineClient]',
        autocomplete: ['true', 'false']
    }, {
        option: '--fetchPropertyBagForListView [fetchPropertyBagForListView]',
        autocomplete: ['true', 'false']
    }, {
        option: '--followable [followable]',
        autocomplete: ['true', 'false']
    }, {
        option: '--forceCheckout [forceCheckout]',
        autocomplete: ['true', 'false']
    }, {
        option: '--forceDefaultContentType [forceDefaultContentType]',
        autocomplete: ['true', 'false']
    }, {
        option: '--hidden [hidden]',
        autocomplete: ['true', 'false']
    }, {
        option: '--includedInMyFilesScope [includedInMyFilesScope]',
        autocomplete: ['true', 'false']
    }, {
        option: '--irmEnabled [irmEnabled]',
        autocomplete: ['true', 'false']
    }, {
        option: '--irmExpire [irmExpire]',
        autocomplete: ['true', 'false']
    }, {
        option: '--irmReject [irmReject]',
        autocomplete: ['true', 'false']
    }, {
        option: '--isApplicationList [isApplicationList]',
        autocomplete: ['true', 'false']
    }, {
        option: '--listExperienceOptions [listExperienceOptions]',
        autocomplete: this.listExperienceMap
    }, {
        option: '--majorVersionLimit [majorVersionLimit]'
    }, {
        option: '--majorWithMinorVersionsLimit [majorWithMinorVersionsLimit]'
    }, {
        option: '--multipleDataList [multipleDataList]',
        autocomplete: ['true', 'false']
    }, {
        option: '--navigateForFormsPages [navigateForFormsPages]',
        autocomplete: ['true', 'false']
    }, {
        option: '--needUpdateSiteClientTag [needUpdateSiteClientTag]',
        autocomplete: ['true', 'false']
    }, {
        option: '--noCrawl [noCrawl]',
        autocomplete: ['true', 'false']
    }, {
        option: '--onQuickLaunch [onQuickLaunch]',
        autocomplete: ['true', 'false']
    }, {
        option: '--ordered [ordered]',
        autocomplete: ['true', 'false']
    }, {
        option: '-parserDisabled [parserDisabled]',
        autocomplete: ['true', 'false']
    }, {
        option: '--readOnlyUI [readOnlyUI]',
        autocomplete: ['true', 'false']
    }, {
        option: '--readSecurity [readSecurity]',
        autocomplete: ['1', '2']
    }, {
        option: '--requestAccessEnabled [requestAccessEnabled]',
        autocomplete: ['true', 'false']
    }, {
        option: '--restrictUserUpdates [restrictUserUpdates]',
        autocomplete: ['true', 'false']
    }, {
        option: '--sendToLocationName [sendToLocationName]'
    }, {
        option: '--sendToLocationUrl [sendToLocationUrl]'
    }, {
        option: '--showUser [showUser]',
        autocomplete: ['true', 'false']
    }, {
        option: '--useFormsForDisplay [useFormsForDisplay]',
        autocomplete: ['true', 'false']
    }, {
        option: '--validationFormula [validationFormula]'
    }, {
        option: '--validationMessage [validationMessage]'
    }, {
        option: '--writeSecurity [writeSecurity]',
        autocomplete: ['1', '2', '4']
    });
}, _SpoListAddCommand_initValidators = function _SpoListAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        const template = ListTemplateType_1.ListTemplateType[args.options.baseTemplate.trim()];
        if (!template) {
            return `${args.options.baseTemplate} is not a valid baseTemplate value`;
        }
        for (let i = 0; i < SpoListAddCommand.booleanOptions.length; i++) {
            const option = SpoListAddCommand.booleanOptions[i];
            const value = args.options[option];
            if (value && !validation_1.validation.isValidBoolean(value)) {
                return `${value} in option ${option} is not a valid boolean value`;
            }
        }
        if (args.options.templateFeatureId &&
            !validation_1.validation.isValidGuid(args.options.templateFeatureId)) {
            return `${args.options.templateFeatureId} in option templateFeatureId is not a valid GUID`;
        }
        if (args.options.defaultContentApprovalWorkflowId &&
            !validation_1.validation.isValidGuid(args.options.defaultContentApprovalWorkflowId)) {
            return `${args.options.defaultContentApprovalWorkflowId} in option defaultContentApprovalWorkflowId is not a valid GUID`;
        }
        if (args.options.direction &&
            ['NONE', 'LTR', 'RTL'].indexOf(args.options.direction) === -1) {
            return `${args.options.direction} is not a valid direction value. Allowed values are NONE|LTR|RTL`;
        }
        if (args.options.draftVersionVisibility) {
            const draftType = DraftVisibilityType_1.DraftVisibilityType[args.options.draftVersionVisibility.trim()];
            if (!draftType) {
                return `${args.options.draftVersionVisibility} is not a valid draftVisibilityType value`;
            }
        }
        if (args.options.emailAlias && args.options.enableAssignToEmail !== 'true') {
            return `emailAlias could not be set if enableAssignToEmail is not set to true. Please set enableAssignToEmail.`;
        }
        if (args.options.listExperienceOptions) {
            const experience = ListExperience_1.ListExperience[args.options.listExperienceOptions.trim()];
            if (!experience) {
                return `${args.options.listExperienceOptions} is not a valid listExperienceOptions value`;
            }
        }
        if (args.options.majorVersionLimit && args.options.enableVersioning !== 'true') {
            return `majorVersionLimit option is only valid in combination with enableVersioning.`;
        }
        if (args.options.majorWithMinorVersionsLimit &&
            args.options.enableMinorVersions !== 'true' &&
            args.options.enableModeration !== 'true') {
            return `majorWithMinorVersionsLimit option is only valid in combination with enableMinorVersions or enableModeration.`;
        }
        if (args.options.readSecurity &&
            args.options.readSecurity !== 1 &&
            args.options.readSecurity !== 2) {
            return `${args.options.readSecurity} is not a valid readSecurity value. Allowed values are 1|2`;
        }
        if (args.options.writeSecurity &&
            args.options.writeSecurity !== 1 &&
            args.options.writeSecurity !== 2 &&
            args.options.writeSecurity !== 4) {
            return `${args.options.writeSecurity} is not a valid writeSecurity value. Allowed values are 1|2|4`;
        }
        return true;
    }));
}, _SpoListAddCommand_initTypes = function _SpoListAddCommand_initTypes() {
    this.types.string.push(...SpoListAddCommand.booleanOptions.concat([
        'baseTemplate',
        'webUrl',
        'templateFeatureId',
        'defaultContentApprovalWorkflowId',
        'draftVersionVisibility',
        'listExperienceOptions'
    ]));
};
SpoListAddCommand.booleanOptions = [
    'allowDeletion',
    'allowEveryoneViewItems',
    'allowMultiResponses',
    'contentTypesEnabled',
    'crawlNonDefaultViews',
    'disableGridEditing',
    'enableAssignToEmail',
    'enableAttachments',
    'enableDeployWithDependentList',
    'enableFolderCreation',
    'enableMinorVersions',
    'enableModeration',
    'enablePeopleSelector',
    'enableResourceSelector',
    'enableSchemaCaching',
    'enableSyndication',
    'enableThrottling',
    'enableVersioning',
    'enforceDataValidation',
    'excludeFromOfflineClient',
    'fetchPropertyBagForListView',
    'followable',
    'forceCheckout',
    'forceDefaultContentType',
    'hidden',
    'includedInMyFilesScope',
    'irmEnabled',
    'irmExpire',
    'irmReject',
    'isApplicationList',
    'multipleDataList',
    'navigateForFormsPages',
    'needUpdateSiteClientTag',
    'noCrawl',
    'onQuickLaunch',
    'ordered',
    'parserDisabled',
    'readOnlyUI',
    'requestAccessEnabled',
    'restrictUserUpdates',
    'showUser',
    'useFormsForDisplay'
];
module.exports = new SpoListAddCommand();
//# sourceMappingURL=list-add.js.map