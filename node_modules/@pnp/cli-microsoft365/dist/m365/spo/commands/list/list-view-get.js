"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListViewGetCommand_instances, _SpoListViewGetCommand_initTelemetry, _SpoListViewGetCommand_initOptions, _SpoListViewGetCommand_initValidators, _SpoListViewGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListViewGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListViewGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListViewGetCommand_instances, "m", _SpoListViewGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListViewGetCommand_instances, "m", _SpoListViewGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListViewGetCommand_instances, "m", _SpoListViewGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListViewGetCommand_instances, "m", _SpoListViewGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LIST_VIEW_GET;
    }
    get description() {
        return 'Gets information about specific list view';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const baseRestUrl = `${args.options.webUrl}/_api/web`;
            let listRestUrl = '';
            if (args.options.listId) {
                listRestUrl = `/lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')`;
            }
            else if (args.options.listTitle) {
                listRestUrl = `/lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')`;
            }
            else if (args.options.listUrl) {
                const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                listRestUrl = `/GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')`;
            }
            const viewRestUrl = `/views/${(args.options.viewId ? `getById('${formatting_1.formatting.encodeQueryParameter(args.options.viewId)}')` : `getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.viewTitle)}')`)}`;
            const requestOptions = {
                url: `${baseRestUrl}${listRestUrl}${viewRestUrl}`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                const result = yield request_1.default.get(requestOptions);
                logger.log(result);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoListViewGetCommand_instances = new WeakSet(), _SpoListViewGetCommand_initTelemetry = function _SpoListViewGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            viewId: typeof args.options.viewId !== 'undefined',
            viewTitle: typeof args.options.viewTitle !== 'undefined'
        });
    });
}, _SpoListViewGetCommand_initOptions = function _SpoListViewGetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--listId [listId]'
    }, {
        option: '--listTitle [listTitle]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '--viewId [viewId]'
    }, {
        option: '--viewTitle [viewTitle]'
    });
}, _SpoListViewGetCommand_initValidators = function _SpoListViewGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId &&
            !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} in option listId is not a valid GUID`;
        }
        if (args.options.viewId &&
            !validation_1.validation.isValidGuid(args.options.viewId)) {
            return `${args.options.viewId} in option viewId is not a valid GUID`;
        }
        return true;
    }));
}, _SpoListViewGetCommand_initOptionSets = function _SpoListViewGetCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listTitle', 'listUrl'], ['viewId', 'viewTitle']);
};
module.exports = new SpoListViewGetCommand();
//# sourceMappingURL=list-view-get.js.map