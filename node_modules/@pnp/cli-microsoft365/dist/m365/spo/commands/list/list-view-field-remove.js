"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoListViewFieldRemoveCommand_instances, _SpoListViewFieldRemoveCommand_initTelemetry, _SpoListViewFieldRemoveCommand_initOptions, _SpoListViewFieldRemoveCommand_initValidators, _SpoListViewFieldRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoListViewFieldRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoListViewFieldRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoListViewFieldRemoveCommand_instances, "m", _SpoListViewFieldRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoListViewFieldRemoveCommand_instances, "m", _SpoListViewFieldRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoListViewFieldRemoveCommand_instances, "m", _SpoListViewFieldRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoListViewFieldRemoveCommand_instances, "m", _SpoListViewFieldRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.LIST_VIEW_FIELD_REMOVE;
    }
    get description() {
        return 'Removes the specified field from list view';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const listSelector = args.options.listId ? `(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')` : `/GetByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')`;
            const removeFieldFromView = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (this.verbose) {
                        logger.logToStderr(`Getting field ${args.options.fieldId || args.options.fieldTitle}...`);
                    }
                    const field = yield this.getField(args.options, listSelector);
                    if (this.verbose) {
                        logger.logToStderr(`Removing field ${args.options.fieldId || args.options.fieldTitle} from view ${args.options.viewId || args.options.viewTitle}...`);
                    }
                    const viewSelector = args.options.viewId ? `('${formatting_1.formatting.encodeQueryParameter(args.options.viewId)}')` : `/GetByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.viewTitle)}')`;
                    const postRequestUrl = `${args.options.webUrl}/_api/web/lists${listSelector}/views${viewSelector}/viewfields/removeviewfield('${field.InternalName}')`;
                    const postRequestOptions = {
                        url: postRequestUrl,
                        headers: {
                            'accept': 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    yield request_1.default.post(postRequestOptions);
                    // REST post call doesn't return anything
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeFieldFromView();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the field ${args.options.fieldId || args.options.fieldTitle} from the view ${args.options.viewId || args.options.viewTitle} from list ${args.options.listId || args.options.listTitle} in site ${args.options.webUrl}?`
                });
                if (result.continue) {
                    yield removeFieldFromView();
                }
            }
        });
    }
    getField(options, listSelector) {
        const fieldSelector = options.fieldId ? `/getbyid('${encodeURIComponent(options.fieldId)}')` : `/getbyinternalnameortitle('${encodeURIComponent(options.fieldTitle)}')`;
        const getRequestUrl = `${options.webUrl}/_api/web/lists${listSelector}/fields${fieldSelector}`;
        const requestOptions = {
            url: getRequestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            responseType: 'json'
        };
        return request_1.default.get(requestOptions);
    }
}
_SpoListViewFieldRemoveCommand_instances = new WeakSet(), _SpoListViewFieldRemoveCommand_initTelemetry = function _SpoListViewFieldRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            viewId: typeof args.options.viewId !== 'undefined',
            viewTitle: typeof args.options.viewTitle !== 'undefined',
            fieldId: typeof args.options.fieldId !== 'undefined',
            fieldTitle: typeof args.options.fieldTitle !== 'undefined',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SpoListViewFieldRemoveCommand_initOptions = function _SpoListViewFieldRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '--listId [listId]'
    }, {
        option: '--listTitle [listTitle]'
    }, {
        option: '--viewId [viewId]'
    }, {
        option: '--viewTitle [viewTitle]'
    }, {
        option: '--fieldId [fieldId]'
    }, {
        option: '--fieldTitle [fieldTitle]'
    }, {
        option: '--confirm'
    });
}, _SpoListViewFieldRemoveCommand_initValidators = function _SpoListViewFieldRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId) {
            if (!validation_1.validation.isValidGuid(args.options.listId)) {
                return `${args.options.listId} is not a valid GUID`;
            }
        }
        if (args.options.viewId) {
            if (!validation_1.validation.isValidGuid(args.options.viewId)) {
                return `${args.options.viewId} is not a valid GUID`;
            }
        }
        if (args.options.fieldId) {
            if (!validation_1.validation.isValidGuid(args.options.fieldId)) {
                return `${args.options.viewId} is not a valid GUID`;
            }
        }
        return true;
    }));
}, _SpoListViewFieldRemoveCommand_initOptionSets = function _SpoListViewFieldRemoveCommand_initOptionSets() {
    this.optionSets.push(['listId', 'listTitle'], ['viewId', 'viewTitle'], ['fieldId', 'fieldTitle']);
};
module.exports = new SpoListViewFieldRemoveCommand();
//# sourceMappingURL=list-view-field-remove.js.map