"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoNavigationNodeListCommand_instances, _SpoNavigationNodeListCommand_initTelemetry, _SpoNavigationNodeListCommand_initOptions, _SpoNavigationNodeListCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoNavigationNodeListCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoNavigationNodeListCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoNavigationNodeListCommand_instances, "m", _SpoNavigationNodeListCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoNavigationNodeListCommand_instances, "m", _SpoNavigationNodeListCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoNavigationNodeListCommand_instances, "m", _SpoNavigationNodeListCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.NAVIGATION_NODE_LIST;
    }
    get description() {
        return 'Lists nodes from the specified site navigation';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving navigation nodes...`);
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/navigation/${args.options.location.toLowerCase()}`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                const res = yield request_1.default.get(requestOptions);
                logger.log(res.value.map(n => {
                    return {
                        Id: n.Id,
                        Title: n.Title,
                        Url: n.Url
                    };
                }));
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoNavigationNodeListCommand_instances = new WeakSet(), _SpoNavigationNodeListCommand_initTelemetry = function _SpoNavigationNodeListCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            location: args.options.location
        });
    });
}, _SpoNavigationNodeListCommand_initOptions = function _SpoNavigationNodeListCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --location <location>',
        autocomplete: ['QuickLaunch', 'TopNavigationBar']
    });
}, _SpoNavigationNodeListCommand_initValidators = function _SpoNavigationNodeListCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.location !== 'QuickLaunch' &&
            args.options.location !== 'TopNavigationBar') {
            return `${args.options.location} is not a valid value for the location option. Allowed values are QuickLaunch|TopNavigationBar`;
        }
        return true;
    }));
};
module.exports = new SpoNavigationNodeListCommand();
//# sourceMappingURL=navigation-node-list.js.map