"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoNavigationNodeAddCommand_instances, _SpoNavigationNodeAddCommand_initTelemetry, _SpoNavigationNodeAddCommand_initOptions, _SpoNavigationNodeAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoNavigationNodeAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoNavigationNodeAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoNavigationNodeAddCommand_instances, "m", _SpoNavigationNodeAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoNavigationNodeAddCommand_instances, "m", _SpoNavigationNodeAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoNavigationNodeAddCommand_instances, "m", _SpoNavigationNodeAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.NAVIGATION_NODE_ADD;
    }
    get description() {
        return 'Adds a navigation node to the specified site navigation';
    }
    getExcludedOptionsWithUrls() {
        return ['url'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Adding navigation node...`);
            }
            const nodesCollection = args.options.parentNodeId ?
                `GetNodeById(${args.options.parentNodeId})/Children` :
                args.options.location.toLowerCase();
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/navigation/${nodesCollection}`,
                headers: {
                    accept: 'application/json;odata=nometadata',
                    'content-type': 'application/json;odata=nometadata'
                },
                data: {
                    Title: args.options.title,
                    Url: args.options.url,
                    IsExternal: args.options.isExternal === true
                },
                responseType: 'json'
            };
            try {
                const res = yield request_1.default.post(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoNavigationNodeAddCommand_instances = new WeakSet(), _SpoNavigationNodeAddCommand_initTelemetry = function _SpoNavigationNodeAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            isExternal: args.options.isExternal,
            parentNodeId: typeof args.options.parentNodeId !== 'undefined'
        });
    });
}, _SpoNavigationNodeAddCommand_initOptions = function _SpoNavigationNodeAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --location [location]',
        autocomplete: ['QuickLaunch', 'TopNavigationBar']
    }, {
        option: '-t, --title <title>'
    }, {
        option: '--url <url>'
    }, {
        option: '--parentNodeId [parentNodeId]'
    }, {
        option: '--isExternal'
    });
}, _SpoNavigationNodeAddCommand_initValidators = function _SpoNavigationNodeAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.parentNodeId) {
            if (isNaN(args.options.parentNodeId)) {
                return `${args.options.parentNodeId} is not a number`;
            }
        }
        else {
            if (args.options.location !== 'QuickLaunch' &&
                args.options.location !== 'TopNavigationBar') {
                return `${args.options.location} is not a valid value for the location option. Allowed values are QuickLaunch|TopNavigationBar`;
            }
        }
        return true;
    }));
};
module.exports = new SpoNavigationNodeAddCommand();
//# sourceMappingURL=navigation-node-add.js.map