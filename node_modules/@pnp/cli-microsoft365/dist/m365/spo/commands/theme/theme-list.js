"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const spo_1 = require("../../../../utils/spo");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoThemeListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.THEME_LIST;
    }
    get description() {
        return 'Retrieves the list of custom themes';
    }
    defaultProperties() {
        return ['name'];
    }
    commandAction(logger) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const spoAdminUrl = yield spo_1.spo.getSpoAdminUrl(logger, this.debug);
                if (this.verbose) {
                    logger.logToStderr(`Retrieving themes from tenant store...`);
                }
                const requestOptions = {
                    url: `${spoAdminUrl}/_api/thememanager/GetTenantThemingOptions`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const rawRes = yield request_1.default.post(requestOptions);
                const themePreviews = rawRes.themePreviews;
                if (themePreviews && themePreviews.length > 0) {
                    logger.log(themePreviews);
                }
                else {
                    if (this.verbose) {
                        logger.logToStderr('No themes found');
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
module.exports = new SpoThemeListCommand();
//# sourceMappingURL=theme-list.js.map