"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoAppPageAddCommand_instances, _SpoAppPageAddCommand_initTelemetry, _SpoAppPageAddCommand_initOptions, _SpoAppPageAddCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const urlUtil_1 = require("../../../../utils/urlUtil");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoAppPageAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoAppPageAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoAppPageAddCommand_instances, "m", _SpoAppPageAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoAppPageAddCommand_instances, "m", _SpoAppPageAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoAppPageAddCommand_instances, "m", _SpoAppPageAddCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.APPPAGE_ADD;
    }
    get description() {
        return 'Creates a single-part app page';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const createPageRequestOptions = {
                url: `${args.options.webUrl}/_api/sitepages/Pages/CreateAppPage`,
                headers: {
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json',
                data: {
                    webPartDataAsJson: args.options.webPartData
                }
            };
            try {
                const page = yield request_1.default.post(createPageRequestOptions);
                const pageUrl = page.value;
                let requestOptions = {
                    url: `${args.options.webUrl}/_api/web/getfilebyserverrelativeurl('${urlUtil_1.urlUtil.getServerRelativeSiteUrl(args.options.webUrl)}/${pageUrl}')?$expand=ListItemAllFields`,
                    headers: {
                        'content-type': 'application/json;charset=utf-8',
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const file = yield request_1.default.get(requestOptions);
                requestOptions = {
                    url: `${args.options.webUrl}/_api/sitepages/Pages/UpdateAppPage`,
                    headers: {
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json',
                    data: {
                        pageId: file.ListItemAllFields.Id,
                        webPartDataAsJson: args.options.webPartData,
                        title: args.options.title,
                        includeInNavigation: args.options.addToQuickLaunch
                    }
                };
                const res = yield request_1.default.post(requestOptions);
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoAppPageAddCommand_instances = new WeakSet(), _SpoAppPageAddCommand_initTelemetry = function _SpoAppPageAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            addToQuickLaunch: args.options.addToQuickLaunch
        });
    });
}, _SpoAppPageAddCommand_initOptions = function _SpoAppPageAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-t, --title <title>'
    }, {
        option: '-d, --webPartData <webPartData>'
    }, {
        option: '--addToQuickLaunch'
    });
}, _SpoAppPageAddCommand_initValidators = function _SpoAppPageAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        try {
            JSON.parse(args.options.webPartData);
        }
        catch (e) {
            return `Specified webPartData is not a valid JSON string. Error: ${e}`;
        }
        return true;
    }));
};
module.exports = new SpoAppPageAddCommand();
//# sourceMappingURL=apppage-add.js.map