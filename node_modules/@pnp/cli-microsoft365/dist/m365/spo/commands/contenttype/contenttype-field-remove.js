"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoContentTypeFieldRemoveCommand_instances, _SpoContentTypeFieldRemoveCommand_initTelemetry, _SpoContentTypeFieldRemoveCommand_initOptions, _SpoContentTypeFieldRemoveCommand_initValidators, _SpoContentTypeFieldRemoveCommand_initTypes;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoContentTypeFieldRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoContentTypeFieldRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoContentTypeFieldRemoveCommand_instances, "m", _SpoContentTypeFieldRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeFieldRemoveCommand_instances, "m", _SpoContentTypeFieldRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeFieldRemoveCommand_instances, "m", _SpoContentTypeFieldRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeFieldRemoveCommand_instances, "m", _SpoContentTypeFieldRemoveCommand_initTypes).call(this);
    }
    get name() {
        return commands_1.default.CONTENTTYPE_FIELD_REMOVE;
    }
    get description() {
        return 'Removes a column from a site- or list content type';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeFieldLink = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (this.debug) {
                        logger.logToStderr(`Get SiteId required by ProcessQuery endpoint.`);
                    }
                    // GET SiteId
                    let requestOptions = {
                        url: `${args.options.webUrl}/_api/site?$select=Id`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const site = yield request_1.default.get(requestOptions);
                    const siteId = site.Id;
                    if (this.debug) {
                        logger.logToStderr(`SiteId: ${siteId}`);
                        logger.logToStderr(`Get WebId required by ProcessQuery endpoint.`);
                    }
                    // GET WebId
                    requestOptions = {
                        url: `${args.options.webUrl}/_api/web?$select=Id`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const web = yield request_1.default.get(requestOptions);
                    const webId = web.Id;
                    if (this.debug) {
                        logger.logToStderr(`WebId: ${webId}`);
                    }
                    let listId = undefined;
                    if (args.options.listId) {
                        listId = args.options.listId;
                    }
                    else if (args.options.listTitle) {
                        listId = yield this.getListIdFromListTitle(args.options.webUrl, args.options.listTitle);
                    }
                    else if (args.options.listUrl) {
                        listId = yield this.getListIdFromListUrl(args.options.webUrl, args.options.listUrl);
                    }
                    if (this.debug) {
                        logger.logToStderr(`ListId: ${listId}`);
                    }
                    const reqDigest = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                    const requestDigest = reqDigest.FormDigestValue;
                    const updateChildContentTypes = args.options.listTitle || args.options.listId || args.options.listUrl ? false : args.options.updateChildContentTypes === true;
                    if (this.debug) {
                        const additionalLog = args.options.listTitle ? `; ListTitle='${args.options.listTitle}'` : args.options.listId ? `; ListId='${args.options.listId}'` : args.options.listUrl ? `; ListUrl='${args.options.listUrl}'` : ` ; UpdateChildContentTypes='${updateChildContentTypes}`;
                        logger.logToStderr(`Remove FieldLink from ContentType. FieldLinkId='${args.options.fieldLinkId}' ; ContentTypeId='${args.options.contentTypeId}' ${additionalLog}`);
                        logger.logToStderr(`Execute ProcessQuery.`);
                    }
                    let requestBody = '';
                    if (listId) {
                        requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName=".NET Library" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="18" ObjectPathId="17" /><ObjectPath Id="20" ObjectPathId="19" /><Method Name="DeleteObject" Id="21" ObjectPathId="19" /><Method Name="Update" Id="22" ObjectPathId="15"><Parameters><Parameter Type="Boolean">${updateChildContentTypes}</Parameter></Parameters></Method></Actions><ObjectPaths><Property Id="17" ParentId="15" Name="FieldLinks" /><Method Id="19" ParentId="17" Name="GetById"><Parameters><Parameter Type="Guid">{${formatting_1.formatting.escapeXml(args.options.fieldLinkId)}}</Parameter></Parameters></Method><Identity Id="15" Name="09eec89e-709b-0000-558c-c222dcaf9162|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${siteId}:web:${webId}:list:${listId}:contenttype:${formatting_1.formatting.escapeXml(args.options.contentTypeId)}" /></ObjectPaths></Request>`;
                    }
                    else {
                        requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName=".NET Library" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="77" ObjectPathId="76" /><ObjectPath Id="79" ObjectPathId="78" /><Method Name="DeleteObject" Id="80" ObjectPathId="78" /><Method Name="Update" Id="81" ObjectPathId="24"><Parameters><Parameter Type="Boolean">${updateChildContentTypes}</Parameter></Parameters></Method></Actions><ObjectPaths><Property Id="76" ParentId="24" Name="FieldLinks" /><Method Id="78" ParentId="76" Name="GetById"><Parameters><Parameter Type="Guid">{${formatting_1.formatting.escapeXml(args.options.fieldLinkId)}}</Parameter></Parameters></Method><Identity Id="24" Name="6b3ec69e-00a7-0000-55a3-61f8d779d2b3|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${siteId}:web:${webId}:contenttype:${formatting_1.formatting.escapeXml(args.options.contentTypeId)}" /></ObjectPaths></Request>`;
                    }
                    requestOptions = {
                        url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                        headers: {
                            'X-RequestDigest': requestDigest
                        },
                        data: requestBody
                    };
                    const res = yield request_1.default.post(requestOptions);
                    const json = JSON.parse(res);
                    const response = json[0];
                    if (response.ErrorInfo) {
                        throw response.ErrorInfo.ErrorMessage;
                    }
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeFieldLink();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the column ${args.options.fieldLinkId} from content type ${args.options.contentTypeId}?`
                });
                if (result.continue) {
                    yield removeFieldLink();
                }
            }
        });
    }
    getListIdFromListTitle(webUrl, listTitle) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: `${webUrl}/_api/lists/GetByTitle('${formatting_1.formatting.encodeQueryParameter(listTitle)}')?$select=Id`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            const list = yield request_1.default.get(requestOptions);
            return list.Id;
        });
    }
    getListIdFromListUrl(webUrl, listUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(webUrl, listUrl);
            const requestOptions = {
                url: `${webUrl}/_api/web/GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')?$select=Id`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            const list = yield request_1.default.get(requestOptions);
            return list.Id;
        });
    }
}
_SpoContentTypeFieldRemoveCommand_instances = new WeakSet(), _SpoContentTypeFieldRemoveCommand_initTelemetry = function _SpoContentTypeFieldRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listTitle: typeof args.options.listTitle !== 'undefined',
            listId: typeof args.options.listId !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            updateChildContentTypes: !!args.options.updateChildContentTypes,
            confirm: !!args.options.confirm
        });
    });
}, _SpoContentTypeFieldRemoveCommand_initOptions = function _SpoContentTypeFieldRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --listTitle [listTitle]'
    }, {
        option: '--listId [listId]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-i, --contentTypeId <contentTypeId>'
    }, {
        option: '-f, --fieldLinkId <fieldLinkId>'
    }, {
        option: '-c, --updateChildContentTypes'
    }, {
        option: '--confirm'
    });
}, _SpoContentTypeFieldRemoveCommand_initValidators = function _SpoContentTypeFieldRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.fieldLinkId)) {
            return `${args.options.fieldLinkId} is not a valid GUID`;
        }
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} is not a valid GUID`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
}, _SpoContentTypeFieldRemoveCommand_initTypes = function _SpoContentTypeFieldRemoveCommand_initTypes() {
    this.types.string.push('i', 'contentTypeId');
};
module.exports = new SpoContentTypeFieldRemoveCommand();
//# sourceMappingURL=contenttype-field-remove.js.map