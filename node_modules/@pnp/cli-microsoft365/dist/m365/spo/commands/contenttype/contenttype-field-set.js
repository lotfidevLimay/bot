"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoContentTypeFieldSetCommand_instances, _SpoContentTypeFieldSetCommand_initTelemetry, _SpoContentTypeFieldSetCommand_initOptions, _SpoContentTypeFieldSetCommand_initValidators, _SpoContentTypeFieldSetCommand_initTypes;
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoContentTypeFieldSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoContentTypeFieldSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoContentTypeFieldSetCommand_instances, "m", _SpoContentTypeFieldSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeFieldSetCommand_instances, "m", _SpoContentTypeFieldSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeFieldSetCommand_instances, "m", _SpoContentTypeFieldSetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeFieldSetCommand_instances, "m", _SpoContentTypeFieldSetCommand_initTypes).call(this);
        this.requestDigest = '';
        this.siteId = '';
        this.webId = '';
        this.fieldLink = null;
    }
    get name() {
        return commands_1.default.CONTENTTYPE_FIELD_SET;
    }
    get description() {
        return 'Adds or updates a site column reference in a site content type';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let schemaXmlWithResourceTokens = '';
                if (this.verbose) {
                    logger.logToStderr(`Retrieving field link for field ${args.options.fieldId}...`);
                }
                let requestOptions = {
                    url: `${args.options.webUrl}/_api/web/contenttypes('${encodeURIComponent(args.options.contentTypeId)}')/fieldlinks('${args.options.fieldId}')`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const fieldLink = yield request_1.default.get(requestOptions);
                if (fieldLink["odata.null"] !== true) {
                    if (this.verbose) {
                        logger.logToStderr('Field link found');
                    }
                    this.fieldLink = fieldLink;
                }
                else {
                    if (this.verbose) {
                        logger.logToStderr('Field link not found. Creating...');
                        logger.logToStderr(`Retrieving information about site column ${args.options.fieldId}...`);
                    }
                    requestOptions = {
                        url: `${args.options.webUrl}/_api/web/fields('${args.options.fieldId}')?$select=SchemaXmlWithResourceTokens`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const field = yield request_1.default.get(requestOptions);
                    schemaXmlWithResourceTokens = field.SchemaXmlWithResourceTokens;
                    yield this.createFieldLink(logger, args, schemaXmlWithResourceTokens);
                }
                if (!this.fieldLink) {
                    if (this.verbose) {
                        logger.logToStderr(`Retrieving information about field link for field ${args.options.fieldId}...`);
                    }
                    requestOptions = {
                        url: `${args.options.webUrl}/_api/web/contenttypes('${encodeURIComponent(args.options.contentTypeId)}')/fieldlinks('${args.options.fieldId}')`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const fieldLinkResult = yield request_1.default.get(requestOptions);
                    if (fieldLinkResult && fieldLinkResult["odata.null"] !== true) {
                        this.fieldLink = fieldLinkResult;
                    }
                }
                if (!this.fieldLink) {
                    throw `Couldn't find field link for field ${args.options.fieldId}`;
                }
                let updateHidden = false;
                let updateRequired = false;
                if (typeof args.options.hidden !== 'undefined' &&
                    this.fieldLink.Hidden !== (args.options.hidden === 'true')) {
                    updateHidden = true;
                }
                if (typeof args.options.required !== 'undefined' &&
                    this.fieldLink.Required !== (args.options.required === 'true')) {
                    updateRequired = true;
                }
                if (!updateHidden && !updateRequired) {
                    if (this.verbose) {
                        logger.logToStderr('Field link already up-to-date');
                    }
                    throw 'DONE';
                }
                if (!this.siteId) {
                    if (this.verbose) {
                        logger.logToStderr(`Retrieving site collection id...`);
                    }
                    requestOptions = {
                        url: `${args.options.webUrl}/_api/site?$select=Id`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const site = yield request_1.default.get(requestOptions);
                    this.siteId = site.Id;
                }
                if (!this.webId) {
                    if (this.verbose) {
                        logger.logToStderr(`Retrieving site id...`);
                    }
                    requestOptions = {
                        url: `${args.options.webUrl}/_api/web?$select=Id`,
                        headers: {
                            accept: 'application/json;odata=nometadata'
                        },
                        responseType: 'json'
                    };
                    const web = yield request_1.default.get(requestOptions);
                    this.webId = web.Id;
                }
                if (this.verbose) {
                    logger.logToStderr(`Updating field link...`);
                }
                const requiredProperty = typeof args.options.required !== 'undefined' &&
                    this.fieldLink.Required !== (args.options.required === 'true') ? `<SetProperty Id="122" ObjectPathId="121" Name="Required"><Parameter Type="Boolean">${args.options.required}</Parameter></SetProperty>` : '';
                const hiddenProperty = typeof args.options.hidden !== 'undefined' &&
                    this.fieldLink.Hidden !== (args.options.hidden === 'true') ? `<SetProperty Id="123" ObjectPathId="121" Name="Hidden"><Parameter Type="Boolean">${args.options.hidden}</Parameter></SetProperty>` : '';
                requestOptions = {
                    url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.requestDigest
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions>${requiredProperty}${hiddenProperty}<Method Name="Update" Id="124" ObjectPathId="19"><Parameters><Parameter Type="Boolean">true</Parameter></Parameters></Method></Actions><ObjectPaths><Identity Id="121" Name="716a7b9e-3012-0000-22fb-84acfcc67d04|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${this.siteId}:web:${this.webId}:contenttype:${formatting_1.formatting.escapeXml(args.options.contentTypeId)}:fl:${this.fieldLink.Id}" /><Identity Id="19" Name="716a7b9e-3012-0000-22fb-84acfcc67d04|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${this.siteId}:web:${this.webId}:contenttype:${formatting_1.formatting.escapeXml(args.options.contentTypeId)}" /></ObjectPaths></Request>`
                };
                const res = yield request_1.default.post(requestOptions);
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    throw response.ErrorInfo.ErrorMessage;
                }
            }
            catch (err) {
                if (err !== 'DONE') {
                    this.handleRejectedODataJsonPromise(err);
                }
            }
        });
    }
    createFieldLink(logger, args, schemaXmlWithResourceTokens) {
        return new Promise((resolve, reject) => {
            let requiresUpdate = false;
            const match = /(<Field[^>]+>)(.*)/.exec(schemaXmlWithResourceTokens);
            let xField = match[1];
            const allowDeletion = /AllowDeletion="([^"]+)"/.exec(xField);
            if (!allowDeletion) {
                requiresUpdate = true;
                xField = xField.replace('>', ' AllowDeletion="TRUE">') + match[2];
            }
            else {
                if (allowDeletion[1] !== 'TRUE') {
                    requiresUpdate = true;
                    xField = xField.replace(allowDeletion[0], 'AllowDeletion="TRUE"') + match[2];
                }
            }
            this
                .updateField(xField, requiresUpdate, logger, args)
                .then(() => {
                if (this.verbose) {
                    logger.logToStderr(`Retrieving site collection id...`);
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/site?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                return request_1.default.get(requestOptions);
            })
                .then((res) => {
                this.siteId = res.Id;
                if (this.verbose) {
                    logger.logToStderr(`Retrieving site id...`);
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/web?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                return request_1.default.get(requestOptions);
            })
                .then((res) => {
                this.webId = res.Id;
                return this.ensureRequestDigest(args.options.webUrl, logger);
            })
                .then(() => {
                const requestOptions = {
                    url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.requestDigest
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="5" ObjectPathId="4" /><ObjectIdentityQuery Id="6" ObjectPathId="4" /><Method Name="Update" Id="7" ObjectPathId="1"><Parameters><Parameter Type="Boolean">true</Parameter></Parameters></Method></Actions><ObjectPaths><Identity Id="2" Name="d6667b9e-50fb-0000-2693-032ae7a0df25|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${this.siteId}:web:${this.webId}:field:${args.options.fieldId}" /><Method Id="4" ParentId="3" Name="Add"><Parameters><Parameter TypeId="{63fb2c92-8f65-4bbb-a658-b6cd294403f4}"><Property Name="Field" ObjectPathId="2" /></Parameter></Parameters></Method><Identity Id="1" Name="d6667b9e-80f4-0000-2693-05528ff416bf|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${this.siteId}:web:${this.webId}:contenttype:${formatting_1.formatting.escapeXml(args.options.contentTypeId)}" /><Property Id="3" ParentId="1" Name="FieldLinks" /></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                }
                else {
                    resolve();
                }
            }, (error) => {
                reject(error);
            });
        });
    }
    updateField(schemaXml, requiresUpdate, logger, args) {
        return new Promise((resolve, reject) => {
            if (!requiresUpdate) {
                if (this.verbose) {
                    logger.logToStderr(`Schema of field ${args.options.fieldId} is already up-to-date`);
                }
                resolve();
                return;
            }
            this
                .ensureRequestDigest(args.options.webUrl, logger)
                .then(() => {
                if (this.verbose) {
                    logger.logToStderr(`Updating field schema...`);
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/web/fields('${args.options.fieldId}')`,
                    headers: {
                        accept: 'application/json;odata=nometadata',
                        'content-type': 'application/json;odata=nometadata',
                        'X-HTTP-Method': 'MERGE',
                        'x-requestdigest': this.requestDigest
                    },
                    data: {
                        SchemaXml: schemaXml
                    },
                    responseType: 'json'
                };
                return request_1.default.post(requestOptions);
            })
                .then(() => {
                resolve();
            }, (error) => {
                reject(error);
            });
        });
    }
    ensureRequestDigest(siteUrl, logger) {
        return new Promise((resolve, reject) => {
            if (this.requestDigest) {
                if (this.debug) {
                    logger.logToStderr('Request digest already present');
                }
                resolve();
                return;
            }
            if (this.debug) {
                logger.logToStderr('Retrieving request digest...');
            }
            spo_1.spo
                .getRequestDigest(siteUrl)
                .then((res) => {
                this.requestDigest = res.FormDigestValue;
                resolve();
            }, (error) => {
                reject(error);
            });
        });
    }
}
_SpoContentTypeFieldSetCommand_instances = new WeakSet(), _SpoContentTypeFieldSetCommand_initTelemetry = function _SpoContentTypeFieldSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            hidden: args.options.hidden,
            required: args.options.required
        });
    });
}, _SpoContentTypeFieldSetCommand_initOptions = function _SpoContentTypeFieldSetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-c, --contentTypeId <contentTypeId>'
    }, {
        option: '-f, --fieldId <fieldId>'
    }, {
        option: '-r, --required [required]'
    }, {
        option: '--hidden [hidden]'
    });
}, _SpoContentTypeFieldSetCommand_initValidators = function _SpoContentTypeFieldSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.fieldId)) {
            return `${args.options.fieldId} is not a valid GUID`;
        }
        if (typeof args.options.required !== 'undefined') {
            if (args.options.required !== 'true' &&
                args.options.required !== 'false') {
                return `${args.options.required} is not a valid boolean value. Allowed values are true|false`;
            }
        }
        if (typeof args.options.hidden !== 'undefined') {
            if (args.options.hidden !== 'true' &&
                args.options.hidden !== 'false') {
                return `${args.options.hidden} is not a valid boolean value. Allowed values are true|false`;
            }
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
}, _SpoContentTypeFieldSetCommand_initTypes = function _SpoContentTypeFieldSetCommand_initTypes() {
    this.types.string.push('contentTypeId', 'c');
};
module.exports = new SpoContentTypeFieldSetCommand();
//# sourceMappingURL=contenttype-field-set.js.map