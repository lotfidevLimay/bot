"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoContentTypeSetCommand_instances, _SpoContentTypeSetCommand_initTelemetry, _SpoContentTypeSetCommand_initOptions, _SpoContentTypeSetCommand_initValidators, _SpoContentTypeSetCommand_initTypes, _SpoContentTypeSetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
class SpoContentTypeSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoContentTypeSetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoContentTypeSetCommand_instances, "m", _SpoContentTypeSetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeSetCommand_instances, "m", _SpoContentTypeSetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeSetCommand_instances, "m", _SpoContentTypeSetCommand_initTypes).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeSetCommand_instances, "m", _SpoContentTypeSetCommand_initOptionSets).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeSetCommand_instances, "m", _SpoContentTypeSetCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.CONTENTTYPE_SET;
    }
    get description() {
        return 'Updates existing content type';
    }
    allowUnknownOptions() {
        return true;
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: `${args.options.webUrl}/_api/Web`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json',
                data: this.getRequestPayload(args.options)
            };
            if (args.options.listId) {
                requestOptions.url += `/Lists/GetById('${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')`;
            }
            else if (args.options.listTitle) {
                requestOptions.url += `/Lists/GetByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')`;
            }
            else if (args.options.listUrl) {
                requestOptions.url += `/GetList('${formatting_1.formatting.encodeQueryParameter(urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl))}')`;
            }
            requestOptions.url += '/ContentTypes';
            try {
                const contentTypeId = yield this.getContentTypeId(args.options);
                requestOptions.url += `/GetById('${formatting_1.formatting.encodeQueryParameter(contentTypeId)}')`;
                yield request_1.default.patch(requestOptions);
            }
            catch (err) {
                this.handleRejectedPromise(err);
            }
        });
    }
    getContentTypeId(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.id) {
                return options.id;
            }
            const requestOptions = {
                url: `${options.webUrl}/_api/Web`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            if (options.listId) {
                requestOptions.url += `/Lists/GetById('${formatting_1.formatting.encodeQueryParameter(options.listId)}')`;
            }
            else if (options.listTitle) {
                requestOptions.url += `/Lists/GetByTitle('${formatting_1.formatting.encodeQueryParameter(options.listTitle)}')`;
            }
            else if (options.listUrl) {
                requestOptions.url += `/GetList('${formatting_1.formatting.encodeQueryParameter(urlUtil_1.urlUtil.getServerRelativePath(options.webUrl, options.listUrl))}')`;
            }
            requestOptions.url += `/ContentTypes?$filter=Name eq '${formatting_1.formatting.encodeQueryParameter(options.name)}'&$select=Id`;
            const res = yield request_1.default.get(requestOptions);
            if (res.value.length === 0) {
                throw `The specified content type '${options.name}' does not exist`;
            }
            return res.value[0].Id.StringValue;
        });
    }
    getRequestPayload(options) {
        const excludeOptions = [
            'webUrl',
            'id',
            'name',
            'listTitle',
            'listId',
            'listUrl',
            'query',
            'debug',
            'verbose',
            'output'
        ];
        const payload = Object.keys(options)
            .filter(key => excludeOptions.indexOf(key) === -1)
            .reduce((object, key) => {
            object[key] = options[key];
            return object;
        }, {});
        return payload;
    }
}
_SpoContentTypeSetCommand_instances = new WeakSet(), _SpoContentTypeSetCommand_initTelemetry = function _SpoContentTypeSetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listId: typeof args.options.listId !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined'
        });
    });
}, _SpoContentTypeSetCommand_initOptions = function _SpoContentTypeSetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '--listTitle [listTitle]'
    }, {
        option: '--listId [listId]'
    }, {
        option: '--listUrl [listUrl]'
    });
}, _SpoContentTypeSetCommand_initValidators = function _SpoContentTypeSetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `'${args.options.listId}' is not a valid GUID.`;
        }
        if ((args.options.listId && (args.options.listTitle || args.options.listUrl)) || (args.options.listTitle && args.options.listUrl)) {
            return `Specify either listTitle, listId or listUrl.`;
        }
        return true;
    }));
}, _SpoContentTypeSetCommand_initTypes = function _SpoContentTypeSetCommand_initTypes() {
    this.types.string.push('id', 'i');
}, _SpoContentTypeSetCommand_initOptionSets = function _SpoContentTypeSetCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
};
module.exports = new SpoContentTypeSetCommand();
//# sourceMappingURL=contenttype-set.js.map