"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoContentTypeAddCommand_instances, _SpoContentTypeAddCommand_initTelemetry, _SpoContentTypeAddCommand_initOptions, _SpoContentTypeAddCommand_initValidators, _SpoContentTypeAddCommand_initTypes;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const spo_1 = require("../../../../utils/spo");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
const SpoContentTypeGetCommand = require("./contenttype-get");
class SpoContentTypeAddCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoContentTypeAddCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoContentTypeAddCommand_instances, "m", _SpoContentTypeAddCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeAddCommand_instances, "m", _SpoContentTypeAddCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeAddCommand_instances, "m", _SpoContentTypeAddCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeAddCommand_instances, "m", _SpoContentTypeAddCommand_initTypes).call(this);
    }
    get name() {
        return commands_1.default.CONTENTTYPE_ADD;
    }
    get description() {
        return 'Adds a new list or site content type';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let parentInfo = '';
                if (!args.options.listId && !args.options.listTitle && !args.options.listUrl) {
                    parentInfo = '<Property Id="5" ParentId="3" Name="Web" /><StaticProperty Id="3" TypeId="{3747adcd-a3c3-41b9-bfab-4a64dd2f1e0a}" Name="Current" />';
                }
                else {
                    parentInfo = yield this.getParentInfo(args.options, logger);
                }
                if (this.verbose) {
                    logger.logToStderr(`Retrieving request digest...`);
                }
                const reqDigest = yield spo_1.spo.getRequestDigest(args.options.webUrl);
                const description = args.options.description ?
                    `<Property Name="Description" Type="String">${formatting_1.formatting.escapeXml(args.options.description)}</Property>` :
                    '<Property Name="Description" Type="Null" />';
                const group = args.options.group ?
                    `<Property Name="Group" Type="String">${formatting_1.formatting.escapeXml(args.options.group)}</Property>` :
                    '<Property Name="Group" Type="Null" />';
                const requestOptions = {
                    url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': reqDigest.FormDigestValue
                    },
                    data: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="8" ObjectPathId="7" /><ObjectPath Id="10" ObjectPathId="9" /><ObjectIdentityQuery Id="11" ObjectPathId="9" /></Actions><ObjectPaths><Property Id="7" ParentId="5" Name="ContentTypes" /><Method Id="9" ParentId="7" Name="Add"><Parameters><Parameter TypeId="{168f3091-4554-4f14-8866-b20d48e45b54}">${description}${group}<Property Name="Id" Type="String">${formatting_1.formatting.escapeXml(args.options.id)}</Property><Property Name="Name" Type="String">${formatting_1.formatting.escapeXml(args.options.name)}</Property><Property Name="ParentContentType" Type="Null" /></Parameter></Parameters></Method>${parentInfo}</ObjectPaths></Request>`
                };
                const res = yield request_1.default.post(requestOptions);
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    throw response.ErrorInfo.ErrorMessage;
                }
                const options = {
                    webUrl: args.options.webUrl,
                    listTitle: args.options.listTitle,
                    listUrl: args.options.listUrl,
                    listId: args.options.listId,
                    id: args.options.id,
                    output: 'json',
                    debug: this.debug,
                    verbose: this.verbose
                };
                try {
                    const output = yield Cli_1.Cli.executeCommandWithOutput(SpoContentTypeGetCommand, { options: Object.assign(Object.assign({}, options), { _: [] }) });
                    if (this.debug) {
                        logger.logToStderr(output.stderr);
                    }
                    logger.log(JSON.parse(output.stdout));
                }
                catch (cmdError) {
                    throw cmdError.error;
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    getParentInfo(options, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            const siteId = yield this.getSiteId(options.webUrl, logger);
            const webId = yield this.getWebId(options.webUrl, logger);
            const listId = yield this.getListId(options, logger);
            return `<Identity Id="5" Name="1a48869e-c092-0000-1f61-81ec89809537|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${siteId}:web:${webId}:list:${listId}" />`;
        });
    }
    getSiteId(webUrl, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving site collection id...`);
            }
            const requestOptions = {
                url: `${webUrl}/_api/site?$select=Id`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            const siteResponse = yield request_1.default.get(requestOptions);
            return siteResponse.Id;
        });
    }
    getWebId(webUrl, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving web id...`);
            }
            const requestOptions = {
                url: `${webUrl}/_api/web?$select=Id`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            const webResponse = yield request_1.default.get(requestOptions);
            return webResponse.Id;
        });
    }
    getListId(options, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving list id...`);
            }
            let listId = '';
            if (options.listId) {
                return options.listId;
            }
            else if (options.listTitle) {
                const requestOptions = {
                    url: `${options.webUrl}/_api/web/lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(options.listTitle)}')?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const listResponse = yield request_1.default.get(requestOptions);
                listId = listResponse.Id;
            }
            else if (options.listUrl) {
                const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(options.webUrl, options.listUrl);
                const requestOptions = {
                    url: `${options.webUrl}/_api/web/GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    responseType: 'json'
                };
                const listResponse = yield request_1.default.get(requestOptions);
                listId = listResponse.Id;
            }
            return listId;
        });
    }
}
_SpoContentTypeAddCommand_instances = new WeakSet(), _SpoContentTypeAddCommand_initTelemetry = function _SpoContentTypeAddCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listTitle: typeof args.options.listTitle !== 'undefined',
            description: typeof args.options.description !== 'undefined',
            group: typeof args.options.group !== 'undefined'
        });
    });
}, _SpoContentTypeAddCommand_initOptions = function _SpoContentTypeAddCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --listTitle [listTitle]'
    }, {
        option: '--listId [listId]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-i, --id <id>'
    }, {
        option: '-n, --name <name>'
    }, {
        option: '-d, --description [description]'
    }, {
        option: '-g, --group [group]'
    });
}, _SpoContentTypeAddCommand_initValidators = function _SpoContentTypeAddCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.listId) {
            if (!validation_1.validation.isValidGuid(args.options.listId)) {
                return `${args.options.listId} is not a valid GUID`;
            }
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
}, _SpoContentTypeAddCommand_initTypes = function _SpoContentTypeAddCommand_initTypes() {
    this.types.string.push('id', 'i');
};
module.exports = new SpoContentTypeAddCommand();
//# sourceMappingURL=contenttype-add.js.map