"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoContentTypeRemoveCommand_instances, _SpoContentTypeRemoveCommand_initTelemetry, _SpoContentTypeRemoveCommand_initOptions, _SpoContentTypeRemoveCommand_initValidators, _SpoContentTypeRemoveCommand_initTypes, _SpoContentTypeRemoveCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoContentTypeRemoveCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoContentTypeRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoContentTypeRemoveCommand_instances, "m", _SpoContentTypeRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeRemoveCommand_instances, "m", _SpoContentTypeRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeRemoveCommand_instances, "m", _SpoContentTypeRemoveCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeRemoveCommand_instances, "m", _SpoContentTypeRemoveCommand_initTypes).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeRemoveCommand_instances, "m", _SpoContentTypeRemoveCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.CONTENTTYPE_REMOVE;
    }
    get description() {
        return 'Deletes site content type';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let contentTypeId = '';
            const contentTypeIdentifierLabel = args.options.id ?
                `with id ${args.options.id}` :
                `with name ${args.options.name}`;
            const removeContentType = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (this.debug) {
                        logger.logToStderr(`Retrieving information about the content type ${contentTypeIdentifierLabel}...`);
                    }
                    let contentTypeIdResult;
                    if (args.options.id) {
                        contentTypeIdResult = { "value": [{ "StringId": args.options.id }] };
                    }
                    else {
                        if (this.verbose) {
                            logger.logToStderr(`Looking up the ID of content type ${contentTypeIdentifierLabel}...`);
                        }
                        const requestOptions = {
                            url: `${args.options.webUrl}/_api/web/availableContentTypes?$filter=(Name eq '${encodeURIComponent(args.options.name)}')`,
                            headers: {
                                accept: 'application/json;odata=nometadata'
                            },
                            responseType: 'json'
                        };
                        contentTypeIdResult = yield request_1.default.get(requestOptions);
                    }
                    let res;
                    if (contentTypeIdResult &&
                        contentTypeIdResult.value &&
                        contentTypeIdResult.value.length > 0) {
                        contentTypeId = contentTypeIdResult.value[0].StringId;
                        //execute delete operation
                        const requestOptions = {
                            url: `${args.options.webUrl}/_api/web/contenttypes('${encodeURIComponent(contentTypeId)}')`,
                            headers: {
                                'X-HTTP-Method': 'DELETE',
                                'If-Match': '*',
                                'accept': 'application/json;odata=nometadata'
                            },
                            responseType: 'json'
                        };
                        res = yield request_1.default.post(requestOptions);
                    }
                    else {
                        res = { "odata.null": true };
                    }
                    if (res && res["odata.null"] === true) {
                        throw `Content type not found`;
                    }
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeContentType();
            }
            else {
                const result = yield Cli_1.Cli.prompt({ type: 'confirm', name: 'continue', default: false, message: `Are you sure you want to remove the content type ${args.options.id || args.options.name}?` });
                if (result.continue) {
                    yield removeContentType();
                }
            }
        });
    }
}
_SpoContentTypeRemoveCommand_instances = new WeakSet(), _SpoContentTypeRemoveCommand_initTelemetry = function _SpoContentTypeRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined',
            confirm: (!(!args.options.confirm)).toString()
        });
    });
}, _SpoContentTypeRemoveCommand_initOptions = function _SpoContentTypeRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    }, {
        option: '--confirm'
    });
}, _SpoContentTypeRemoveCommand_initValidators = function _SpoContentTypeRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () { return validation_1.validation.isValidSharePointUrl(args.options.webUrl); }));
}, _SpoContentTypeRemoveCommand_initTypes = function _SpoContentTypeRemoveCommand_initTypes() {
    this.types.string.push('id', 'i');
}, _SpoContentTypeRemoveCommand_initOptionSets = function _SpoContentTypeRemoveCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
};
module.exports = new SpoContentTypeRemoveCommand();
//# sourceMappingURL=contenttype-remove.js.map