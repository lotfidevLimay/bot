"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoContentTypeGetCommand_instances, _SpoContentTypeGetCommand_initTelemetry, _SpoContentTypeGetCommand_initOptions, _SpoContentTypeGetCommand_initValidators, _SpoContentTypeGetCommand_initTypes, _SpoContentTypeGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const formatting_1 = require("../../../../utils/formatting");
const urlUtil_1 = require("../../../../utils/urlUtil");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoContentTypeGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoContentTypeGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoContentTypeGetCommand_instances, "m", _SpoContentTypeGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeGetCommand_instances, "m", _SpoContentTypeGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeGetCommand_instances, "m", _SpoContentTypeGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeGetCommand_instances, "m", _SpoContentTypeGetCommand_initTypes).call(this);
        __classPrivateFieldGet(this, _SpoContentTypeGetCommand_instances, "m", _SpoContentTypeGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.CONTENTTYPE_GET;
    }
    get description() {
        return 'Retrieves information about the specified list or site content type';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let requestUrl = `${args.options.webUrl}/_api/web`;
            if (args.options.listId) {
                requestUrl += `/lists(guid'${formatting_1.formatting.encodeQueryParameter(args.options.listId)}')`;
            }
            else if (args.options.listTitle) {
                requestUrl += `/lists/getByTitle('${formatting_1.formatting.encodeQueryParameter(args.options.listTitle)}')`;
            }
            else if (args.options.listUrl) {
                const listServerRelativeUrl = urlUtil_1.urlUtil.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                requestUrl += `/GetList('${formatting_1.formatting.encodeQueryParameter(listServerRelativeUrl)}')`;
            }
            requestUrl += "/contenttypes";
            if (args.options.id) {
                requestUrl += `('${encodeURIComponent(args.options.id)}')`;
            }
            else if (args.options.name) {
                requestUrl += `?$filter=Name eq '${encodeURIComponent(args.options.name)}'`;
            }
            const requestOptions = {
                url: requestUrl,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                let res = yield request_1.default.get(requestOptions);
                let errorMessage = '';
                if (args.options.name) {
                    if (res.value.length === 0) {
                        errorMessage = `Content type with name ${args.options.name} not found`;
                    }
                    else {
                        res = res.value[0];
                    }
                }
                if (args.options.id && res['odata.null'] === true) {
                    errorMessage = `Content type with ID ${args.options.id} not found`;
                }
                if (errorMessage) {
                    throw errorMessage;
                }
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoContentTypeGetCommand_instances = new WeakSet(), _SpoContentTypeGetCommand_initTelemetry = function _SpoContentTypeGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            listId: typeof args.options.listId !== 'undefined',
            listTitle: typeof args.options.listTitle !== 'undefined',
            listUrl: typeof args.options.listUrl !== 'undefined',
            id: typeof args.options.id !== 'undefined',
            name: typeof args.options.name !== 'undefined'
        });
    });
}, _SpoContentTypeGetCommand_initOptions = function _SpoContentTypeGetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-l, --listTitle [listTitle]'
    }, {
        option: '--listId [listId]'
    }, {
        option: '--listUrl [listUrl]'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '-n, --name [name]'
    });
}, _SpoContentTypeGetCommand_initValidators = function _SpoContentTypeGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const isValidSharePointUrl = validation_1.validation.isValidSharePointUrl(args.options.webUrl);
        if (isValidSharePointUrl !== true) {
            return isValidSharePointUrl;
        }
        if (args.options.listId && !validation_1.validation.isValidGuid(args.options.listId)) {
            return `${args.options.listId} is not a valid GUID`;
        }
        return true;
    }));
}, _SpoContentTypeGetCommand_initTypes = function _SpoContentTypeGetCommand_initTypes() {
    this.types.string.push('id', 'i');
}, _SpoContentTypeGetCommand_initOptionSets = function _SpoContentTypeGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'name']);
};
module.exports = new SpoContentTypeGetCommand();
//# sourceMappingURL=contenttype-get.js.map