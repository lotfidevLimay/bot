"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoUserGetCommand_instances, _SpoUserGetCommand_initTelemetry, _SpoUserGetCommand_initOptions, _SpoUserGetCommand_initValidators, _SpoUserGetCommand_initOptionSets;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const SpoCommand_1 = require("../../../base/SpoCommand");
const commands_1 = require("../../commands");
class SpoUserGetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoUserGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoUserGetCommand_instances, "m", _SpoUserGetCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoUserGetCommand_instances, "m", _SpoUserGetCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoUserGetCommand_instances, "m", _SpoUserGetCommand_initValidators).call(this);
        __classPrivateFieldGet(this, _SpoUserGetCommand_instances, "m", _SpoUserGetCommand_initOptionSets).call(this);
    }
    get name() {
        return commands_1.default.USER_GET;
    }
    get description() {
        return 'Gets a site user within specific web';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving information for list in site at ${args.options.webUrl}...`);
            }
            let requestUrl = '';
            if (args.options.id) {
                requestUrl = `${args.options.webUrl}/_api/web/siteusers/GetById('${encodeURIComponent(args.options.id)}')`;
            }
            else if (args.options.email) {
                requestUrl = `${args.options.webUrl}/_api/web/siteusers/GetByEmail('${encodeURIComponent(args.options.email)}')`;
            }
            else if (args.options.loginName) {
                requestUrl = `${args.options.webUrl}/_api/web/siteusers/GetByLoginName('${encodeURIComponent(args.options.loginName)}')`;
            }
            const requestOptions = {
                url: requestUrl,
                method: 'GET',
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            try {
                const userInstance = yield request_1.default.get(requestOptions);
                logger.log(userInstance);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_SpoUserGetCommand_instances = new WeakSet(), _SpoUserGetCommand_initTelemetry = function _SpoUserGetCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            id: (!(!args.options.id)).toString(),
            email: (!(!args.options.email)).toString(),
            loginName: (!(!args.options.loginName)).toString()
        });
    });
}, _SpoUserGetCommand_initOptions = function _SpoUserGetCommand_initOptions() {
    this.options.unshift({
        option: '-u, --webUrl <webUrl>'
    }, {
        option: '-i, --id [id]'
    }, {
        option: '--email [email]'
    }, {
        option: '--loginName [loginName]'
    });
}, _SpoUserGetCommand_initValidators = function _SpoUserGetCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.id &&
            typeof args.options.id !== 'number') {
            return `Specified id ${args.options.id} is not a number`;
        }
        return validation_1.validation.isValidSharePointUrl(args.options.webUrl);
    }));
}, _SpoUserGetCommand_initOptionSets = function _SpoUserGetCommand_initOptionSets() {
    this.optionSets.push(['id', 'email', 'loginName']);
};
module.exports = new SpoUserGetCommand();
//# sourceMappingURL=user-get.js.map