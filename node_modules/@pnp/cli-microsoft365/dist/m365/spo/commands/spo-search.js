"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpoSearchCommand_instances, _SpoSearchCommand_initTelemetry, _SpoSearchCommand_initOptions, _SpoSearchCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const request_1 = require("../../../request");
const spo_1 = require("../../../utils/spo");
const validation_1 = require("../../../utils/validation");
const SpoCommand_1 = require("../../base/SpoCommand");
const commands_1 = require("../commands");
class SpoSearchCommand extends SpoCommand_1.default {
    constructor() {
        super();
        _SpoSearchCommand_instances.add(this);
        __classPrivateFieldGet(this, _SpoSearchCommand_instances, "m", _SpoSearchCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _SpoSearchCommand_instances, "m", _SpoSearchCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _SpoSearchCommand_instances, "m", _SpoSearchCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.SEARCH;
    }
    get description() {
        return 'Executes a search query';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let webUrl = '';
            try {
                if (args.options.webUrl) {
                    webUrl = args.options.webUrl;
                }
                else {
                    webUrl = yield spo_1.spo.getSpoUrl(logger, this.debug);
                }
                if (this.verbose) {
                    logger.logToStderr(`Executing search query '${args.options.queryText}' on site at ${webUrl}...`);
                }
                const startRow = args.options.startRow ? args.options.startRow : 0;
                const results = yield this.executeSearchQuery(logger, args, webUrl, [], startRow);
                this.printResults(logger, args, results);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
    executeSearchQuery(logger, args, webUrl, resultSet, startRow) {
        return (() => {
            const requestUrl = this.getRequestUrl(webUrl, logger, args, startRow);
            const requestOptions = {
                url: requestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                responseType: 'json'
            };
            return request_1.default.get(requestOptions);
        })()
            .then((searchResult) => {
            resultSet.push(searchResult);
            return searchResult;
        })
            .then((searchResult) => {
            if (args.options.allResults) {
                if (startRow + searchResult.PrimaryQueryResult.RelevantResults.RowCount < searchResult.PrimaryQueryResult.RelevantResults.TotalRows) {
                    const nextStartRow = startRow + searchResult.PrimaryQueryResult.RelevantResults.RowCount;
                    return this.executeSearchQuery(logger, args, webUrl, resultSet, nextStartRow);
                }
            }
            return new Promise((resolve) => { resolve(resultSet); });
        })
            .then(() => resultSet);
    }
    getRequestUrl(webUrl, logger, args, startRow) {
        // get the list of selected properties
        const selectPropertiesArray = this.getSelectPropertiesArray(args);
        // transform arg data to query string parameters
        const propertySelectRequestString = `&selectproperties='${encodeURIComponent(selectPropertiesArray.join(","))}'`;
        const startRowRequestString = `&startrow=${startRow ? startRow : 0}`;
        const rowLimitRequestString = args.options.rowLimit ? `&rowlimit=${args.options.rowLimit}` : ``;
        const sourceIdRequestString = args.options.sourceId ? `&sourceid='${args.options.sourceId}'` : ``;
        const trimDuplicatesRequestString = `&trimduplicates=${args.options.trimDuplicates ? args.options.trimDuplicates : "false"}`;
        const enableStemmingRequestString = `&enablestemming=${typeof (args.options.enableStemming) === 'undefined' ? "true" : args.options.enableStemming}`;
        const cultureRequestString = args.options.culture ? `&culture=${args.options.culture}` : ``;
        const refinementFiltersRequestString = args.options.refinementFilters ? `&refinementfilters='${args.options.refinementFilters}'` : ``;
        const queryTemplateRequestString = args.options.queryTemplate ? `&querytemplate='${args.options.queryTemplate}'` : ``;
        const sortListRequestString = args.options.sortList ? `&sortList='${encodeURIComponent(args.options.sortList)}'` : ``;
        const rankingModelIdRequestString = args.options.rankingModelId ? `&rankingmodelid='${args.options.rankingModelId}'` : ``;
        const propertiesRequestString = this.getPropertiesRequestString(args);
        const refinersRequestString = args.options.refiners ? `&refiners='${args.options.refiners}'` : ``;
        const hiddenConstraintsRequestString = args.options.hiddenConstraints ? `&hiddenconstraints='${args.options.hiddenConstraints}'` : ``;
        const clientTypeRequestString = args.options.clientType ? `&clienttype='${args.options.clientType}'` : ``;
        const enablePhoneticRequestString = typeof (args.options.enablePhonetic) === 'undefined' ? `` : `&enablephonetic=${args.options.enablePhonetic}`;
        const processBestBetsRequestString = typeof (args.options.processBestBets) === 'undefined' ? `` : `&processbestbets=${args.options.processBestBets}`;
        const enableQueryRulesRequestString = typeof (args.options.enableQueryRules) === 'undefined' ? `` : `&enablequeryrules=${args.options.enableQueryRules}`;
        const processPersonalFavoritesRequestString = typeof (args.options.processPersonalFavorites) === 'undefined' ? `` : `&processpersonalfavorites=${args.options.processPersonalFavorites}`;
        // construct single requestUrl
        const requestUrl = `${webUrl}/_api/search/query?querytext='${args.options.queryText}'`.concat(propertySelectRequestString, startRowRequestString, rowLimitRequestString, sourceIdRequestString, trimDuplicatesRequestString, enableStemmingRequestString, cultureRequestString, refinementFiltersRequestString, queryTemplateRequestString, sortListRequestString, rankingModelIdRequestString, propertiesRequestString, refinersRequestString, hiddenConstraintsRequestString, clientTypeRequestString, enablePhoneticRequestString, processBestBetsRequestString, enableQueryRulesRequestString, processPersonalFavoritesRequestString);
        if (this.debug) {
            logger.logToStderr(`RequestURL: ${requestUrl}`);
        }
        return requestUrl;
    }
    getPropertiesRequestString(args) {
        let properties = args.options.properties ? args.options.properties : '';
        if (args.options.sourceName) {
            if (properties && !properties.endsWith(",")) {
                properties += `,`;
            }
            properties += `SourceName:${args.options.sourceName},SourceLevel:SPSite`;
        }
        return properties ? `&properties='${properties}'` : ``;
    }
    getSelectPropertiesArray(args) {
        return args.options.selectProperties
            ? args.options.selectProperties.split(",")
            : ["Title", "OriginalPath"];
    }
    printResults(logger, args, results) {
        if (args.options.rawOutput) {
            logger.log(results);
        }
        else {
            logger.log(this.getParsedOutput(args, results));
        }
        if (!args.options.output || args.options.output === 'text') {
            logger.log("# Rows: " + results[results.length - 1].PrimaryQueryResult.RelevantResults.TotalRows);
            logger.log("# Rows (Including duplicates): " + results[results.length - 1].PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates);
            logger.log("Elapsed Time: " + this.getElapsedTime(results));
        }
    }
    getElapsedTime(results) {
        let totalTime = 0;
        results.forEach(result => {
            totalTime += result.ElapsedTime;
        });
        return totalTime;
    }
    getRowsFromSearchResults(results) {
        const searchResultRows = [];
        for (let i = 0; i < results.length; i++) {
            searchResultRows.push(...results[i].PrimaryQueryResult.RelevantResults.Table.Rows);
        }
        return searchResultRows;
    }
    getParsedOutput(args, results) {
        const searchResultRows = this.getRowsFromSearchResults(results);
        const selectProperties = this.getSelectPropertiesArray(args);
        const outputData = searchResultRows.map(row => {
            const rowOutput = {};
            row.Cells.map(cell => {
                if (selectProperties.filter(prop => { return cell.Key.toUpperCase() === prop.toUpperCase(); }).length > 0) {
                    rowOutput[cell.Key] = cell.Value;
                }
            });
            return rowOutput;
        });
        return outputData;
    }
}
_SpoSearchCommand_instances = new WeakSet(), _SpoSearchCommand_initTelemetry = function _SpoSearchCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            selectproperties: typeof args.options.selectProperties !== 'undefined',
            allResults: args.options.allResults,
            rowLimit: args.options.rowLimit,
            sourceId: typeof args.options.sourceId !== 'undefined',
            trimDuplicates: args.options.trimDuplicates,
            enableStemming: args.options.enableStemming,
            culture: args.options.culture,
            refinementFilters: typeof args.options.refinementFilters !== 'undefined',
            queryTemplate: typeof args.options.queryTemplate !== 'undefined',
            sortList: typeof args.options.sortList !== 'undefined',
            rankingModelId: typeof args.options.rankingModelId !== 'undefined',
            startRow: typeof args.options.startRow !== 'undefined',
            properties: typeof args.options.properties !== 'undefined',
            sourceName: typeof args.options.sourceName !== 'undefined',
            refiners: typeof args.options.refiners !== 'undefined',
            webUrl: typeof args.options.webUrl !== 'undefined',
            hiddenConstraints: typeof args.options.hiddenConstraints !== 'undefined',
            clientType: typeof args.options.clientType !== 'undefined',
            enablePhonetic: args.options.enablePhonetic,
            processBestBets: args.options.processBestBets,
            enableQueryRules: args.options.enableQueryRules,
            processPersonalFavorites: args.options.processPersonalFavorites,
            rawOutput: args.options.rawOutput
        });
    });
}, _SpoSearchCommand_initOptions = function _SpoSearchCommand_initOptions() {
    this.options.unshift({
        option: '-q, --queryText <queryText>'
    }, {
        option: '-p, --selectProperties [selectProperties]'
    }, {
        option: '-u, --webUrl [webUrl]'
    }, {
        option: '--allResults'
    }, {
        option: '--rowLimit [rowLimit]'
    }, {
        option: '--sourceId [sourceId]'
    }, {
        option: '--trimDuplicates'
    }, {
        option: '--enableStemming'
    }, {
        option: '--culture [culture]'
    }, {
        option: '--refinementFilters [refinementFilters]'
    }, {
        option: '--queryTemplate [queryTemplate]'
    }, {
        option: '--sortList [sortList]'
    }, {
        option: '--rankingModelId [rankingModelId]'
    }, {
        option: '--startRow [startRow]'
    }, {
        option: '--properties [properties]'
    }, {
        option: '--sourceName [sourceName]'
    }, {
        option: '--refiners [refiners]'
    }, {
        option: '--hiddenConstraints [hiddenConstraints]'
    }, {
        option: '--clientType [clientType]'
    }, {
        option: '--enablePhonetic'
    }, {
        option: '--processBestBets'
    }, {
        option: '--enableQueryRules'
    }, {
        option: '--processPersonalFavorites'
    }, {
        option: '--rawOutput'
    });
}, _SpoSearchCommand_initValidators = function _SpoSearchCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.sourceId && !validation_1.validation.isValidGuid(args.options.sourceId)) {
            return `${args.options.sourceId} is not a valid GUID`;
        }
        if (args.options.rankingModelId && !validation_1.validation.isValidGuid(args.options.rankingModelId)) {
            return `${args.options.rankingModelId} is not a valid GUID`;
        }
        if (args.options.sortList && !/^([a-z0-9_]+:(ascending|descending))(,([a-z0-9_]+:(ascending|descending)))*$/gi.test(args.options.sortList)) {
            return `sortlist parameter value '${args.options.sortList}' does not match the required pattern (=comma-separated list of '<property>:(ascending|descending)'-pattern)`;
        }
        if (args.options.rowLimit && !(0, util_1.isNumber)(args.options.rowLimit)) {
            return `${args.options.rowLimit} is not a valid number`;
        }
        if (args.options.startRow && !(0, util_1.isNumber)(args.options.startRow)) {
            return `${args.options.startRow} is not a valid number`;
        }
        if (args.options.culture && !(0, util_1.isNumber)(args.options.culture)) {
            return `${args.options.culture} is not a valid number`;
        }
        return true;
    }));
};
module.exports = new SpoSearchCommand();
//# sourceMappingURL=spo-search.js.map