"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DateAndPeriodBasedReport_instances, _DateAndPeriodBasedReport_initTelemetry, _DateAndPeriodBasedReport_initOptions, _DateAndPeriodBasedReport_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const PeriodBasedReport_1 = require("./PeriodBasedReport");
class DateAndPeriodBasedReport extends PeriodBasedReport_1.default {
    constructor() {
        super();
        _DateAndPeriodBasedReport_instances.add(this);
        __classPrivateFieldGet(this, _DateAndPeriodBasedReport_instances, "m", _DateAndPeriodBasedReport_initTelemetry).call(this);
        __classPrivateFieldGet(this, _DateAndPeriodBasedReport_instances, "m", _DateAndPeriodBasedReport_initOptions).call(this);
        __classPrivateFieldGet(this, _DateAndPeriodBasedReport_instances, "m", _DateAndPeriodBasedReport_initValidators).call(this);
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const periodParameter = args.options.period ? `${this.usageEndpoint}(period='${encodeURIComponent(args.options.period)}')` : '';
            const dateParameter = args.options.date ? `${this.usageEndpoint}(date=${encodeURIComponent(args.options.date)})` : '';
            const endpoint = `${this.resource}/v1.0/reports/${(args.options.period ? periodParameter : dateParameter)}`;
            yield this.executeReport(endpoint, logger, args.options.output);
        });
    }
}
exports.default = DateAndPeriodBasedReport;
_DateAndPeriodBasedReport_instances = new WeakSet(), _DateAndPeriodBasedReport_initTelemetry = function _DateAndPeriodBasedReport_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            period: args.options.period,
            date: typeof args.options.date !== 'undefined'
        });
    });
}, _DateAndPeriodBasedReport_initOptions = function _DateAndPeriodBasedReport_initOptions() {
    this.options.unshift({ option: '-d, --date [date]' });
    this.options.forEach(option => {
        option.option = option.option.replace('-p, --period <period>', '-p, --period [period]');
    });
}, _DateAndPeriodBasedReport_initValidators = function _DateAndPeriodBasedReport_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!args.options.period && !args.options.date) {
            return 'Specify period or date, one is required.';
        }
        if (args.options.period && args.options.date) {
            return 'Specify period or date but not both.';
        }
        if (args.options.date && !(args.options.date.match(/^\d{4}-\d{2}-\d{2}$/))) {
            return `${args.options.date} is not a valid date. The supported date format is YYYY-MM-DD`;
        }
        return true;
    }));
};
//# sourceMappingURL=DateAndPeriodBasedReport.js.map