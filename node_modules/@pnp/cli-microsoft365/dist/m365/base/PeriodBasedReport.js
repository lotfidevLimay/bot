"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PeriodBasedReport_instances, _PeriodBasedReport_initOptions, _PeriodBasedReport_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../request");
const GraphCommand_1 = require("./GraphCommand");
class PeriodBasedReport extends GraphCommand_1.default {
    constructor() {
        super();
        _PeriodBasedReport_instances.add(this);
        __classPrivateFieldGet(this, _PeriodBasedReport_instances, "m", _PeriodBasedReport_initOptions).call(this);
        __classPrivateFieldGet(this, _PeriodBasedReport_instances, "m", _PeriodBasedReport_initValidators).call(this);
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = `${this.resource}/v1.0/reports/${this.usageEndpoint}(period='${encodeURIComponent(args.options.period)}')`;
            yield this.executeReport(endpoint, logger, args.options.output);
        });
    }
    executeReport(endPoint, logger, output) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                url: endPoint,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                responseType: 'json'
            };
            let res;
            try {
                res = yield request_1.default.get(requestOptions);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
                return;
            }
            let content = '';
            const cleanResponse = this.removeEmptyLines(res);
            if (output && output.toLowerCase() === 'json') {
                const reportData = this.getReport(cleanResponse);
                content = reportData;
            }
            else {
                content = cleanResponse;
            }
            logger.log(content);
        });
    }
    removeEmptyLines(input) {
        const rows = input.split('\n');
        const cleanRows = rows.filter(Boolean);
        return cleanRows.join('\n');
    }
    getReport(res) {
        const rows = res.split('\n');
        const jsonObj = [];
        const headers = rows[0].split(',');
        for (let i = 1; i < rows.length; i++) {
            const data = rows[i].split(',');
            const obj = {};
            for (let j = 0; j < data.length; j++) {
                obj[headers[j].trim()] = data[j].trim();
            }
            jsonObj.push(obj);
        }
        return jsonObj;
    }
    validatePeriod(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const period = args.options.period;
            if (period &&
                ['D7', 'D30', 'D90', 'D180'].indexOf(period) < 0) {
                return `${period} is not a valid period type. The supported values are D7|D30|D90|D180`;
            }
            return true;
        });
    }
}
exports.default = PeriodBasedReport;
_PeriodBasedReport_instances = new WeakSet(), _PeriodBasedReport_initOptions = function _PeriodBasedReport_initOptions() {
    this.options.push({
        option: '-p, --period <period>',
        autocomplete: ['D7', 'D30', 'D90', 'D180']
    });
}, _PeriodBasedReport_initValidators = function _PeriodBasedReport_initValidators() {
    this.validators.push((args) => this.validatePeriod(args));
};
//# sourceMappingURL=PeriodBasedReport.js.map