"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AppCommand_instances, _AppCommand_initOptions, _AppCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const Cli_1 = require("../../cli/Cli");
const Command_1 = require("../../Command");
const validation_1 = require("../../utils/validation");
class AppCommand extends Command_1.default {
    constructor() {
        super();
        _AppCommand_instances.add(this);
        __classPrivateFieldGet(this, _AppCommand_instances, "m", _AppCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _AppCommand_instances, "m", _AppCommand_initValidators).call(this);
    }
    get resource() {
        return 'https://graph.microsoft.com';
    }
    action(logger, args) {
        const _super = Object.create(null, {
            action: { get: () => super.action }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const m365rcJsonPath = '.m365rc.json';
            if (!fs.existsSync(m365rcJsonPath)) {
                throw new Command_1.CommandError(`Could not find file: ${m365rcJsonPath}`);
            }
            try {
                const m365rcJsonContents = fs.readFileSync(m365rcJsonPath, 'utf8');
                if (!m365rcJsonContents) {
                    throw new Command_1.CommandError(`File ${m365rcJsonPath} is empty`);
                }
                this.m365rcJson = JSON.parse(m365rcJsonContents);
            }
            catch (err) {
                if (err instanceof Command_1.CommandError) {
                    throw err;
                }
                throw new Command_1.CommandError(`Could not parse file: ${m365rcJsonPath}`);
            }
            if (!this.m365rcJson.apps ||
                this.m365rcJson.apps.length === 0) {
                throw new Command_1.CommandError(`No Azure AD apps found in ${m365rcJsonPath}`);
            }
            if (args.options.appId) {
                if (!this.m365rcJson.apps.some(app => app.appId === args.options.appId)) {
                    throw new Command_1.CommandError(`App ${args.options.appId} not found in ${m365rcJsonPath}`);
                }
                this.appId = args.options.appId;
                return _super.action.call(this, logger, args);
            }
            if (this.m365rcJson.apps.length === 1) {
                this.appId = this.m365rcJson.apps[0].appId;
                return _super.action.call(this, logger, args);
            }
            if (this.m365rcJson.apps.length > 1) {
                const result = yield Cli_1.Cli.prompt({
                    message: `Multiple Azure AD apps found in ${m365rcJsonPath}. Which app would you like to use?`,
                    type: 'list',
                    choices: this.m365rcJson.apps.map((app, i) => {
                        return {
                            name: `${app.name} (${app.appId})`,
                            value: i
                        };
                    }),
                    default: 0,
                    name: 'appIdIndex'
                });
                this.appId = this.m365rcJson.apps[result.appIdIndex].appId;
                yield _super.action.call(this, logger, args);
            }
        });
    }
}
exports.default = AppCommand;
_AppCommand_instances = new WeakSet(), _AppCommand_initOptions = function _AppCommand_initOptions() {
    this.options.unshift({ option: '--appId [appId]' });
}, _AppCommand_initValidators = function _AppCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (args.options.appId && !validation_1.validation.isValidGuid(args.options.appId)) {
            return `${args.options.appId} is not a valid GUID`;
        }
        return true;
    }));
};
//# sourceMappingURL=AppCommand.js.map