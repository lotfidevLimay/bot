"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FlowRemoveCommand_instances, _FlowRemoveCommand_initTelemetry, _FlowRemoveCommand_initOptions, _FlowRemoveCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const Cli_1 = require("../../../cli/Cli");
const request_1 = require("../../../request");
const validation_1 = require("../../../utils/validation");
const AzmgmtCommand_1 = require("../../base/AzmgmtCommand");
const commands_1 = require("../commands");
class FlowRemoveCommand extends AzmgmtCommand_1.default {
    constructor() {
        super();
        _FlowRemoveCommand_instances.add(this);
        __classPrivateFieldGet(this, _FlowRemoveCommand_instances, "m", _FlowRemoveCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _FlowRemoveCommand_instances, "m", _FlowRemoveCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _FlowRemoveCommand_instances, "m", _FlowRemoveCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.REMOVE;
    }
    get description() {
        return 'Removes the specified Microsoft Flow';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Removing Microsoft Flow ${args.options.name}...`);
            }
            const removeFlow = () => __awaiter(this, void 0, void 0, function* () {
                const requestOptions = {
                    url: `${this.resource}providers/Microsoft.ProcessSimple/${args.options.asAdmin ? 'scopes/admin/' : ''}environments/${encodeURIComponent(args.options.environment)}/flows/${encodeURIComponent(args.options.name)}?api-version=2016-11-01`,
                    resolveWithFullResponse: true,
                    headers: {
                        accept: 'application/json'
                    },
                    responseType: 'json'
                };
                try {
                    const rawRes = yield request_1.default.delete(requestOptions);
                    // handle 204 and throw error message to cmd when invalid flow id is passed
                    // https://github.com/pnp/cli-microsoft365/issues/1063#issuecomment-537218957
                    if (rawRes.statusCode === 204) {
                        logger.log(chalk.red(`Error: Resource '${args.options.name}' does not exist in environment '${args.options.environment}'`));
                    }
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield removeFlow();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to remove the Microsoft Flow ${args.options.name}?`
                });
                if (result.continue) {
                    yield removeFlow();
                }
            }
        });
    }
}
_FlowRemoveCommand_instances = new WeakSet(), _FlowRemoveCommand_initTelemetry = function _FlowRemoveCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            asAdmin: typeof args.options.asAdmin !== 'undefined',
            confirm: typeof args.options.confirm !== 'undefined'
        });
    });
}, _FlowRemoveCommand_initOptions = function _FlowRemoveCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name <name>'
    }, {
        option: '-e, --environment <environment>'
    }, {
        option: '--asAdmin'
    }, {
        option: '--confirm'
    });
}, _FlowRemoveCommand_initValidators = function _FlowRemoveCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.name)) {
            return `${args.options.name} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new FlowRemoveCommand();
//# sourceMappingURL=flow-remove.js.map