"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FlowRunCancelCommand_instances, _FlowRunCancelCommand_initOptions, _FlowRunCancelCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const AzmgmtCommand_1 = require("../../../base/AzmgmtCommand");
const commands_1 = require("../../commands");
class FlowRunCancelCommand extends AzmgmtCommand_1.default {
    constructor() {
        super();
        _FlowRunCancelCommand_instances.add(this);
        __classPrivateFieldGet(this, _FlowRunCancelCommand_instances, "m", _FlowRunCancelCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _FlowRunCancelCommand_instances, "m", _FlowRunCancelCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.RUN_CANCEL;
    }
    get description() {
        return 'Cancels a specific run of the specified Microsoft Flow';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.log(`Cancelling run ${args.options.name} of Microsoft Flow ${args.options.flow}...`);
            }
            const cancelFlow = () => __awaiter(this, void 0, void 0, function* () {
                const requestOptions = {
                    url: `${this.resource}providers/Microsoft.ProcessSimple/environments/${encodeURIComponent(args.options.environment)}/flows/${encodeURIComponent(args.options.flow)}/runs/${encodeURIComponent(args.options.name)}/cancel?api-version=2016-11-01`,
                    headers: {
                        accept: 'application/json'
                    },
                    responseType: 'json'
                };
                try {
                    yield request_1.default.post(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield cancelFlow();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to cancel the flow run ${args.options.name}?`
                });
                if (result.continue) {
                    yield cancelFlow();
                }
            }
        });
    }
}
_FlowRunCancelCommand_instances = new WeakSet(), _FlowRunCancelCommand_initOptions = function _FlowRunCancelCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name <name>'
    }, {
        option: '-f, --flow <flow>'
    }, {
        option: '-e, --environment <environment>'
    }, {
        option: '--confirm'
    });
}, _FlowRunCancelCommand_initValidators = function _FlowRunCancelCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.flow)) {
            return `${args.options.flow} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new FlowRunCancelCommand();
//# sourceMappingURL=run-cancel.js.map