"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FlowRunGetCommand_instances, _FlowRunGetCommand_initOptions;
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const AzmgmtCommand_1 = require("../../../base/AzmgmtCommand");
const commands_1 = require("../../commands");
class FlowRunGetCommand extends AzmgmtCommand_1.default {
    constructor() {
        super();
        _FlowRunGetCommand_instances.add(this);
        __classPrivateFieldGet(this, _FlowRunGetCommand_instances, "m", _FlowRunGetCommand_initOptions).call(this);
    }
    get name() {
        return commands_1.default.RUN_GET;
    }
    get description() {
        return 'Gets information about a specific run of the specified Microsoft Flow';
    }
    defaultProperties() {
        return ['name', 'startTime', 'endTime', 'status', 'triggerName'];
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Retrieving information about run ${args.options.name} of Microsoft Flow ${args.options.flow}...`);
            }
            const requestOptions = {
                url: `${this.resource}providers/Microsoft.ProcessSimple/environments/${encodeURIComponent(args.options.environment)}/flows/${encodeURIComponent(args.options.flow)}/runs/${encodeURIComponent(args.options.name)}?api-version=2016-11-01`,
                headers: {
                    accept: 'application/json'
                },
                responseType: 'json'
            };
            try {
                const res = yield request_1.default.get(requestOptions);
                res.startTime = res.properties.startTime;
                res.endTime = res.properties.endTime || '';
                res.status = res.properties.status;
                res.triggerName = res.properties.trigger.name;
                logger.log(res);
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_FlowRunGetCommand_instances = new WeakSet(), _FlowRunGetCommand_initOptions = function _FlowRunGetCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name <name>'
    }, {
        option: '-f, --flow <flow>'
    }, {
        option: '-e, --environment <environment>'
    });
};
module.exports = new FlowRunGetCommand();
//# sourceMappingURL=run-get.js.map