"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FlowRunResubmitCommand_instances, _FlowRunResubmitCommand_initTelemetry, _FlowRunResubmitCommand_initOptions, _FlowRunResubmitCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const Cli_1 = require("../../../../cli/Cli");
const request_1 = require("../../../../request");
const validation_1 = require("../../../../utils/validation");
const AzmgmtCommand_1 = require("../../../base/AzmgmtCommand");
const commands_1 = require("../../commands");
class FlowRunResubmitCommand extends AzmgmtCommand_1.default {
    constructor() {
        super();
        _FlowRunResubmitCommand_instances.add(this);
        __classPrivateFieldGet(this, _FlowRunResubmitCommand_instances, "m", _FlowRunResubmitCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _FlowRunResubmitCommand_instances, "m", _FlowRunResubmitCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _FlowRunResubmitCommand_instances, "m", _FlowRunResubmitCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.RUN_RESUBMIT;
    }
    get description() {
        return 'Resubmits a specific flow run for the specified Microsoft Flow';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.verbose) {
                logger.logToStderr(`Resubmitting run ${args.options.name} of Microsoft Flow ${args.options.flow}...`);
            }
            const resubmitFlow = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const triggerName = yield this.getTriggerName(args.options.environment, args.options.flow);
                    if (this.debug) {
                        logger.logToStderr(chalk.yellow(`Retrieved trigger: ${triggerName}`));
                    }
                    const requestOptions = {
                        url: `${this.resource}providers/Microsoft.ProcessSimple/environments/${encodeURIComponent(args.options.environment)}/flows/${encodeURIComponent(args.options.flow)}/triggers/${encodeURIComponent(triggerName)}/histories/${encodeURIComponent(args.options.name)}/resubmit?api-version=2016-11-01`,
                        headers: {
                            accept: 'application/json'
                        },
                        responseType: 'json'
                    };
                    yield request_1.default.post(requestOptions);
                }
                catch (err) {
                    this.handleRejectedODataJsonPromise(err);
                }
            });
            if (args.options.confirm) {
                yield resubmitFlow();
            }
            else {
                const result = yield Cli_1.Cli.prompt({
                    type: 'confirm',
                    name: 'continue',
                    default: false,
                    message: `Are you sure you want to resubmit the flow with run ${args.options.name}?`
                });
                if (result.continue) {
                    yield resubmitFlow();
                }
            }
        });
    }
    getTriggerName(environment, flow) {
        const requestOptions = {
            url: `${this.resource}providers/Microsoft.ProcessSimple/environments/${encodeURIComponent(environment)}/flows/${encodeURIComponent(flow)}/triggers?api-version=2016-11-01`,
            headers: {
                accept: 'application/json'
            },
            responseType: 'json'
        };
        return request_1.default
            .get(requestOptions)
            .then((res) => Promise.resolve(res.value[0].name));
    }
}
_FlowRunResubmitCommand_instances = new WeakSet(), _FlowRunResubmitCommand_initTelemetry = function _FlowRunResubmitCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            confirm: args.options.confirm
        });
    });
}, _FlowRunResubmitCommand_initOptions = function _FlowRunResubmitCommand_initOptions() {
    this.options.unshift({
        option: '-n, --name <name>'
    }, {
        option: '-f, --flow <flow>'
    }, {
        option: '-e, --environment <environment>'
    }, {
        option: '--confirm'
    });
}, _FlowRunResubmitCommand_initValidators = function _FlowRunResubmitCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        if (!validation_1.validation.isValidGuid(args.options.flow)) {
            return `${args.options.flow} is not a valid GUID`;
        }
        return true;
    }));
};
module.exports = new FlowRunResubmitCommand();
//# sourceMappingURL=run-resubmit.js.map