"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FlowExportCommand_instances, _FlowExportCommand_initTelemetry, _FlowExportCommand_initOptions, _FlowExportCommand_initValidators;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const request_1 = require("../../../request");
const validation_1 = require("../../../utils/validation");
const AzmgmtCommand_1 = require("../../base/AzmgmtCommand");
const commands_1 = require("../commands");
class FlowExportCommand extends AzmgmtCommand_1.default {
    constructor() {
        super();
        _FlowExportCommand_instances.add(this);
        __classPrivateFieldGet(this, _FlowExportCommand_instances, "m", _FlowExportCommand_initTelemetry).call(this);
        __classPrivateFieldGet(this, _FlowExportCommand_instances, "m", _FlowExportCommand_initOptions).call(this);
        __classPrivateFieldGet(this, _FlowExportCommand_instances, "m", _FlowExportCommand_initValidators).call(this);
    }
    get name() {
        return commands_1.default.EXPORT;
    }
    get description() {
        return 'Exports the specified Microsoft Flow as a file';
    }
    commandAction(logger, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let filenameFromApi = '';
            const formatArgument = args.options.format ? args.options.format.toLowerCase() : '';
            if (this.verbose) {
                logger.logToStderr(`Retrieving package resources for Microsoft Flow ${args.options.id}...`);
            }
            try {
                let res;
                if (formatArgument === 'json') {
                    if (this.debug) {
                        logger.logToStderr('format = json, skipping listing package resources step');
                    }
                }
                else {
                    const requestOptions = {
                        url: `https://api.bap.microsoft.com/providers/Microsoft.BusinessAppPlatform/environments/${encodeURIComponent(args.options.environment)}/listPackageResources?api-version=2016-11-01`,
                        headers: {
                            accept: 'application/json'
                        },
                        data: {
                            "baseResourceIds": [
                                `/providers/Microsoft.Flow/flows/${args.options.id}`
                            ]
                        },
                        responseType: 'json'
                    };
                    res = yield request_1.default.post(requestOptions);
                }
                if (typeof res !== 'undefined' && res.errors && res.errors.length && res.errors.length > 0) {
                    throw res.errors[0].message;
                }
                if (this.verbose) {
                    logger.logToStderr(`Initiating package export for Microsoft Flow ${args.options.id}...`);
                }
                let requestOptions = {
                    url: formatArgument === 'json' ?
                        `${this.resource}providers/Microsoft.ProcessSimple/environments/${encodeURIComponent(args.options.environment)}/flows/${encodeURIComponent(args.options.id)}?api-version=2016-11-01`
                        : `https://api.bap.microsoft.com/providers/Microsoft.BusinessAppPlatform/environments/${encodeURIComponent(args.options.environment)}/exportPackage?api-version=2016-11-01`,
                    headers: {
                        accept: 'application/json'
                    },
                    responseType: 'json'
                };
                if (formatArgument !== 'json') {
                    // adds suggestedCreationType property to all resources
                    // see https://github.com/pnp/cli-microsoft365/issues/1845
                    Object.keys(res.resources).forEach((key) => {
                        res.resources[key].type === 'Microsoft.Flow/flows'
                            ? res.resources[key].suggestedCreationType = 'Update'
                            : res.resources[key].suggestedCreationType = 'Existing';
                    });
                    requestOptions['data'] = {
                        "includedResourceIds": [
                            `/providers/Microsoft.Flow/flows/${args.options.id}`
                        ],
                        "details": {
                            "displayName": args.options.packageDisplayName,
                            "description": args.options.packageDescription,
                            "creator": args.options.packageCreatedBy,
                            "sourceEnvironment": args.options.packageSourceEnvironment
                        },
                        "resources": res.resources
                    };
                }
                res = formatArgument === 'json' ? yield request_1.default.get(requestOptions) : yield request_1.default.post(requestOptions);
                if (this.verbose) {
                    logger.logToStderr(`Getting file for Microsoft Flow ${args.options.id}...`);
                }
                const downloadFileUrl = formatArgument === 'json' ? '' : res.packageLink.value;
                const filenameRegEx = /([^\/]+\.zip)/i;
                filenameFromApi = formatArgument === 'json' ? `${res.properties.displayName}.json` : (filenameRegEx.exec(downloadFileUrl) || ['output.zip'])[0];
                // Replace all illegal characters from the file name
                const illegalCharsRegEx = /[\\\/:*?"<>|]/g;
                filenameFromApi = filenameFromApi.replace(illegalCharsRegEx, '_');
                if (this.debug) {
                    logger.logToStderr(`Filename from PowerApps API: ${filenameFromApi}`);
                    logger.logToStderr('');
                }
                requestOptions = {
                    url: formatArgument === 'json' ?
                        `${this.resource}providers/Microsoft.ProcessSimple/environments/${encodeURIComponent(args.options.environment)}/flows/${encodeURIComponent(args.options.id)}/exportToARMTemplate?api-version=2016-11-01`
                        : downloadFileUrl,
                    // Set responseType to arraybuffer, otherwise binary data will be encoded
                    // to utf8 and binary data is corrupt
                    responseType: 'arraybuffer',
                    headers: formatArgument === 'json' ?
                        {
                            accept: 'application/json'
                        } : {
                        'x-anonymous': true
                    }
                };
                const file = formatArgument === 'json' ?
                    yield request_1.default.post(requestOptions)
                    : yield request_1.default.get(requestOptions);
                const path = args.options.path ? args.options.path : `./${filenameFromApi}`;
                fs.writeFileSync(path, file, 'binary');
                if (!args.options.path || this.verbose) {
                    if (this.verbose) {
                        logger.logToStderr(`File saved to path '${path}'`);
                    }
                    else {
                        logger.log(path);
                    }
                }
            }
            catch (err) {
                this.handleRejectedODataJsonPromise(err);
            }
        });
    }
}
_FlowExportCommand_instances = new WeakSet(), _FlowExportCommand_initTelemetry = function _FlowExportCommand_initTelemetry() {
    this.telemetry.push((args) => {
        Object.assign(this.telemetryProperties, {
            packageDisplayName: typeof args.options.packageDisplayName !== 'undefined',
            packageDescription: typeof args.options.packageDescription !== 'undefined',
            packageCreatedBy: typeof args.options.packageCreatedBy !== 'undefined',
            packageSourceEnvironment: typeof args.options.packageSourceEnvironment !== 'undefined',
            format: args.options.format,
            path: typeof args.options.path !== 'undefined'
        });
    });
}, _FlowExportCommand_initOptions = function _FlowExportCommand_initOptions() {
    this.options.unshift({
        option: '-i, --id <id>'
    }, {
        option: '-e, --environment <environment>'
    }, {
        option: '-n, --packageDisplayName [packageDisplayName]'
    }, {
        option: '-d, --packageDescription [packageDescription]'
    }, {
        option: '-c, --packageCreatedBy [packageCreatedBy]'
    }, {
        option: '-s, --packageSourceEnvironment [packageSourceEnvironment]'
    }, {
        option: '-f, --format [format]'
    }, {
        option: '-p, --path [path]'
    });
}, _FlowExportCommand_initValidators = function _FlowExportCommand_initValidators() {
    this.validators.push((args) => __awaiter(this, void 0, void 0, function* () {
        const lowerCaseFormat = args.options.format ? args.options.format.toLowerCase() : '';
        if (!validation_1.validation.isValidGuid(args.options.id)) {
            return `${args.options.id} is not a valid GUID`;
        }
        if (args.options.format && (lowerCaseFormat !== 'json' && lowerCaseFormat !== 'zip')) {
            return 'Option format must be json or zip. Default is zip';
        }
        if (lowerCaseFormat === 'json') {
            if (args.options.packageCreatedBy) {
                return 'packageCreatedBy cannot be specified with output of json';
            }
            if (args.options.packageDescription) {
                return 'packageDescription cannot be specified with output of json';
            }
            if (args.options.packageDisplayName) {
                return 'packageDisplayName cannot be specified with output of json';
            }
            if (args.options.packageSourceEnvironment) {
                return 'packageSourceEnvironment cannot be specified with output of json';
            }
        }
        if (args.options.path && !fs.existsSync(path.dirname(args.options.path))) {
            return 'Specified path where to save the file does not exist';
        }
        return true;
    }));
};
module.exports = new FlowExportCommand();
//# sourceMappingURL=flow-export.js.map