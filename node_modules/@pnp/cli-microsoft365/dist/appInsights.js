"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const packageJSON = require('../package.json');
// disable automatic third-party instrumentation for Application Insights
// speeds up execution by preventing loading unnecessary dependencies
process.env.APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL = 'none';
// prevents tests from hanging
process.env.APPLICATION_INSIGHTS_NO_STATSBEAT = 'true';
const appInsights = require("applicationinsights");
const crypto = require("crypto");
const fs = require("fs");
const path = require("path");
const pid_1 = require("./utils/pid");
const config = appInsights.setup('6b908c80-d09f-4cf6-8274-e54349a0149a');
config.setInternalLogging(false, false);
// append -dev to the version number when ran locally
// to distinguish production and dev version of the CLI
// in the telemetry
const version = `${packageJSON.version}${fs.existsSync(path.join(__dirname, `..${path.sep}src`)) ? '-dev' : ''}`;
const env = process.env.CLIMICROSOFT365_ENV !== undefined ? process.env.CLIMICROSOFT365_ENV : '';
appInsights.defaultClient.commonProperties = {
    version: version,
    node: process.version,
    shell: pid_1.pid.getProcessName(process.ppid) || '',
    env: env,
    ci: Boolean(process.env.CI).toString()
};
appInsights.defaultClient.context.tags['ai.session.id'] = crypto.randomBytes(24).toString('base64');
appInsights.defaultClient.context.tags['ai.cloud.roleInstance'] = crypto.createHash('sha256').update(appInsights.defaultClient.context.tags['ai.cloud.roleInstance']).digest('hex');
delete appInsights.defaultClient.context.tags['ai.cloud.role'];
exports.default = appInsights.defaultClient;
//# sourceMappingURL=appInsights.js.map