"use strict";
// Copyright (c) Wictor WilÃ©n. All rights reserved.
// Licensed under the MIT license.
// SPDX-License-Identifier: MIT
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.webpackTasks = void 0;
const webpack_1 = __importDefault(require("webpack"));
const path_1 = __importDefault(require("path"));
const plugin_error_1 = __importDefault(require("plugin-error"));
const fancy_log_1 = __importDefault(require("fancy-log"));
const _1 = require(".");
const chalk_1 = __importDefault(require("chalk"));
/**
 * Defines the two webpack tasks
 */
const webpackTasks = (gulp, config) => {
    const webpackTask = (idx, callback) => {
        const webpackConfig = require(path_1.default.join(process.cwd(), "webpack.config"));
        (0, webpack_1.default)(webpackConfig[idx], (err, stats) => {
            if (err) {
                return callback(new plugin_error_1.default("webpack", err));
            }
            if (stats) {
                const jsonStats = stats.toJson();
                if (jsonStats) {
                    if (jsonStats.warnings && jsonStats.warnings.length > 0) {
                        chalk_1.default.yellow("[Webpack warnings]:" + chalk_1.default.reset());
                        // eslint-disable-next-line array-callback-return
                        jsonStats.warnings.map((e) => {
                            (0, fancy_log_1.default)(e.message);
                        });
                    }
                    if (jsonStats.errors && jsonStats.errors.length > 0) {
                        (0, fancy_log_1.default)(chalk_1.default.red("[Webpack errors]:") + chalk_1.default.reset());
                        // eslint-disable-next-line array-callback-return
                        jsonStats.errors.map((e) => {
                            (0, fancy_log_1.default)(e.message);
                        });
                        return callback(new plugin_error_1.default("webpack", `${jsonStats.errorsCount} webpack error(s) found.`));
                    }
                }
            }
            callback();
        });
    };
    gulp.task("webpack:client", callback => {
        (0, _1.trackEvent)("webpack:client");
        webpackTask(1, callback);
    });
    gulp.task("webpack:server", callback => {
        (0, _1.trackEvent)("webpack:server");
        webpackTask(0, callback);
    });
    gulp.task("webpack", (0, _1.dependenciesP)(gulp, "webpack", "webpack:client", "webpack:server"));
};
exports.webpackTasks = webpackTasks;
