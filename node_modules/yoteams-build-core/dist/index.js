"use strict";
// Copyright (c) Wictor WilÃ©n. All rights reserved.
// Licensed under the MIT license.
// SPDX-License-Identifier: MIT
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = exports.trackEvent = exports.dependenciesP = exports.dependencies = void 0;
const buildTasks_1 = require("./buildTasks");
const codespacesTasks_1 = require("./codespacesTasks");
const loadPlugins_1 = require("./loadPlugins");
const manifest_1 = require("./manifest");
const ngrokTasks_1 = require("./ngrokTasks");
const nukeTasks_1 = require("./nukeTasks");
const serveTasks_1 = require("./serveTasks");
const styleTasks_1 = require("./styleTasks");
const webpackTasks_1 = require("./webpackTasks");
const webTasks_1 = require("./webTasks");
const crypto = __importStar(require("crypto"));
const argv = require("yargs").argv;
const debug = argv.debug !== undefined;
__exportStar(require("./iBuildCoreConfig"), exports);
// optimize App Insights performance
process.env.APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL = "none";
process.env.APPLICATION_INSIGHTS_NO_STATSBEAT = "true";
// eslint-disable-next-line import/first
const appInsights = __importStar(require("applicationinsights"));
/**
 * Run the dependencies in series
 * @param gulp the gulp client
 * @param eventName name of event to track
 * @param tasks the tasks
 */
const dependencies = (gulp, eventName, ...tasks) => {
    return (done) => {
        (0, exports.trackEvent)(eventName);
        gulp.series(...tasks)(done);
    };
};
exports.dependencies = dependencies;
/**
 * Run the dependencies in parallel
 * @param gulp the gulp client
 * @param eventName name of event to track
 * @param tasks the tasks
 */
const dependenciesP = (gulp, eventName, ...tasks) => {
    return (done) => {
        (0, exports.trackEvent)(eventName);
        gulp.parallel(...tasks)(done);
    };
};
exports.dependenciesP = dependenciesP;
const trackEvent = (eventName) => {
    if (appInsights && appInsights.defaultClient) {
        appInsights.defaultClient.trackEvent({ name: "yoteams-build-core:" + eventName });
        appInsights.defaultClient.flush();
    }
};
exports.trackEvent = trackEvent;
/**
 * Initializes all Gulp tasks
 * @param gulp the gulp client
 * @param config optional config
 */
const setup = (gulp, config) => {
    const pkg = require("../package.json");
    // Set up telemetry
    if (!(process.env.YOTEAMS_TELEMETRY_OPTOUT === "1" ||
        process.env.YOTEAMS_TELEMETRY_OPTOUT === "true")) {
        // Set up the App Insights client
        appInsights.setup("6d773b93-ff70-45c5-907c-8edae9bf90eb").setInternalLogging(false, false);
        // Add a random session ID to the telemetry
        appInsights.defaultClient.context.tags["ai.session.id"] = crypto.randomBytes(24).toString("base64");
        // Delete unnecessary telemetry data
        delete appInsights.defaultClient.context.tags["ai.cloud.roleInstance"];
        delete appInsights.defaultClient.context.tags["ai.cloud.role"];
        // Set common properties for all logging
        appInsights.defaultClient.commonProperties = {
            version: pkg.version,
            node: process.version,
            debug: debug.toString()
        };
    }
    (0, manifest_1.manifest)(gulp, config);
    (0, webpackTasks_1.webpackTasks)(gulp, config);
    (0, webTasks_1.webTasks)(gulp, config);
    (0, nukeTasks_1.nukeTasks)(gulp, config);
    (0, styleTasks_1.styleTasks)(gulp, config);
    (0, buildTasks_1.buildTasks)(gulp, config);
    (0, serveTasks_1.serveTasks)(gulp, config);
    (0, ngrokTasks_1.ngrokTasks)(gulp, config);
    (0, codespacesTasks_1.codespacesTasks)(gulp, config);
    // load additional tasks
    (0, loadPlugins_1.loadPlugins)(gulp, config);
};
exports.setup = setup;
